// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package walletrpc is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	VersionRequest
	VersionResponse
	TransactionDetails
	BlockDetails
	AccountBalance
	PingRequest
	PingResponse
	NetworkRequest
	NetworkResponse
	AccountNumberRequest
	AccountNumberResponse
	AccountsRequest
	AccountsResponse
	RenameAccountRequest
	RenameAccountResponse
	RescanRequest
	RescanResponse
	NextAccountRequest
	NextAccountResponse
	NextAddressRequest
	NextAddressResponse
	ImportPrivateKeyRequest
	ImportPrivateKeyResponse
	ImportScriptRequest
	ImportScriptResponse
	BalanceRequest
	BalanceResponse
	GetTransactionsRequest
	GetTransactionsResponse
	TicketPriceRequest
	TicketPriceResponse
	StakeInfoRequest
	StakeInfoResponse
	ChangePassphraseRequest
	ChangePassphraseResponse
	FundTransactionRequest
	FundTransactionResponse
	ConstructTransactionRequest
	ConstructTransactionResponse
	SignTransactionRequest
	SignTransactionResponse
	PublishTransactionRequest
	PublishTransactionResponse
	PurchaseTicketsRequest
	PurchaseTicketsResponse
	LoadActiveDataFiltersRequest
	LoadActiveDataFiltersResponse
	TransactionNotificationsRequest
	TransactionNotificationsResponse
	SpentnessNotificationsRequest
	SpentnessNotificationsResponse
	AccountNotificationsRequest
	AccountNotificationsResponse
	CreateWalletRequest
	CreateWalletResponse
	OpenWalletRequest
	OpenWalletResponse
	CloseWalletRequest
	CloseWalletResponse
	WalletExistsRequest
	WalletExistsResponse
	StartConsensusRpcRequest
	StartConsensusRpcResponse
	DiscoverAddressesRequest
	DiscoverAddressesResponse
	SubscribeToBlockNotificationsRequest
	SubscribeToBlockNotificationsResponse
	FetchHeadersRequest
	FetchHeadersResponse
	GenerateRandomSeedRequest
	GenerateRandomSeedResponse
	DecodeSeedRequest
	DecodeSeedResponse
	StartTicketPurchaseRequest
	StartTicketPurchaseResponse
	StopTicketPurchaseRequest
	StopTicketPurchaseResponse
	TicketBuyerConfigRequest
	TicketBuyerConfigResponse
	SetAccountNameRequest
	SetAccountNameResponse
	SetAvgPriceModeRequest
	SetAvgPriceModeResponse
	SetAvgPriceVWAPDeltaRequest
	SetAvgPriceVWAPDeltaResponse
	SetBalanceToMaintainRequest
	SetBalanceToMaintainResponse
	SetBlocksToAverageRequest
	SetBlocksToAverageResponse
	SetDontWaitForTicketsRequest
	SetDontWaitForTicketsResponse
	SetExpiryDeltaRequest
	SetExpiryDeltaResponse
	SetFeeSourceRequest
	SetFeeSourceResponse
	SetFeeTargetScalingRequest
	SetFeeTargetScalingResponse
	SetMinFeeRequest
	SetMinFeeResponse
	SetMinPriceScaleRequest
	SetMinPriceScaleResponse
	SetMaxFeeRequest
	SetMaxFeeResponse
	SetMaxPerBlockRequest
	SetMaxPerBlockResponse
	SetMaxPriceAbsoluteRequest
	SetMaxPriceAbsoluteResponse
	SetMaxPriceRelativeRequest
	SetMaxPriceRelativeResponse
	SetMaxPriceScaleRequest
	SetMaxPriceScaleResponse
	SetMaxInMempoolRequest
	SetMaxInMempoolResponse
	SetPoolAddressRequest
	SetPoolAddressResponse
	SetPoolFeesRequest
	SetPoolFeesResponse
	SetSpreadTicketPurchasesRequest
	SetSpreadTicketPurchasesResponse
	SetTicketAddressRequest
	SetTicketAddressResponse
	SetTxFeeRequest
	SetTxFeeResponse
*/
package walletrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NextAddressRequest_Kind int32

const (
	NextAddressRequest_BIP0044_EXTERNAL NextAddressRequest_Kind = 0
	NextAddressRequest_BIP0044_INTERNAL NextAddressRequest_Kind = 1
)

var NextAddressRequest_Kind_name = map[int32]string{
	0: "BIP0044_EXTERNAL",
	1: "BIP0044_INTERNAL",
}
var NextAddressRequest_Kind_value = map[string]int32{
	"BIP0044_EXTERNAL": 0,
	"BIP0044_INTERNAL": 1,
}

func (x NextAddressRequest_Kind) String() string {
	return proto.EnumName(NextAddressRequest_Kind_name, int32(x))
}
func (NextAddressRequest_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

type ChangePassphraseRequest_Key int32

const (
	ChangePassphraseRequest_PRIVATE ChangePassphraseRequest_Key = 0
	ChangePassphraseRequest_PUBLIC  ChangePassphraseRequest_Key = 1
)

var ChangePassphraseRequest_Key_name = map[int32]string{
	0: "PRIVATE",
	1: "PUBLIC",
}
var ChangePassphraseRequest_Key_value = map[string]int32{
	"PRIVATE": 0,
	"PUBLIC":  1,
}

func (x ChangePassphraseRequest_Key) String() string {
	return proto.EnumName(ChangePassphraseRequest_Key_name, int32(x))
}
func (ChangePassphraseRequest_Key) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33, 0}
}

type ConstructTransactionRequest_OutputSelectionAlgorithm int32

const (
	ConstructTransactionRequest_UNSPECIFIED ConstructTransactionRequest_OutputSelectionAlgorithm = 0
	ConstructTransactionRequest_ALL         ConstructTransactionRequest_OutputSelectionAlgorithm = 1
)

var ConstructTransactionRequest_OutputSelectionAlgorithm_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "ALL",
}
var ConstructTransactionRequest_OutputSelectionAlgorithm_value = map[string]int32{
	"UNSPECIFIED": 0,
	"ALL":         1,
}

func (x ConstructTransactionRequest_OutputSelectionAlgorithm) String() string {
	return proto.EnumName(ConstructTransactionRequest_OutputSelectionAlgorithm_name, int32(x))
}
func (ConstructTransactionRequest_OutputSelectionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 0}
}

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VersionResponse struct {
	VersionString string `protobuf:"bytes,1,opt,name=version_string,json=versionString" json:"version_string,omitempty"`
	Major         uint32 `protobuf:"varint,2,opt,name=major" json:"major,omitempty"`
	Minor         uint32 `protobuf:"varint,3,opt,name=minor" json:"minor,omitempty"`
	Patch         uint32 `protobuf:"varint,4,opt,name=patch" json:"patch,omitempty"`
	Prerelease    string `protobuf:"bytes,5,opt,name=prerelease" json:"prerelease,omitempty"`
	BuildMetadata string `protobuf:"bytes,6,opt,name=build_metadata,json=buildMetadata" json:"build_metadata,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VersionResponse) GetVersionString() string {
	if m != nil {
		return m.VersionString
	}
	return ""
}

func (m *VersionResponse) GetMajor() uint32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *VersionResponse) GetMinor() uint32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *VersionResponse) GetPatch() uint32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

func (m *VersionResponse) GetPrerelease() string {
	if m != nil {
		return m.Prerelease
	}
	return ""
}

func (m *VersionResponse) GetBuildMetadata() string {
	if m != nil {
		return m.BuildMetadata
	}
	return ""
}

type TransactionDetails struct {
	Hash        []byte                       `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Transaction []byte                       `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Debits      []*TransactionDetails_Input  `protobuf:"bytes,3,rep,name=debits" json:"debits,omitempty"`
	Credits     []*TransactionDetails_Output `protobuf:"bytes,4,rep,name=credits" json:"credits,omitempty"`
	Fee         int64                        `protobuf:"varint,5,opt,name=fee" json:"fee,omitempty"`
	Timestamp   int64                        `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *TransactionDetails) Reset()                    { *m = TransactionDetails{} }
func (m *TransactionDetails) String() string            { return proto.CompactTextString(m) }
func (*TransactionDetails) ProtoMessage()               {}
func (*TransactionDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TransactionDetails) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *TransactionDetails) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TransactionDetails) GetDebits() []*TransactionDetails_Input {
	if m != nil {
		return m.Debits
	}
	return nil
}

func (m *TransactionDetails) GetCredits() []*TransactionDetails_Output {
	if m != nil {
		return m.Credits
	}
	return nil
}

func (m *TransactionDetails) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *TransactionDetails) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type TransactionDetails_Input struct {
	Index           uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	PreviousAccount uint32 `protobuf:"varint,2,opt,name=previous_account,json=previousAccount" json:"previous_account,omitempty"`
	PreviousAmount  int64  `protobuf:"varint,3,opt,name=previous_amount,json=previousAmount" json:"previous_amount,omitempty"`
}

func (m *TransactionDetails_Input) Reset()                    { *m = TransactionDetails_Input{} }
func (m *TransactionDetails_Input) String() string            { return proto.CompactTextString(m) }
func (*TransactionDetails_Input) ProtoMessage()               {}
func (*TransactionDetails_Input) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *TransactionDetails_Input) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransactionDetails_Input) GetPreviousAccount() uint32 {
	if m != nil {
		return m.PreviousAccount
	}
	return 0
}

func (m *TransactionDetails_Input) GetPreviousAmount() int64 {
	if m != nil {
		return m.PreviousAmount
	}
	return 0
}

type TransactionDetails_Output struct {
	Index        uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Account      uint32 `protobuf:"varint,2,opt,name=account" json:"account,omitempty"`
	Internal     bool   `protobuf:"varint,3,opt,name=internal" json:"internal,omitempty"`
	Amount       int64  `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	Address      string `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	OutputScript []byte `protobuf:"bytes,6,opt,name=output_script,json=outputScript,proto3" json:"output_script,omitempty"`
}

func (m *TransactionDetails_Output) Reset()                    { *m = TransactionDetails_Output{} }
func (m *TransactionDetails_Output) String() string            { return proto.CompactTextString(m) }
func (*TransactionDetails_Output) ProtoMessage()               {}
func (*TransactionDetails_Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *TransactionDetails_Output) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransactionDetails_Output) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *TransactionDetails_Output) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *TransactionDetails_Output) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionDetails_Output) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TransactionDetails_Output) GetOutputScript() []byte {
	if m != nil {
		return m.OutputScript
	}
	return nil
}

type BlockDetails struct {
	Hash         []byte                `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height       int32                 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Timestamp    int64                 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Transactions []*TransactionDetails `protobuf:"bytes,4,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *BlockDetails) Reset()                    { *m = BlockDetails{} }
func (m *BlockDetails) String() string            { return proto.CompactTextString(m) }
func (*BlockDetails) ProtoMessage()               {}
func (*BlockDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BlockDetails) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockDetails) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockDetails) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockDetails) GetTransactions() []*TransactionDetails {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type AccountBalance struct {
	Account      uint32 `protobuf:"varint,1,opt,name=account" json:"account,omitempty"`
	TotalBalance int64  `protobuf:"varint,2,opt,name=total_balance,json=totalBalance" json:"total_balance,omitempty"`
}

func (m *AccountBalance) Reset()                    { *m = AccountBalance{} }
func (m *AccountBalance) String() string            { return proto.CompactTextString(m) }
func (*AccountBalance) ProtoMessage()               {}
func (*AccountBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AccountBalance) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *AccountBalance) GetTotalBalance() int64 {
	if m != nil {
		return m.TotalBalance
	}
	return 0
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PingResponse struct {
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type NetworkRequest struct {
}

func (m *NetworkRequest) Reset()                    { *m = NetworkRequest{} }
func (m *NetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkRequest) ProtoMessage()               {}
func (*NetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type NetworkResponse struct {
	ActiveNetwork uint32 `protobuf:"varint,1,opt,name=active_network,json=activeNetwork" json:"active_network,omitempty"`
}

func (m *NetworkResponse) Reset()                    { *m = NetworkResponse{} }
func (m *NetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkResponse) ProtoMessage()               {}
func (*NetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NetworkResponse) GetActiveNetwork() uint32 {
	if m != nil {
		return m.ActiveNetwork
	}
	return 0
}

type AccountNumberRequest struct {
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
}

func (m *AccountNumberRequest) Reset()                    { *m = AccountNumberRequest{} }
func (m *AccountNumberRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountNumberRequest) ProtoMessage()               {}
func (*AccountNumberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AccountNumberRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

type AccountNumberResponse struct {
	AccountNumber uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
}

func (m *AccountNumberResponse) Reset()                    { *m = AccountNumberResponse{} }
func (m *AccountNumberResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountNumberResponse) ProtoMessage()               {}
func (*AccountNumberResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AccountNumberResponse) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

type AccountsRequest struct {
}

func (m *AccountsRequest) Reset()                    { *m = AccountsRequest{} }
func (m *AccountsRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountsRequest) ProtoMessage()               {}
func (*AccountsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type AccountsResponse struct {
	Accounts           []*AccountsResponse_Account `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
	CurrentBlockHash   []byte                      `protobuf:"bytes,2,opt,name=current_block_hash,json=currentBlockHash,proto3" json:"current_block_hash,omitempty"`
	CurrentBlockHeight int32                       `protobuf:"varint,3,opt,name=current_block_height,json=currentBlockHeight" json:"current_block_height,omitempty"`
}

func (m *AccountsResponse) Reset()                    { *m = AccountsResponse{} }
func (m *AccountsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountsResponse) ProtoMessage()               {}
func (*AccountsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AccountsResponse) GetAccounts() []*AccountsResponse_Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *AccountsResponse) GetCurrentBlockHash() []byte {
	if m != nil {
		return m.CurrentBlockHash
	}
	return nil
}

func (m *AccountsResponse) GetCurrentBlockHeight() int32 {
	if m != nil {
		return m.CurrentBlockHeight
	}
	return 0
}

type AccountsResponse_Account struct {
	AccountNumber    uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
	AccountName      string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	TotalBalance     int64  `protobuf:"varint,3,opt,name=total_balance,json=totalBalance" json:"total_balance,omitempty"`
	ExternalKeyCount uint32 `protobuf:"varint,4,opt,name=external_key_count,json=externalKeyCount" json:"external_key_count,omitempty"`
	InternalKeyCount uint32 `protobuf:"varint,5,opt,name=internal_key_count,json=internalKeyCount" json:"internal_key_count,omitempty"`
	ImportedKeyCount uint32 `protobuf:"varint,6,opt,name=imported_key_count,json=importedKeyCount" json:"imported_key_count,omitempty"`
}

func (m *AccountsResponse_Account) Reset()                    { *m = AccountsResponse_Account{} }
func (m *AccountsResponse_Account) String() string            { return proto.CompactTextString(m) }
func (*AccountsResponse_Account) ProtoMessage()               {}
func (*AccountsResponse_Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12, 0} }

func (m *AccountsResponse_Account) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *AccountsResponse_Account) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *AccountsResponse_Account) GetTotalBalance() int64 {
	if m != nil {
		return m.TotalBalance
	}
	return 0
}

func (m *AccountsResponse_Account) GetExternalKeyCount() uint32 {
	if m != nil {
		return m.ExternalKeyCount
	}
	return 0
}

func (m *AccountsResponse_Account) GetInternalKeyCount() uint32 {
	if m != nil {
		return m.InternalKeyCount
	}
	return 0
}

func (m *AccountsResponse_Account) GetImportedKeyCount() uint32 {
	if m != nil {
		return m.ImportedKeyCount
	}
	return 0
}

type RenameAccountRequest struct {
	AccountNumber uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
	NewName       string `protobuf:"bytes,2,opt,name=new_name,json=newName" json:"new_name,omitempty"`
}

func (m *RenameAccountRequest) Reset()                    { *m = RenameAccountRequest{} }
func (m *RenameAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameAccountRequest) ProtoMessage()               {}
func (*RenameAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RenameAccountRequest) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *RenameAccountRequest) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type RenameAccountResponse struct {
}

func (m *RenameAccountResponse) Reset()                    { *m = RenameAccountResponse{} }
func (m *RenameAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*RenameAccountResponse) ProtoMessage()               {}
func (*RenameAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type RescanRequest struct {
	BeginHeight int32 `protobuf:"varint,1,opt,name=begin_height,json=beginHeight" json:"begin_height,omitempty"`
}

func (m *RescanRequest) Reset()                    { *m = RescanRequest{} }
func (m *RescanRequest) String() string            { return proto.CompactTextString(m) }
func (*RescanRequest) ProtoMessage()               {}
func (*RescanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RescanRequest) GetBeginHeight() int32 {
	if m != nil {
		return m.BeginHeight
	}
	return 0
}

type RescanResponse struct {
	RescannedThrough int32 `protobuf:"varint,1,opt,name=rescanned_through,json=rescannedThrough" json:"rescanned_through,omitempty"`
}

func (m *RescanResponse) Reset()                    { *m = RescanResponse{} }
func (m *RescanResponse) String() string            { return proto.CompactTextString(m) }
func (*RescanResponse) ProtoMessage()               {}
func (*RescanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RescanResponse) GetRescannedThrough() int32 {
	if m != nil {
		return m.RescannedThrough
	}
	return 0
}

type NextAccountRequest struct {
	Passphrase  []byte `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	AccountName string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
}

func (m *NextAccountRequest) Reset()                    { *m = NextAccountRequest{} }
func (m *NextAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*NextAccountRequest) ProtoMessage()               {}
func (*NextAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *NextAccountRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *NextAccountRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

type NextAccountResponse struct {
	AccountNumber uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
}

func (m *NextAccountResponse) Reset()                    { *m = NextAccountResponse{} }
func (m *NextAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*NextAccountResponse) ProtoMessage()               {}
func (*NextAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *NextAccountResponse) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

type NextAddressRequest struct {
	Account uint32                  `protobuf:"varint,1,opt,name=account" json:"account,omitempty"`
	Kind    NextAddressRequest_Kind `protobuf:"varint,2,opt,name=kind,enum=walletrpc.NextAddressRequest_Kind" json:"kind,omitempty"`
}

func (m *NextAddressRequest) Reset()                    { *m = NextAddressRequest{} }
func (m *NextAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*NextAddressRequest) ProtoMessage()               {}
func (*NextAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *NextAddressRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *NextAddressRequest) GetKind() NextAddressRequest_Kind {
	if m != nil {
		return m.Kind
	}
	return NextAddressRequest_BIP0044_EXTERNAL
}

type NextAddressResponse struct {
	Address   string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
}

func (m *NextAddressResponse) Reset()                    { *m = NextAddressResponse{} }
func (m *NextAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*NextAddressResponse) ProtoMessage()               {}
func (*NextAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *NextAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NextAddressResponse) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type ImportPrivateKeyRequest struct {
	Passphrase    []byte `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Account       uint32 `protobuf:"varint,2,opt,name=account" json:"account,omitempty"`
	PrivateKeyWif string `protobuf:"bytes,3,opt,name=private_key_wif,json=privateKeyWif" json:"private_key_wif,omitempty"`
	Rescan        bool   `protobuf:"varint,4,opt,name=rescan" json:"rescan,omitempty"`
	ScanFrom      int32  `protobuf:"varint,5,opt,name=scan_from,json=scanFrom" json:"scan_from,omitempty"`
}

func (m *ImportPrivateKeyRequest) Reset()                    { *m = ImportPrivateKeyRequest{} }
func (m *ImportPrivateKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*ImportPrivateKeyRequest) ProtoMessage()               {}
func (*ImportPrivateKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ImportPrivateKeyRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *ImportPrivateKeyRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *ImportPrivateKeyRequest) GetPrivateKeyWif() string {
	if m != nil {
		return m.PrivateKeyWif
	}
	return ""
}

func (m *ImportPrivateKeyRequest) GetRescan() bool {
	if m != nil {
		return m.Rescan
	}
	return false
}

func (m *ImportPrivateKeyRequest) GetScanFrom() int32 {
	if m != nil {
		return m.ScanFrom
	}
	return 0
}

type ImportPrivateKeyResponse struct {
}

func (m *ImportPrivateKeyResponse) Reset()                    { *m = ImportPrivateKeyResponse{} }
func (m *ImportPrivateKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*ImportPrivateKeyResponse) ProtoMessage()               {}
func (*ImportPrivateKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type ImportScriptRequest struct {
	Passphrase []byte `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Script     []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	Rescan     bool   `protobuf:"varint,3,opt,name=rescan" json:"rescan,omitempty"`
	ScanFrom   int32  `protobuf:"varint,4,opt,name=scan_from,json=scanFrom" json:"scan_from,omitempty"`
}

func (m *ImportScriptRequest) Reset()                    { *m = ImportScriptRequest{} }
func (m *ImportScriptRequest) String() string            { return proto.CompactTextString(m) }
func (*ImportScriptRequest) ProtoMessage()               {}
func (*ImportScriptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ImportScriptRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *ImportScriptRequest) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *ImportScriptRequest) GetRescan() bool {
	if m != nil {
		return m.Rescan
	}
	return false
}

func (m *ImportScriptRequest) GetScanFrom() int32 {
	if m != nil {
		return m.ScanFrom
	}
	return 0
}

type ImportScriptResponse struct {
}

func (m *ImportScriptResponse) Reset()                    { *m = ImportScriptResponse{} }
func (m *ImportScriptResponse) String() string            { return proto.CompactTextString(m) }
func (*ImportScriptResponse) ProtoMessage()               {}
func (*ImportScriptResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type BalanceRequest struct {
	AccountNumber         uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
	RequiredConfirmations int32  `protobuf:"varint,2,opt,name=required_confirmations,json=requiredConfirmations" json:"required_confirmations,omitempty"`
}

func (m *BalanceRequest) Reset()                    { *m = BalanceRequest{} }
func (m *BalanceRequest) String() string            { return proto.CompactTextString(m) }
func (*BalanceRequest) ProtoMessage()               {}
func (*BalanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *BalanceRequest) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *BalanceRequest) GetRequiredConfirmations() int32 {
	if m != nil {
		return m.RequiredConfirmations
	}
	return 0
}

type BalanceResponse struct {
	Total          int64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Spendable      int64 `protobuf:"varint,2,opt,name=spendable" json:"spendable,omitempty"`
	ImmatureReward int64 `protobuf:"varint,3,opt,name=immature_reward,json=immatureReward" json:"immature_reward,omitempty"`
}

func (m *BalanceResponse) Reset()                    { *m = BalanceResponse{} }
func (m *BalanceResponse) String() string            { return proto.CompactTextString(m) }
func (*BalanceResponse) ProtoMessage()               {}
func (*BalanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *BalanceResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *BalanceResponse) GetSpendable() int64 {
	if m != nil {
		return m.Spendable
	}
	return 0
}

func (m *BalanceResponse) GetImmatureReward() int64 {
	if m != nil {
		return m.ImmatureReward
	}
	return 0
}

type GetTransactionsRequest struct {
	// Optionally specify the starting block from which to begin including all transactions.
	// Either the starting block hash or height may be specified, but not both.
	// If a block height is specified and is negative, the absolute value becomes the number of
	// last blocks to include.  That is, given a current chain height of 1000 and a starting block
	// height of -3, transaction notifications will be created for blocks 998, 999, and 1000.
	// If both options are excluded, transaction results are created for transactions since the
	// genesis block.
	StartingBlockHash   []byte `protobuf:"bytes,1,opt,name=starting_block_hash,json=startingBlockHash,proto3" json:"starting_block_hash,omitempty"`
	StartingBlockHeight int32  `protobuf:"zigzag32,2,opt,name=starting_block_height,json=startingBlockHeight" json:"starting_block_height,omitempty"`
	// Optionally specify the last block that transaction results may appear in.
	// Either the ending block hash or height may be specified, but not both.
	// If both are excluded, transaction results are created for all transactions
	// through the best block, and include all unmined transactions.
	EndingBlockHash   []byte `protobuf:"bytes,3,opt,name=ending_block_hash,json=endingBlockHash,proto3" json:"ending_block_hash,omitempty"`
	EndingBlockHeight int32  `protobuf:"varint,4,opt,name=ending_block_height,json=endingBlockHeight" json:"ending_block_height,omitempty"`
	// Include at least this many of the newest transactions if they exist.
	// Cannot be used when the ending block hash is specified.
	//
	// TODO: remove until spec adds it back in some way.
	MinimumRecentTransactions int32 `protobuf:"varint,5,opt,name=minimum_recent_transactions,json=minimumRecentTransactions" json:"minimum_recent_transactions,omitempty"`
}

func (m *GetTransactionsRequest) Reset()                    { *m = GetTransactionsRequest{} }
func (m *GetTransactionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionsRequest) ProtoMessage()               {}
func (*GetTransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetTransactionsRequest) GetStartingBlockHash() []byte {
	if m != nil {
		return m.StartingBlockHash
	}
	return nil
}

func (m *GetTransactionsRequest) GetStartingBlockHeight() int32 {
	if m != nil {
		return m.StartingBlockHeight
	}
	return 0
}

func (m *GetTransactionsRequest) GetEndingBlockHash() []byte {
	if m != nil {
		return m.EndingBlockHash
	}
	return nil
}

func (m *GetTransactionsRequest) GetEndingBlockHeight() int32 {
	if m != nil {
		return m.EndingBlockHeight
	}
	return 0
}

func (m *GetTransactionsRequest) GetMinimumRecentTransactions() int32 {
	if m != nil {
		return m.MinimumRecentTransactions
	}
	return 0
}

type GetTransactionsResponse struct {
	MinedTransactions   *BlockDetails         `protobuf:"bytes,1,opt,name=mined_transactions,json=minedTransactions" json:"mined_transactions,omitempty"`
	UnminedTransactions []*TransactionDetails `protobuf:"bytes,2,rep,name=unmined_transactions,json=unminedTransactions" json:"unmined_transactions,omitempty"`
}

func (m *GetTransactionsResponse) Reset()                    { *m = GetTransactionsResponse{} }
func (m *GetTransactionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionsResponse) ProtoMessage()               {}
func (*GetTransactionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *GetTransactionsResponse) GetMinedTransactions() *BlockDetails {
	if m != nil {
		return m.MinedTransactions
	}
	return nil
}

func (m *GetTransactionsResponse) GetUnminedTransactions() []*TransactionDetails {
	if m != nil {
		return m.UnminedTransactions
	}
	return nil
}

type TicketPriceRequest struct {
}

func (m *TicketPriceRequest) Reset()                    { *m = TicketPriceRequest{} }
func (m *TicketPriceRequest) String() string            { return proto.CompactTextString(m) }
func (*TicketPriceRequest) ProtoMessage()               {}
func (*TicketPriceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type TicketPriceResponse struct {
	TicketPrice int64 `protobuf:"varint,1,opt,name=ticket_price,json=ticketPrice" json:"ticket_price,omitempty"`
	Height      int32 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *TicketPriceResponse) Reset()                    { *m = TicketPriceResponse{} }
func (m *TicketPriceResponse) String() string            { return proto.CompactTextString(m) }
func (*TicketPriceResponse) ProtoMessage()               {}
func (*TicketPriceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *TicketPriceResponse) GetTicketPrice() int64 {
	if m != nil {
		return m.TicketPrice
	}
	return 0
}

func (m *TicketPriceResponse) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type StakeInfoRequest struct {
}

func (m *StakeInfoRequest) Reset()                    { *m = StakeInfoRequest{} }
func (m *StakeInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*StakeInfoRequest) ProtoMessage()               {}
func (*StakeInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type StakeInfoResponse struct {
	PoolSize      uint32 `protobuf:"varint,1,opt,name=pool_size,json=poolSize" json:"pool_size,omitempty"`
	AllMempoolTix uint32 `protobuf:"varint,2,opt,name=all_mempool_tix,json=allMempoolTix" json:"all_mempool_tix,omitempty"`
	OwnMempoolTix uint32 `protobuf:"varint,3,opt,name=own_mempool_tix,json=ownMempoolTix" json:"own_mempool_tix,omitempty"`
	Immature      uint32 `protobuf:"varint,4,opt,name=immature" json:"immature,omitempty"`
	Live          uint32 `protobuf:"varint,5,opt,name=live" json:"live,omitempty"`
	Voted         uint32 `protobuf:"varint,6,opt,name=voted" json:"voted,omitempty"`
	Missed        uint32 `protobuf:"varint,7,opt,name=missed" json:"missed,omitempty"`
	Revoked       uint32 `protobuf:"varint,8,opt,name=revoked" json:"revoked,omitempty"`
	Expired       uint32 `protobuf:"varint,9,opt,name=expired" json:"expired,omitempty"`
	TotalSubsidy  int64  `protobuf:"varint,10,opt,name=total_subsidy,json=totalSubsidy" json:"total_subsidy,omitempty"`
}

func (m *StakeInfoResponse) Reset()                    { *m = StakeInfoResponse{} }
func (m *StakeInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*StakeInfoResponse) ProtoMessage()               {}
func (*StakeInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *StakeInfoResponse) GetPoolSize() uint32 {
	if m != nil {
		return m.PoolSize
	}
	return 0
}

func (m *StakeInfoResponse) GetAllMempoolTix() uint32 {
	if m != nil {
		return m.AllMempoolTix
	}
	return 0
}

func (m *StakeInfoResponse) GetOwnMempoolTix() uint32 {
	if m != nil {
		return m.OwnMempoolTix
	}
	return 0
}

func (m *StakeInfoResponse) GetImmature() uint32 {
	if m != nil {
		return m.Immature
	}
	return 0
}

func (m *StakeInfoResponse) GetLive() uint32 {
	if m != nil {
		return m.Live
	}
	return 0
}

func (m *StakeInfoResponse) GetVoted() uint32 {
	if m != nil {
		return m.Voted
	}
	return 0
}

func (m *StakeInfoResponse) GetMissed() uint32 {
	if m != nil {
		return m.Missed
	}
	return 0
}

func (m *StakeInfoResponse) GetRevoked() uint32 {
	if m != nil {
		return m.Revoked
	}
	return 0
}

func (m *StakeInfoResponse) GetExpired() uint32 {
	if m != nil {
		return m.Expired
	}
	return 0
}

func (m *StakeInfoResponse) GetTotalSubsidy() int64 {
	if m != nil {
		return m.TotalSubsidy
	}
	return 0
}

type ChangePassphraseRequest struct {
	Key           ChangePassphraseRequest_Key `protobuf:"varint,1,opt,name=key,enum=walletrpc.ChangePassphraseRequest_Key" json:"key,omitempty"`
	OldPassphrase []byte                      `protobuf:"bytes,2,opt,name=old_passphrase,json=oldPassphrase,proto3" json:"old_passphrase,omitempty"`
	NewPassphrase []byte                      `protobuf:"bytes,3,opt,name=new_passphrase,json=newPassphrase,proto3" json:"new_passphrase,omitempty"`
}

func (m *ChangePassphraseRequest) Reset()                    { *m = ChangePassphraseRequest{} }
func (m *ChangePassphraseRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangePassphraseRequest) ProtoMessage()               {}
func (*ChangePassphraseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ChangePassphraseRequest) GetKey() ChangePassphraseRequest_Key {
	if m != nil {
		return m.Key
	}
	return ChangePassphraseRequest_PRIVATE
}

func (m *ChangePassphraseRequest) GetOldPassphrase() []byte {
	if m != nil {
		return m.OldPassphrase
	}
	return nil
}

func (m *ChangePassphraseRequest) GetNewPassphrase() []byte {
	if m != nil {
		return m.NewPassphrase
	}
	return nil
}

type ChangePassphraseResponse struct {
}

func (m *ChangePassphraseResponse) Reset()                    { *m = ChangePassphraseResponse{} }
func (m *ChangePassphraseResponse) String() string            { return proto.CompactTextString(m) }
func (*ChangePassphraseResponse) ProtoMessage()               {}
func (*ChangePassphraseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type FundTransactionRequest struct {
	Account                  uint32 `protobuf:"varint,1,opt,name=account" json:"account,omitempty"`
	TargetAmount             int64  `protobuf:"varint,2,opt,name=target_amount,json=targetAmount" json:"target_amount,omitempty"`
	RequiredConfirmations    int32  `protobuf:"varint,3,opt,name=required_confirmations,json=requiredConfirmations" json:"required_confirmations,omitempty"`
	IncludeImmatureCoinbases bool   `protobuf:"varint,4,opt,name=include_immature_coinbases,json=includeImmatureCoinbases" json:"include_immature_coinbases,omitempty"`
	IncludeChangeScript      bool   `protobuf:"varint,5,opt,name=include_change_script,json=includeChangeScript" json:"include_change_script,omitempty"`
}

func (m *FundTransactionRequest) Reset()                    { *m = FundTransactionRequest{} }
func (m *FundTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*FundTransactionRequest) ProtoMessage()               {}
func (*FundTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *FundTransactionRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *FundTransactionRequest) GetTargetAmount() int64 {
	if m != nil {
		return m.TargetAmount
	}
	return 0
}

func (m *FundTransactionRequest) GetRequiredConfirmations() int32 {
	if m != nil {
		return m.RequiredConfirmations
	}
	return 0
}

func (m *FundTransactionRequest) GetIncludeImmatureCoinbases() bool {
	if m != nil {
		return m.IncludeImmatureCoinbases
	}
	return false
}

func (m *FundTransactionRequest) GetIncludeChangeScript() bool {
	if m != nil {
		return m.IncludeChangeScript
	}
	return false
}

type FundTransactionResponse struct {
	SelectedOutputs []*FundTransactionResponse_PreviousOutput `protobuf:"bytes,1,rep,name=selected_outputs,json=selectedOutputs" json:"selected_outputs,omitempty"`
	TotalAmount     int64                                     `protobuf:"varint,2,opt,name=total_amount,json=totalAmount" json:"total_amount,omitempty"`
	ChangePkScript  []byte                                    `protobuf:"bytes,3,opt,name=change_pk_script,json=changePkScript,proto3" json:"change_pk_script,omitempty"`
}

func (m *FundTransactionResponse) Reset()                    { *m = FundTransactionResponse{} }
func (m *FundTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*FundTransactionResponse) ProtoMessage()               {}
func (*FundTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *FundTransactionResponse) GetSelectedOutputs() []*FundTransactionResponse_PreviousOutput {
	if m != nil {
		return m.SelectedOutputs
	}
	return nil
}

func (m *FundTransactionResponse) GetTotalAmount() int64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *FundTransactionResponse) GetChangePkScript() []byte {
	if m != nil {
		return m.ChangePkScript
	}
	return nil
}

type FundTransactionResponse_PreviousOutput struct {
	TransactionHash []byte `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	OutputIndex     uint32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex" json:"output_index,omitempty"`
	Amount          int64  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	PkScript        []byte `protobuf:"bytes,4,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"`
	ReceiveTime     int64  `protobuf:"varint,5,opt,name=receive_time,json=receiveTime" json:"receive_time,omitempty"`
	FromCoinbase    bool   `protobuf:"varint,6,opt,name=from_coinbase,json=fromCoinbase" json:"from_coinbase,omitempty"`
	Tree            int32  `protobuf:"varint,7,opt,name=tree" json:"tree,omitempty"`
}

func (m *FundTransactionResponse_PreviousOutput) Reset() {
	*m = FundTransactionResponse_PreviousOutput{}
}
func (m *FundTransactionResponse_PreviousOutput) String() string { return proto.CompactTextString(m) }
func (*FundTransactionResponse_PreviousOutput) ProtoMessage()    {}
func (*FundTransactionResponse_PreviousOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36, 0}
}

func (m *FundTransactionResponse_PreviousOutput) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}

func (m *FundTransactionResponse_PreviousOutput) GetOutputIndex() uint32 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

func (m *FundTransactionResponse_PreviousOutput) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *FundTransactionResponse_PreviousOutput) GetPkScript() []byte {
	if m != nil {
		return m.PkScript
	}
	return nil
}

func (m *FundTransactionResponse_PreviousOutput) GetReceiveTime() int64 {
	if m != nil {
		return m.ReceiveTime
	}
	return 0
}

func (m *FundTransactionResponse_PreviousOutput) GetFromCoinbase() bool {
	if m != nil {
		return m.FromCoinbase
	}
	return false
}

func (m *FundTransactionResponse_PreviousOutput) GetTree() int32 {
	if m != nil {
		return m.Tree
	}
	return 0
}

type ConstructTransactionRequest struct {
	SourceAccount            uint32                                               `protobuf:"varint,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"`
	RequiredConfirmations    int32                                                `protobuf:"varint,2,opt,name=required_confirmations,json=requiredConfirmations" json:"required_confirmations,omitempty"`
	FeePerKb                 int32                                                `protobuf:"varint,3,opt,name=fee_per_kb,json=feePerKb" json:"fee_per_kb,omitempty"`
	OutputSelectionAlgorithm ConstructTransactionRequest_OutputSelectionAlgorithm `protobuf:"varint,4,opt,name=output_selection_algorithm,json=outputSelectionAlgorithm,enum=walletrpc.ConstructTransactionRequest_OutputSelectionAlgorithm" json:"output_selection_algorithm,omitempty"`
	NonChangeOutputs         []*ConstructTransactionRequest_Output                `protobuf:"bytes,5,rep,name=non_change_outputs,json=nonChangeOutputs" json:"non_change_outputs,omitempty"`
	ChangeDestination        *ConstructTransactionRequest_OutputDestination       `protobuf:"bytes,6,opt,name=change_destination,json=changeDestination" json:"change_destination,omitempty"`
}

func (m *ConstructTransactionRequest) Reset()                    { *m = ConstructTransactionRequest{} }
func (m *ConstructTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*ConstructTransactionRequest) ProtoMessage()               {}
func (*ConstructTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ConstructTransactionRequest) GetSourceAccount() uint32 {
	if m != nil {
		return m.SourceAccount
	}
	return 0
}

func (m *ConstructTransactionRequest) GetRequiredConfirmations() int32 {
	if m != nil {
		return m.RequiredConfirmations
	}
	return 0
}

func (m *ConstructTransactionRequest) GetFeePerKb() int32 {
	if m != nil {
		return m.FeePerKb
	}
	return 0
}

func (m *ConstructTransactionRequest) GetOutputSelectionAlgorithm() ConstructTransactionRequest_OutputSelectionAlgorithm {
	if m != nil {
		return m.OutputSelectionAlgorithm
	}
	return ConstructTransactionRequest_UNSPECIFIED
}

func (m *ConstructTransactionRequest) GetNonChangeOutputs() []*ConstructTransactionRequest_Output {
	if m != nil {
		return m.NonChangeOutputs
	}
	return nil
}

func (m *ConstructTransactionRequest) GetChangeDestination() *ConstructTransactionRequest_OutputDestination {
	if m != nil {
		return m.ChangeDestination
	}
	return nil
}

type ConstructTransactionRequest_OutputDestination struct {
	Address       string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Script        []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	ScriptVersion uint32 `protobuf:"varint,3,opt,name=script_version,json=scriptVersion" json:"script_version,omitempty"`
}

func (m *ConstructTransactionRequest_OutputDestination) Reset() {
	*m = ConstructTransactionRequest_OutputDestination{}
}
func (m *ConstructTransactionRequest_OutputDestination) String() string {
	return proto.CompactTextString(m)
}
func (*ConstructTransactionRequest_OutputDestination) ProtoMessage() {}
func (*ConstructTransactionRequest_OutputDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 0}
}

func (m *ConstructTransactionRequest_OutputDestination) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ConstructTransactionRequest_OutputDestination) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *ConstructTransactionRequest_OutputDestination) GetScriptVersion() uint32 {
	if m != nil {
		return m.ScriptVersion
	}
	return 0
}

type ConstructTransactionRequest_Output struct {
	Destination *ConstructTransactionRequest_OutputDestination `protobuf:"bytes,1,opt,name=destination" json:"destination,omitempty"`
	Amount      int64                                          `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *ConstructTransactionRequest_Output) Reset()         { *m = ConstructTransactionRequest_Output{} }
func (m *ConstructTransactionRequest_Output) String() string { return proto.CompactTextString(m) }
func (*ConstructTransactionRequest_Output) ProtoMessage()    {}
func (*ConstructTransactionRequest_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 1}
}

func (m *ConstructTransactionRequest_Output) GetDestination() *ConstructTransactionRequest_OutputDestination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *ConstructTransactionRequest_Output) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ConstructTransactionResponse struct {
	UnsignedTransaction       []byte `protobuf:"bytes,1,opt,name=unsigned_transaction,json=unsignedTransaction,proto3" json:"unsigned_transaction,omitempty"`
	TotalPreviousOutputAmount int64  `protobuf:"varint,2,opt,name=total_previous_output_amount,json=totalPreviousOutputAmount" json:"total_previous_output_amount,omitempty"`
	TotalOutputAmount         int64  `protobuf:"varint,3,opt,name=total_output_amount,json=totalOutputAmount" json:"total_output_amount,omitempty"`
	EstimatedSignedSize       uint32 `protobuf:"varint,4,opt,name=estimated_signed_size,json=estimatedSignedSize" json:"estimated_signed_size,omitempty"`
}

func (m *ConstructTransactionResponse) Reset()                    { *m = ConstructTransactionResponse{} }
func (m *ConstructTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*ConstructTransactionResponse) ProtoMessage()               {}
func (*ConstructTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ConstructTransactionResponse) GetUnsignedTransaction() []byte {
	if m != nil {
		return m.UnsignedTransaction
	}
	return nil
}

func (m *ConstructTransactionResponse) GetTotalPreviousOutputAmount() int64 {
	if m != nil {
		return m.TotalPreviousOutputAmount
	}
	return 0
}

func (m *ConstructTransactionResponse) GetTotalOutputAmount() int64 {
	if m != nil {
		return m.TotalOutputAmount
	}
	return 0
}

func (m *ConstructTransactionResponse) GetEstimatedSignedSize() uint32 {
	if m != nil {
		return m.EstimatedSignedSize
	}
	return 0
}

type SignTransactionRequest struct {
	Passphrase            []byte `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	SerializedTransaction []byte `protobuf:"bytes,2,opt,name=serialized_transaction,json=serializedTransaction,proto3" json:"serialized_transaction,omitempty"`
	// If no indexes are specified, signatures scripts will be added for
	// every input. If any input indexes are specified, only those inputs
	// will be signed.  Rather than returning an incompletely signed
	// transaction if any of the inputs to be signed can not be, the RPC
	// immediately errors.
	InputIndexes []uint32 `protobuf:"varint,3,rep,packed,name=input_indexes,json=inputIndexes" json:"input_indexes,omitempty"`
}

func (m *SignTransactionRequest) Reset()                    { *m = SignTransactionRequest{} }
func (m *SignTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SignTransactionRequest) ProtoMessage()               {}
func (*SignTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *SignTransactionRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *SignTransactionRequest) GetSerializedTransaction() []byte {
	if m != nil {
		return m.SerializedTransaction
	}
	return nil
}

func (m *SignTransactionRequest) GetInputIndexes() []uint32 {
	if m != nil {
		return m.InputIndexes
	}
	return nil
}

type SignTransactionResponse struct {
	Transaction          []byte   `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	UnsignedInputIndexes []uint32 `protobuf:"varint,2,rep,packed,name=unsigned_input_indexes,json=unsignedInputIndexes" json:"unsigned_input_indexes,omitempty"`
}

func (m *SignTransactionResponse) Reset()                    { *m = SignTransactionResponse{} }
func (m *SignTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SignTransactionResponse) ProtoMessage()               {}
func (*SignTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *SignTransactionResponse) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *SignTransactionResponse) GetUnsignedInputIndexes() []uint32 {
	if m != nil {
		return m.UnsignedInputIndexes
	}
	return nil
}

type PublishTransactionRequest struct {
	SignedTransaction []byte `protobuf:"bytes,1,opt,name=signed_transaction,json=signedTransaction,proto3" json:"signed_transaction,omitempty"`
}

func (m *PublishTransactionRequest) Reset()                    { *m = PublishTransactionRequest{} }
func (m *PublishTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishTransactionRequest) ProtoMessage()               {}
func (*PublishTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *PublishTransactionRequest) GetSignedTransaction() []byte {
	if m != nil {
		return m.SignedTransaction
	}
	return nil
}

type PublishTransactionResponse struct {
	TransactionHash []byte `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (m *PublishTransactionResponse) Reset()                    { *m = PublishTransactionResponse{} }
func (m *PublishTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishTransactionResponse) ProtoMessage()               {}
func (*PublishTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *PublishTransactionResponse) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}

type PurchaseTicketsRequest struct {
	Passphrase            []byte  `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Account               uint32  `protobuf:"varint,2,opt,name=account" json:"account,omitempty"`
	SpendLimit            int64   `protobuf:"varint,3,opt,name=spend_limit,json=spendLimit" json:"spend_limit,omitempty"`
	RequiredConfirmations uint32  `protobuf:"varint,4,opt,name=required_confirmations,json=requiredConfirmations" json:"required_confirmations,omitempty"`
	TicketAddress         string  `protobuf:"bytes,5,opt,name=ticket_address,json=ticketAddress" json:"ticket_address,omitempty"`
	NumTickets            uint32  `protobuf:"varint,6,opt,name=num_tickets,json=numTickets" json:"num_tickets,omitempty"`
	PoolAddress           string  `protobuf:"bytes,7,opt,name=pool_address,json=poolAddress" json:"pool_address,omitempty"`
	PoolFees              float64 `protobuf:"fixed64,8,opt,name=pool_fees,json=poolFees" json:"pool_fees,omitempty"`
	Expiry                uint32  `protobuf:"varint,9,opt,name=expiry" json:"expiry,omitempty"`
	TxFee                 int64   `protobuf:"varint,10,opt,name=tx_fee,json=txFee" json:"tx_fee,omitempty"`
	TicketFee             int64   `protobuf:"varint,11,opt,name=ticket_fee,json=ticketFee" json:"ticket_fee,omitempty"`
}

func (m *PurchaseTicketsRequest) Reset()                    { *m = PurchaseTicketsRequest{} }
func (m *PurchaseTicketsRequest) String() string            { return proto.CompactTextString(m) }
func (*PurchaseTicketsRequest) ProtoMessage()               {}
func (*PurchaseTicketsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *PurchaseTicketsRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *PurchaseTicketsRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetSpendLimit() int64 {
	if m != nil {
		return m.SpendLimit
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetRequiredConfirmations() uint32 {
	if m != nil {
		return m.RequiredConfirmations
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetTicketAddress() string {
	if m != nil {
		return m.TicketAddress
	}
	return ""
}

func (m *PurchaseTicketsRequest) GetNumTickets() uint32 {
	if m != nil {
		return m.NumTickets
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *PurchaseTicketsRequest) GetPoolFees() float64 {
	if m != nil {
		return m.PoolFees
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetTxFee() int64 {
	if m != nil {
		return m.TxFee
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetTicketFee() int64 {
	if m != nil {
		return m.TicketFee
	}
	return 0
}

type PurchaseTicketsResponse struct {
	TicketHashes [][]byte `protobuf:"bytes,1,rep,name=ticket_hashes,json=ticketHashes,proto3" json:"ticket_hashes,omitempty"`
}

func (m *PurchaseTicketsResponse) Reset()                    { *m = PurchaseTicketsResponse{} }
func (m *PurchaseTicketsResponse) String() string            { return proto.CompactTextString(m) }
func (*PurchaseTicketsResponse) ProtoMessage()               {}
func (*PurchaseTicketsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *PurchaseTicketsResponse) GetTicketHashes() [][]byte {
	if m != nil {
		return m.TicketHashes
	}
	return nil
}

type LoadActiveDataFiltersRequest struct {
}

func (m *LoadActiveDataFiltersRequest) Reset()                    { *m = LoadActiveDataFiltersRequest{} }
func (m *LoadActiveDataFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadActiveDataFiltersRequest) ProtoMessage()               {}
func (*LoadActiveDataFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

type LoadActiveDataFiltersResponse struct {
}

func (m *LoadActiveDataFiltersResponse) Reset()                    { *m = LoadActiveDataFiltersResponse{} }
func (m *LoadActiveDataFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*LoadActiveDataFiltersResponse) ProtoMessage()               {}
func (*LoadActiveDataFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

type TransactionNotificationsRequest struct {
}

func (m *TransactionNotificationsRequest) Reset()         { *m = TransactionNotificationsRequest{} }
func (m *TransactionNotificationsRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionNotificationsRequest) ProtoMessage()    {}
func (*TransactionNotificationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{47}
}

type TransactionNotificationsResponse struct {
	// Sorted by increasing height.  This is a repeated field so many new blocks
	// in a new best chain can be notified at once during a reorganize.
	AttachedBlocks []*BlockDetails `protobuf:"bytes,1,rep,name=attached_blocks,json=attachedBlocks" json:"attached_blocks,omitempty"`
	// If there was a chain reorganize, there may have been blocks with wallet
	// transactions that are no longer in the best chain.  These are those
	// block's hashes.
	DetachedBlocks [][]byte `protobuf:"bytes,2,rep,name=detached_blocks,json=detachedBlocks,proto3" json:"detached_blocks,omitempty"`
	// Any new unmined transactions are included here.  These unmined transactions
	// refer to the current best chain, so transactions from detached blocks may
	// be moved to mempool and included here if they are not mined or double spent
	// in the new chain.  Additonally, if no new blocks were attached but a relevant
	// unmined transaction is seen by the wallet, it will be reported here.
	UnminedTransactions []*TransactionDetails `protobuf:"bytes,3,rep,name=unmined_transactions,json=unminedTransactions" json:"unmined_transactions,omitempty"`
	// Instead of notifying all of the removed unmined transactions,
	// just send all of the current hashes.
	UnminedTransactionHashes [][]byte `protobuf:"bytes,4,rep,name=unmined_transaction_hashes,json=unminedTransactionHashes,proto3" json:"unmined_transaction_hashes,omitempty"`
}

func (m *TransactionNotificationsResponse) Reset()         { *m = TransactionNotificationsResponse{} }
func (m *TransactionNotificationsResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionNotificationsResponse) ProtoMessage()    {}
func (*TransactionNotificationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{48}
}

func (m *TransactionNotificationsResponse) GetAttachedBlocks() []*BlockDetails {
	if m != nil {
		return m.AttachedBlocks
	}
	return nil
}

func (m *TransactionNotificationsResponse) GetDetachedBlocks() [][]byte {
	if m != nil {
		return m.DetachedBlocks
	}
	return nil
}

func (m *TransactionNotificationsResponse) GetUnminedTransactions() []*TransactionDetails {
	if m != nil {
		return m.UnminedTransactions
	}
	return nil
}

func (m *TransactionNotificationsResponse) GetUnminedTransactionHashes() [][]byte {
	if m != nil {
		return m.UnminedTransactionHashes
	}
	return nil
}

type SpentnessNotificationsRequest struct {
	Account         uint32 `protobuf:"varint,1,opt,name=account" json:"account,omitempty"`
	NoNotifyUnspent bool   `protobuf:"varint,2,opt,name=no_notify_unspent,json=noNotifyUnspent" json:"no_notify_unspent,omitempty"`
	NoNotifySpent   bool   `protobuf:"varint,3,opt,name=no_notify_spent,json=noNotifySpent" json:"no_notify_spent,omitempty"`
}

func (m *SpentnessNotificationsRequest) Reset()                    { *m = SpentnessNotificationsRequest{} }
func (m *SpentnessNotificationsRequest) String() string            { return proto.CompactTextString(m) }
func (*SpentnessNotificationsRequest) ProtoMessage()               {}
func (*SpentnessNotificationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *SpentnessNotificationsRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *SpentnessNotificationsRequest) GetNoNotifyUnspent() bool {
	if m != nil {
		return m.NoNotifyUnspent
	}
	return false
}

func (m *SpentnessNotificationsRequest) GetNoNotifySpent() bool {
	if m != nil {
		return m.NoNotifySpent
	}
	return false
}

type SpentnessNotificationsResponse struct {
	TransactionHash []byte                                  `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	OutputIndex     uint32                                  `protobuf:"varint,2,opt,name=output_index,json=outputIndex" json:"output_index,omitempty"`
	Spender         *SpentnessNotificationsResponse_Spender `protobuf:"bytes,3,opt,name=spender" json:"spender,omitempty"`
}

func (m *SpentnessNotificationsResponse) Reset()                    { *m = SpentnessNotificationsResponse{} }
func (m *SpentnessNotificationsResponse) String() string            { return proto.CompactTextString(m) }
func (*SpentnessNotificationsResponse) ProtoMessage()               {}
func (*SpentnessNotificationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *SpentnessNotificationsResponse) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}

func (m *SpentnessNotificationsResponse) GetOutputIndex() uint32 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

func (m *SpentnessNotificationsResponse) GetSpender() *SpentnessNotificationsResponse_Spender {
	if m != nil {
		return m.Spender
	}
	return nil
}

type SpentnessNotificationsResponse_Spender struct {
	TransactionHash []byte `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	InputIndex      uint32 `protobuf:"varint,2,opt,name=input_index,json=inputIndex" json:"input_index,omitempty"`
}

func (m *SpentnessNotificationsResponse_Spender) Reset() {
	*m = SpentnessNotificationsResponse_Spender{}
}
func (m *SpentnessNotificationsResponse_Spender) String() string { return proto.CompactTextString(m) }
func (*SpentnessNotificationsResponse_Spender) ProtoMessage()    {}
func (*SpentnessNotificationsResponse_Spender) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{50, 0}
}

func (m *SpentnessNotificationsResponse_Spender) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}

func (m *SpentnessNotificationsResponse_Spender) GetInputIndex() uint32 {
	if m != nil {
		return m.InputIndex
	}
	return 0
}

type AccountNotificationsRequest struct {
}

func (m *AccountNotificationsRequest) Reset()                    { *m = AccountNotificationsRequest{} }
func (m *AccountNotificationsRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountNotificationsRequest) ProtoMessage()               {}
func (*AccountNotificationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

type AccountNotificationsResponse struct {
	AccountNumber    uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
	AccountName      string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	ExternalKeyCount uint32 `protobuf:"varint,3,opt,name=external_key_count,json=externalKeyCount" json:"external_key_count,omitempty"`
	InternalKeyCount uint32 `protobuf:"varint,4,opt,name=internal_key_count,json=internalKeyCount" json:"internal_key_count,omitempty"`
	ImportedKeyCount uint32 `protobuf:"varint,5,opt,name=imported_key_count,json=importedKeyCount" json:"imported_key_count,omitempty"`
}

func (m *AccountNotificationsResponse) Reset()                    { *m = AccountNotificationsResponse{} }
func (m *AccountNotificationsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountNotificationsResponse) ProtoMessage()               {}
func (*AccountNotificationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *AccountNotificationsResponse) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *AccountNotificationsResponse) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *AccountNotificationsResponse) GetExternalKeyCount() uint32 {
	if m != nil {
		return m.ExternalKeyCount
	}
	return 0
}

func (m *AccountNotificationsResponse) GetInternalKeyCount() uint32 {
	if m != nil {
		return m.InternalKeyCount
	}
	return 0
}

func (m *AccountNotificationsResponse) GetImportedKeyCount() uint32 {
	if m != nil {
		return m.ImportedKeyCount
	}
	return 0
}

type CreateWalletRequest struct {
	PublicPassphrase  []byte `protobuf:"bytes,1,opt,name=public_passphrase,json=publicPassphrase,proto3" json:"public_passphrase,omitempty"`
	PrivatePassphrase []byte `protobuf:"bytes,2,opt,name=private_passphrase,json=privatePassphrase,proto3" json:"private_passphrase,omitempty"`
	Seed              []byte `protobuf:"bytes,3,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (m *CreateWalletRequest) Reset()                    { *m = CreateWalletRequest{} }
func (m *CreateWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateWalletRequest) ProtoMessage()               {}
func (*CreateWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *CreateWalletRequest) GetPublicPassphrase() []byte {
	if m != nil {
		return m.PublicPassphrase
	}
	return nil
}

func (m *CreateWalletRequest) GetPrivatePassphrase() []byte {
	if m != nil {
		return m.PrivatePassphrase
	}
	return nil
}

func (m *CreateWalletRequest) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

type CreateWalletResponse struct {
}

func (m *CreateWalletResponse) Reset()                    { *m = CreateWalletResponse{} }
func (m *CreateWalletResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateWalletResponse) ProtoMessage()               {}
func (*CreateWalletResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

type OpenWalletRequest struct {
	PublicPassphrase []byte `protobuf:"bytes,1,opt,name=public_passphrase,json=publicPassphrase,proto3" json:"public_passphrase,omitempty"`
}

func (m *OpenWalletRequest) Reset()                    { *m = OpenWalletRequest{} }
func (m *OpenWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenWalletRequest) ProtoMessage()               {}
func (*OpenWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *OpenWalletRequest) GetPublicPassphrase() []byte {
	if m != nil {
		return m.PublicPassphrase
	}
	return nil
}

type OpenWalletResponse struct {
}

func (m *OpenWalletResponse) Reset()                    { *m = OpenWalletResponse{} }
func (m *OpenWalletResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenWalletResponse) ProtoMessage()               {}
func (*OpenWalletResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

type CloseWalletRequest struct {
}

func (m *CloseWalletRequest) Reset()                    { *m = CloseWalletRequest{} }
func (m *CloseWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseWalletRequest) ProtoMessage()               {}
func (*CloseWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

type CloseWalletResponse struct {
}

func (m *CloseWalletResponse) Reset()                    { *m = CloseWalletResponse{} }
func (m *CloseWalletResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseWalletResponse) ProtoMessage()               {}
func (*CloseWalletResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

type WalletExistsRequest struct {
}

func (m *WalletExistsRequest) Reset()                    { *m = WalletExistsRequest{} }
func (m *WalletExistsRequest) String() string            { return proto.CompactTextString(m) }
func (*WalletExistsRequest) ProtoMessage()               {}
func (*WalletExistsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

type WalletExistsResponse struct {
	Exists bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
}

func (m *WalletExistsResponse) Reset()                    { *m = WalletExistsResponse{} }
func (m *WalletExistsResponse) String() string            { return proto.CompactTextString(m) }
func (*WalletExistsResponse) ProtoMessage()               {}
func (*WalletExistsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *WalletExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type StartConsensusRpcRequest struct {
	NetworkAddress string `protobuf:"bytes,1,opt,name=network_address,json=networkAddress" json:"network_address,omitempty"`
	Username       string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password       []byte `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Certificate    []byte `protobuf:"bytes,4,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (m *StartConsensusRpcRequest) Reset()                    { *m = StartConsensusRpcRequest{} }
func (m *StartConsensusRpcRequest) String() string            { return proto.CompactTextString(m) }
func (*StartConsensusRpcRequest) ProtoMessage()               {}
func (*StartConsensusRpcRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *StartConsensusRpcRequest) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *StartConsensusRpcRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *StartConsensusRpcRequest) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *StartConsensusRpcRequest) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type StartConsensusRpcResponse struct {
}

func (m *StartConsensusRpcResponse) Reset()                    { *m = StartConsensusRpcResponse{} }
func (m *StartConsensusRpcResponse) String() string            { return proto.CompactTextString(m) }
func (*StartConsensusRpcResponse) ProtoMessage()               {}
func (*StartConsensusRpcResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

type DiscoverAddressesRequest struct {
	DiscoverAccounts  bool   `protobuf:"varint,1,opt,name=discover_accounts,json=discoverAccounts" json:"discover_accounts,omitempty"`
	PrivatePassphrase []byte `protobuf:"bytes,2,opt,name=private_passphrase,json=privatePassphrase,proto3" json:"private_passphrase,omitempty"`
}

func (m *DiscoverAddressesRequest) Reset()                    { *m = DiscoverAddressesRequest{} }
func (m *DiscoverAddressesRequest) String() string            { return proto.CompactTextString(m) }
func (*DiscoverAddressesRequest) ProtoMessage()               {}
func (*DiscoverAddressesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *DiscoverAddressesRequest) GetDiscoverAccounts() bool {
	if m != nil {
		return m.DiscoverAccounts
	}
	return false
}

func (m *DiscoverAddressesRequest) GetPrivatePassphrase() []byte {
	if m != nil {
		return m.PrivatePassphrase
	}
	return nil
}

type DiscoverAddressesResponse struct {
}

func (m *DiscoverAddressesResponse) Reset()                    { *m = DiscoverAddressesResponse{} }
func (m *DiscoverAddressesResponse) String() string            { return proto.CompactTextString(m) }
func (*DiscoverAddressesResponse) ProtoMessage()               {}
func (*DiscoverAddressesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

type SubscribeToBlockNotificationsRequest struct {
}

func (m *SubscribeToBlockNotificationsRequest) Reset()         { *m = SubscribeToBlockNotificationsRequest{} }
func (m *SubscribeToBlockNotificationsRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeToBlockNotificationsRequest) ProtoMessage()    {}
func (*SubscribeToBlockNotificationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{65}
}

type SubscribeToBlockNotificationsResponse struct {
}

func (m *SubscribeToBlockNotificationsResponse) Reset()         { *m = SubscribeToBlockNotificationsResponse{} }
func (m *SubscribeToBlockNotificationsResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeToBlockNotificationsResponse) ProtoMessage()    {}
func (*SubscribeToBlockNotificationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{66}
}

type FetchHeadersRequest struct {
}

func (m *FetchHeadersRequest) Reset()                    { *m = FetchHeadersRequest{} }
func (m *FetchHeadersRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchHeadersRequest) ProtoMessage()               {}
func (*FetchHeadersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

type FetchHeadersResponse struct {
	FetchedHeadersCount     uint32 `protobuf:"varint,1,opt,name=fetched_headers_count,json=fetchedHeadersCount" json:"fetched_headers_count,omitempty"`
	FirstNewBlockHash       []byte `protobuf:"bytes,2,opt,name=first_new_block_hash,json=firstNewBlockHash,proto3" json:"first_new_block_hash,omitempty"`
	FirstNewBlockHeight     int32  `protobuf:"varint,3,opt,name=first_new_block_height,json=firstNewBlockHeight" json:"first_new_block_height,omitempty"`
	MainChainTipBlockHash   []byte `protobuf:"bytes,4,opt,name=main_chain_tip_block_hash,json=mainChainTipBlockHash,proto3" json:"main_chain_tip_block_hash,omitempty"`
	MainChainTipBlockHeight int32  `protobuf:"varint,5,opt,name=main_chain_tip_block_height,json=mainChainTipBlockHeight" json:"main_chain_tip_block_height,omitempty"`
}

func (m *FetchHeadersResponse) Reset()                    { *m = FetchHeadersResponse{} }
func (m *FetchHeadersResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchHeadersResponse) ProtoMessage()               {}
func (*FetchHeadersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *FetchHeadersResponse) GetFetchedHeadersCount() uint32 {
	if m != nil {
		return m.FetchedHeadersCount
	}
	return 0
}

func (m *FetchHeadersResponse) GetFirstNewBlockHash() []byte {
	if m != nil {
		return m.FirstNewBlockHash
	}
	return nil
}

func (m *FetchHeadersResponse) GetFirstNewBlockHeight() int32 {
	if m != nil {
		return m.FirstNewBlockHeight
	}
	return 0
}

func (m *FetchHeadersResponse) GetMainChainTipBlockHash() []byte {
	if m != nil {
		return m.MainChainTipBlockHash
	}
	return nil
}

func (m *FetchHeadersResponse) GetMainChainTipBlockHeight() int32 {
	if m != nil {
		return m.MainChainTipBlockHeight
	}
	return 0
}

type GenerateRandomSeedRequest struct {
	SeedLength uint32 `protobuf:"varint,1,opt,name=seed_length,json=seedLength" json:"seed_length,omitempty"`
}

func (m *GenerateRandomSeedRequest) Reset()                    { *m = GenerateRandomSeedRequest{} }
func (m *GenerateRandomSeedRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateRandomSeedRequest) ProtoMessage()               {}
func (*GenerateRandomSeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *GenerateRandomSeedRequest) GetSeedLength() uint32 {
	if m != nil {
		return m.SeedLength
	}
	return 0
}

type GenerateRandomSeedResponse struct {
	SeedBytes    []byte `protobuf:"bytes,1,opt,name=seed_bytes,json=seedBytes,proto3" json:"seed_bytes,omitempty"`
	SeedHex      string `protobuf:"bytes,2,opt,name=seed_hex,json=seedHex" json:"seed_hex,omitempty"`
	SeedMnemonic string `protobuf:"bytes,3,opt,name=seed_mnemonic,json=seedMnemonic" json:"seed_mnemonic,omitempty"`
}

func (m *GenerateRandomSeedResponse) Reset()                    { *m = GenerateRandomSeedResponse{} }
func (m *GenerateRandomSeedResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateRandomSeedResponse) ProtoMessage()               {}
func (*GenerateRandomSeedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *GenerateRandomSeedResponse) GetSeedBytes() []byte {
	if m != nil {
		return m.SeedBytes
	}
	return nil
}

func (m *GenerateRandomSeedResponse) GetSeedHex() string {
	if m != nil {
		return m.SeedHex
	}
	return ""
}

func (m *GenerateRandomSeedResponse) GetSeedMnemonic() string {
	if m != nil {
		return m.SeedMnemonic
	}
	return ""
}

type DecodeSeedRequest struct {
	UserInput string `protobuf:"bytes,1,opt,name=user_input,json=userInput" json:"user_input,omitempty"`
}

func (m *DecodeSeedRequest) Reset()                    { *m = DecodeSeedRequest{} }
func (m *DecodeSeedRequest) String() string            { return proto.CompactTextString(m) }
func (*DecodeSeedRequest) ProtoMessage()               {}
func (*DecodeSeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *DecodeSeedRequest) GetUserInput() string {
	if m != nil {
		return m.UserInput
	}
	return ""
}

type DecodeSeedResponse struct {
	DecodedSeed []byte `protobuf:"bytes,1,opt,name=decoded_seed,json=decodedSeed,proto3" json:"decoded_seed,omitempty"`
}

func (m *DecodeSeedResponse) Reset()                    { *m = DecodeSeedResponse{} }
func (m *DecodeSeedResponse) String() string            { return proto.CompactTextString(m) }
func (*DecodeSeedResponse) ProtoMessage()               {}
func (*DecodeSeedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *DecodeSeedResponse) GetDecodedSeed() []byte {
	if m != nil {
		return m.DecodedSeed
	}
	return nil
}

type StartTicketPurchaseRequest struct {
}

func (m *StartTicketPurchaseRequest) Reset()                    { *m = StartTicketPurchaseRequest{} }
func (m *StartTicketPurchaseRequest) String() string            { return proto.CompactTextString(m) }
func (*StartTicketPurchaseRequest) ProtoMessage()               {}
func (*StartTicketPurchaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

type StartTicketPurchaseResponse struct {
}

func (m *StartTicketPurchaseResponse) Reset()                    { *m = StartTicketPurchaseResponse{} }
func (m *StartTicketPurchaseResponse) String() string            { return proto.CompactTextString(m) }
func (*StartTicketPurchaseResponse) ProtoMessage()               {}
func (*StartTicketPurchaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

type StopTicketPurchaseRequest struct {
}

func (m *StopTicketPurchaseRequest) Reset()                    { *m = StopTicketPurchaseRequest{} }
func (m *StopTicketPurchaseRequest) String() string            { return proto.CompactTextString(m) }
func (*StopTicketPurchaseRequest) ProtoMessage()               {}
func (*StopTicketPurchaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

type StopTicketPurchaseResponse struct {
}

func (m *StopTicketPurchaseResponse) Reset()                    { *m = StopTicketPurchaseResponse{} }
func (m *StopTicketPurchaseResponse) String() string            { return proto.CompactTextString(m) }
func (*StopTicketPurchaseResponse) ProtoMessage()               {}
func (*StopTicketPurchaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

type TicketBuyerConfigRequest struct {
}

func (m *TicketBuyerConfigRequest) Reset()                    { *m = TicketBuyerConfigRequest{} }
func (m *TicketBuyerConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*TicketBuyerConfigRequest) ProtoMessage()               {}
func (*TicketBuyerConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

type TicketBuyerConfigResponse struct {
	AccountName           string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	AvgPriceMode          string `protobuf:"bytes,2,opt,name=avg_price_mode,json=avgPriceMode" json:"avg_price_mode,omitempty"`
	AvgPriceVWAPDelta     int64  `protobuf:"varint,3,opt,name=avg_priceVWAP_delta,json=avgPriceVWAPDelta" json:"avg_priceVWAP_delta,omitempty"`
	BalanceToMaintain     int64  `protobuf:"varint,4,opt,name=balance_to_maintain,json=balanceToMaintain" json:"balance_to_maintain,omitempty"`
	BlocksToAvg           int64  `protobuf:"varint,5,opt,name=blocks_to_avg,json=blocksToAvg" json:"blocks_to_avg,omitempty"`
	DontWaitForTickets    bool   `protobuf:"varint,6,opt,name=dont_wait_for_tickets,json=dontWaitForTickets" json:"dont_wait_for_tickets,omitempty"`
	ExpiryDelta           int64  `protobuf:"varint,7,opt,name=expiry_delta,json=expiryDelta" json:"expiry_delta,omitempty"`
	FeeSource             string `protobuf:"bytes,8,opt,name=fee_source,json=feeSource" json:"fee_source,omitempty"`
	FeeTargetScaling      int64  `protobuf:"varint,9,opt,name=fee_target_scaling,json=feeTargetScaling" json:"fee_target_scaling,omitempty"`
	MinFee                int64  `protobuf:"varint,10,opt,name=min_fee,json=minFee" json:"min_fee,omitempty"`
	MinPriceScale         int64  `protobuf:"varint,11,opt,name=min_price_scale,json=minPriceScale" json:"min_price_scale,omitempty"`
	MaxFee                int64  `protobuf:"varint,12,opt,name=max_fee,json=maxFee" json:"max_fee,omitempty"`
	MaxPerBlock           int64  `protobuf:"varint,13,opt,name=max_per_block,json=maxPerBlock" json:"max_per_block,omitempty"`
	MaxPriceAbsolute      int64  `protobuf:"varint,14,opt,name=max_price_absolute,json=maxPriceAbsolute" json:"max_price_absolute,omitempty"`
	MaxPriceRelative      int64  `protobuf:"varint,15,opt,name=max_price_relative,json=maxPriceRelative" json:"max_price_relative,omitempty"`
	MaxPriceScale         int64  `protobuf:"varint,16,opt,name=max_price_scale,json=maxPriceScale" json:"max_price_scale,omitempty"`
	MaxInMempool          int64  `protobuf:"varint,17,opt,name=max_in_mempool,json=maxInMempool" json:"max_in_mempool,omitempty"`
	PoolAddress           string `protobuf:"bytes,18,opt,name=pool_address,json=poolAddress" json:"pool_address,omitempty"`
	PoolFees              int64  `protobuf:"varint,19,opt,name=pool_fees,json=poolFees" json:"pool_fees,omitempty"`
	SpreadTicketPurchases bool   `protobuf:"varint,20,opt,name=spread_ticket_purchases,json=spreadTicketPurchases" json:"spread_ticket_purchases,omitempty"`
	TicketAddress         string `protobuf:"bytes,21,opt,name=ticket_address,json=ticketAddress" json:"ticket_address,omitempty"`
	TxFee                 int64  `protobuf:"varint,22,opt,name=tx_fee,json=txFee" json:"tx_fee,omitempty"`
}

func (m *TicketBuyerConfigResponse) Reset()                    { *m = TicketBuyerConfigResponse{} }
func (m *TicketBuyerConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*TicketBuyerConfigResponse) ProtoMessage()               {}
func (*TicketBuyerConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *TicketBuyerConfigResponse) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *TicketBuyerConfigResponse) GetAvgPriceMode() string {
	if m != nil {
		return m.AvgPriceMode
	}
	return ""
}

func (m *TicketBuyerConfigResponse) GetAvgPriceVWAPDelta() int64 {
	if m != nil {
		return m.AvgPriceVWAPDelta
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetBalanceToMaintain() int64 {
	if m != nil {
		return m.BalanceToMaintain
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetBlocksToAvg() int64 {
	if m != nil {
		return m.BlocksToAvg
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetDontWaitForTickets() bool {
	if m != nil {
		return m.DontWaitForTickets
	}
	return false
}

func (m *TicketBuyerConfigResponse) GetExpiryDelta() int64 {
	if m != nil {
		return m.ExpiryDelta
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetFeeSource() string {
	if m != nil {
		return m.FeeSource
	}
	return ""
}

func (m *TicketBuyerConfigResponse) GetFeeTargetScaling() int64 {
	if m != nil {
		return m.FeeTargetScaling
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMinFee() int64 {
	if m != nil {
		return m.MinFee
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMinPriceScale() int64 {
	if m != nil {
		return m.MinPriceScale
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMaxFee() int64 {
	if m != nil {
		return m.MaxFee
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMaxPerBlock() int64 {
	if m != nil {
		return m.MaxPerBlock
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMaxPriceAbsolute() int64 {
	if m != nil {
		return m.MaxPriceAbsolute
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMaxPriceRelative() int64 {
	if m != nil {
		return m.MaxPriceRelative
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMaxPriceScale() int64 {
	if m != nil {
		return m.MaxPriceScale
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMaxInMempool() int64 {
	if m != nil {
		return m.MaxInMempool
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *TicketBuyerConfigResponse) GetPoolFees() int64 {
	if m != nil {
		return m.PoolFees
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetSpreadTicketPurchases() bool {
	if m != nil {
		return m.SpreadTicketPurchases
	}
	return false
}

func (m *TicketBuyerConfigResponse) GetTicketAddress() string {
	if m != nil {
		return m.TicketAddress
	}
	return ""
}

func (m *TicketBuyerConfigResponse) GetTxFee() int64 {
	if m != nil {
		return m.TxFee
	}
	return 0
}

type SetAccountNameRequest struct {
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
}

func (m *SetAccountNameRequest) Reset()                    { *m = SetAccountNameRequest{} }
func (m *SetAccountNameRequest) String() string            { return proto.CompactTextString(m) }
func (*SetAccountNameRequest) ProtoMessage()               {}
func (*SetAccountNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *SetAccountNameRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

type SetAccountNameResponse struct {
}

func (m *SetAccountNameResponse) Reset()                    { *m = SetAccountNameResponse{} }
func (m *SetAccountNameResponse) String() string            { return proto.CompactTextString(m) }
func (*SetAccountNameResponse) ProtoMessage()               {}
func (*SetAccountNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

type SetAvgPriceModeRequest struct {
	AvgPriceMode string `protobuf:"bytes,1,opt,name=avg_price_mode,json=avgPriceMode" json:"avg_price_mode,omitempty"`
}

func (m *SetAvgPriceModeRequest) Reset()                    { *m = SetAvgPriceModeRequest{} }
func (m *SetAvgPriceModeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetAvgPriceModeRequest) ProtoMessage()               {}
func (*SetAvgPriceModeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *SetAvgPriceModeRequest) GetAvgPriceMode() string {
	if m != nil {
		return m.AvgPriceMode
	}
	return ""
}

type SetAvgPriceModeResponse struct {
}

func (m *SetAvgPriceModeResponse) Reset()                    { *m = SetAvgPriceModeResponse{} }
func (m *SetAvgPriceModeResponse) String() string            { return proto.CompactTextString(m) }
func (*SetAvgPriceModeResponse) ProtoMessage()               {}
func (*SetAvgPriceModeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

type SetAvgPriceVWAPDeltaRequest struct {
	AvgPriceVWAPDelta int64 `protobuf:"varint,1,opt,name=avg_priceVWAP_delta,json=avgPriceVWAPDelta" json:"avg_priceVWAP_delta,omitempty"`
}

func (m *SetAvgPriceVWAPDeltaRequest) Reset()                    { *m = SetAvgPriceVWAPDeltaRequest{} }
func (m *SetAvgPriceVWAPDeltaRequest) String() string            { return proto.CompactTextString(m) }
func (*SetAvgPriceVWAPDeltaRequest) ProtoMessage()               {}
func (*SetAvgPriceVWAPDeltaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *SetAvgPriceVWAPDeltaRequest) GetAvgPriceVWAPDelta() int64 {
	if m != nil {
		return m.AvgPriceVWAPDelta
	}
	return 0
}

type SetAvgPriceVWAPDeltaResponse struct {
}

func (m *SetAvgPriceVWAPDeltaResponse) Reset()                    { *m = SetAvgPriceVWAPDeltaResponse{} }
func (m *SetAvgPriceVWAPDeltaResponse) String() string            { return proto.CompactTextString(m) }
func (*SetAvgPriceVWAPDeltaResponse) ProtoMessage()               {}
func (*SetAvgPriceVWAPDeltaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

type SetBalanceToMaintainRequest struct {
	BalanceToMaintain int64 `protobuf:"varint,1,opt,name=balance_to_maintain,json=balanceToMaintain" json:"balance_to_maintain,omitempty"`
}

func (m *SetBalanceToMaintainRequest) Reset()                    { *m = SetBalanceToMaintainRequest{} }
func (m *SetBalanceToMaintainRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBalanceToMaintainRequest) ProtoMessage()               {}
func (*SetBalanceToMaintainRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *SetBalanceToMaintainRequest) GetBalanceToMaintain() int64 {
	if m != nil {
		return m.BalanceToMaintain
	}
	return 0
}

type SetBalanceToMaintainResponse struct {
}

func (m *SetBalanceToMaintainResponse) Reset()                    { *m = SetBalanceToMaintainResponse{} }
func (m *SetBalanceToMaintainResponse) String() string            { return proto.CompactTextString(m) }
func (*SetBalanceToMaintainResponse) ProtoMessage()               {}
func (*SetBalanceToMaintainResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

type SetBlocksToAverageRequest struct {
	BlocksToAverage int64 `protobuf:"varint,1,opt,name=blocks_to_average,json=blocksToAverage" json:"blocks_to_average,omitempty"`
}

func (m *SetBlocksToAverageRequest) Reset()                    { *m = SetBlocksToAverageRequest{} }
func (m *SetBlocksToAverageRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBlocksToAverageRequest) ProtoMessage()               {}
func (*SetBlocksToAverageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *SetBlocksToAverageRequest) GetBlocksToAverage() int64 {
	if m != nil {
		return m.BlocksToAverage
	}
	return 0
}

type SetBlocksToAverageResponse struct {
}

func (m *SetBlocksToAverageResponse) Reset()                    { *m = SetBlocksToAverageResponse{} }
func (m *SetBlocksToAverageResponse) String() string            { return proto.CompactTextString(m) }
func (*SetBlocksToAverageResponse) ProtoMessage()               {}
func (*SetBlocksToAverageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

type SetDontWaitForTicketsRequest struct {
	DontWaitForTickets bool `protobuf:"varint,1,opt,name=dont_wait_for_tickets,json=dontWaitForTickets" json:"dont_wait_for_tickets,omitempty"`
}

func (m *SetDontWaitForTicketsRequest) Reset()                    { *m = SetDontWaitForTicketsRequest{} }
func (m *SetDontWaitForTicketsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDontWaitForTicketsRequest) ProtoMessage()               {}
func (*SetDontWaitForTicketsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *SetDontWaitForTicketsRequest) GetDontWaitForTickets() bool {
	if m != nil {
		return m.DontWaitForTickets
	}
	return false
}

type SetDontWaitForTicketsResponse struct {
}

func (m *SetDontWaitForTicketsResponse) Reset()                    { *m = SetDontWaitForTicketsResponse{} }
func (m *SetDontWaitForTicketsResponse) String() string            { return proto.CompactTextString(m) }
func (*SetDontWaitForTicketsResponse) ProtoMessage()               {}
func (*SetDontWaitForTicketsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

type SetExpiryDeltaRequest struct {
	ExpiryDelta int64 `protobuf:"varint,1,opt,name=expiry_delta,json=expiryDelta" json:"expiry_delta,omitempty"`
}

func (m *SetExpiryDeltaRequest) Reset()                    { *m = SetExpiryDeltaRequest{} }
func (m *SetExpiryDeltaRequest) String() string            { return proto.CompactTextString(m) }
func (*SetExpiryDeltaRequest) ProtoMessage()               {}
func (*SetExpiryDeltaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *SetExpiryDeltaRequest) GetExpiryDelta() int64 {
	if m != nil {
		return m.ExpiryDelta
	}
	return 0
}

type SetExpiryDeltaResponse struct {
}

func (m *SetExpiryDeltaResponse) Reset()                    { *m = SetExpiryDeltaResponse{} }
func (m *SetExpiryDeltaResponse) String() string            { return proto.CompactTextString(m) }
func (*SetExpiryDeltaResponse) ProtoMessage()               {}
func (*SetExpiryDeltaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

type SetFeeSourceRequest struct {
	FeeSource string `protobuf:"bytes,1,opt,name=fee_source,json=feeSource" json:"fee_source,omitempty"`
}

func (m *SetFeeSourceRequest) Reset()                    { *m = SetFeeSourceRequest{} }
func (m *SetFeeSourceRequest) String() string            { return proto.CompactTextString(m) }
func (*SetFeeSourceRequest) ProtoMessage()               {}
func (*SetFeeSourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *SetFeeSourceRequest) GetFeeSource() string {
	if m != nil {
		return m.FeeSource
	}
	return ""
}

type SetFeeSourceResponse struct {
}

func (m *SetFeeSourceResponse) Reset()                    { *m = SetFeeSourceResponse{} }
func (m *SetFeeSourceResponse) String() string            { return proto.CompactTextString(m) }
func (*SetFeeSourceResponse) ProtoMessage()               {}
func (*SetFeeSourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

type SetFeeTargetScalingRequest struct {
	FeeTargetScaling int64 `protobuf:"varint,1,opt,name=fee_target_scaling,json=feeTargetScaling" json:"fee_target_scaling,omitempty"`
}

func (m *SetFeeTargetScalingRequest) Reset()                    { *m = SetFeeTargetScalingRequest{} }
func (m *SetFeeTargetScalingRequest) String() string            { return proto.CompactTextString(m) }
func (*SetFeeTargetScalingRequest) ProtoMessage()               {}
func (*SetFeeTargetScalingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *SetFeeTargetScalingRequest) GetFeeTargetScaling() int64 {
	if m != nil {
		return m.FeeTargetScaling
	}
	return 0
}

type SetFeeTargetScalingResponse struct {
}

func (m *SetFeeTargetScalingResponse) Reset()                    { *m = SetFeeTargetScalingResponse{} }
func (m *SetFeeTargetScalingResponse) String() string            { return proto.CompactTextString(m) }
func (*SetFeeTargetScalingResponse) ProtoMessage()               {}
func (*SetFeeTargetScalingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

type SetMinFeeRequest struct {
	MinFee int64 `protobuf:"varint,1,opt,name=min_fee,json=minFee" json:"min_fee,omitempty"`
}

func (m *SetMinFeeRequest) Reset()                    { *m = SetMinFeeRequest{} }
func (m *SetMinFeeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMinFeeRequest) ProtoMessage()               {}
func (*SetMinFeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *SetMinFeeRequest) GetMinFee() int64 {
	if m != nil {
		return m.MinFee
	}
	return 0
}

type SetMinFeeResponse struct {
}

func (m *SetMinFeeResponse) Reset()                    { *m = SetMinFeeResponse{} }
func (m *SetMinFeeResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMinFeeResponse) ProtoMessage()               {}
func (*SetMinFeeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

type SetMinPriceScaleRequest struct {
	MinPriceScale int64 `protobuf:"varint,1,opt,name=min_price_scale,json=minPriceScale" json:"min_price_scale,omitempty"`
}

func (m *SetMinPriceScaleRequest) Reset()                    { *m = SetMinPriceScaleRequest{} }
func (m *SetMinPriceScaleRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMinPriceScaleRequest) ProtoMessage()               {}
func (*SetMinPriceScaleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *SetMinPriceScaleRequest) GetMinPriceScale() int64 {
	if m != nil {
		return m.MinPriceScale
	}
	return 0
}

type SetMinPriceScaleResponse struct {
}

func (m *SetMinPriceScaleResponse) Reset()                    { *m = SetMinPriceScaleResponse{} }
func (m *SetMinPriceScaleResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMinPriceScaleResponse) ProtoMessage()               {}
func (*SetMinPriceScaleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

type SetMaxFeeRequest struct {
	MaxFee int64 `protobuf:"varint,1,opt,name=max_fee,json=maxFee" json:"max_fee,omitempty"`
}

func (m *SetMaxFeeRequest) Reset()                    { *m = SetMaxFeeRequest{} }
func (m *SetMaxFeeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMaxFeeRequest) ProtoMessage()               {}
func (*SetMaxFeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *SetMaxFeeRequest) GetMaxFee() int64 {
	if m != nil {
		return m.MaxFee
	}
	return 0
}

type SetMaxFeeResponse struct {
}

func (m *SetMaxFeeResponse) Reset()                    { *m = SetMaxFeeResponse{} }
func (m *SetMaxFeeResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMaxFeeResponse) ProtoMessage()               {}
func (*SetMaxFeeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

type SetMaxPerBlockRequest struct {
	MaxPerBlock int64 `protobuf:"varint,1,opt,name=max_per_block,json=maxPerBlock" json:"max_per_block,omitempty"`
}

func (m *SetMaxPerBlockRequest) Reset()                    { *m = SetMaxPerBlockRequest{} }
func (m *SetMaxPerBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPerBlockRequest) ProtoMessage()               {}
func (*SetMaxPerBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *SetMaxPerBlockRequest) GetMaxPerBlock() int64 {
	if m != nil {
		return m.MaxPerBlock
	}
	return 0
}

type SetMaxPerBlockResponse struct {
}

func (m *SetMaxPerBlockResponse) Reset()                    { *m = SetMaxPerBlockResponse{} }
func (m *SetMaxPerBlockResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPerBlockResponse) ProtoMessage()               {}
func (*SetMaxPerBlockResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

type SetMaxPriceAbsoluteRequest struct {
	MaxPriceAbsolute int64 `protobuf:"varint,1,opt,name=max_price_absolute,json=maxPriceAbsolute" json:"max_price_absolute,omitempty"`
}

func (m *SetMaxPriceAbsoluteRequest) Reset()                    { *m = SetMaxPriceAbsoluteRequest{} }
func (m *SetMaxPriceAbsoluteRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPriceAbsoluteRequest) ProtoMessage()               {}
func (*SetMaxPriceAbsoluteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *SetMaxPriceAbsoluteRequest) GetMaxPriceAbsolute() int64 {
	if m != nil {
		return m.MaxPriceAbsolute
	}
	return 0
}

type SetMaxPriceAbsoluteResponse struct {
}

func (m *SetMaxPriceAbsoluteResponse) Reset()                    { *m = SetMaxPriceAbsoluteResponse{} }
func (m *SetMaxPriceAbsoluteResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPriceAbsoluteResponse) ProtoMessage()               {}
func (*SetMaxPriceAbsoluteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

type SetMaxPriceRelativeRequest struct {
	MaxPriceRelative int64 `protobuf:"varint,1,opt,name=max_price_relative,json=maxPriceRelative" json:"max_price_relative,omitempty"`
}

func (m *SetMaxPriceRelativeRequest) Reset()                    { *m = SetMaxPriceRelativeRequest{} }
func (m *SetMaxPriceRelativeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPriceRelativeRequest) ProtoMessage()               {}
func (*SetMaxPriceRelativeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *SetMaxPriceRelativeRequest) GetMaxPriceRelative() int64 {
	if m != nil {
		return m.MaxPriceRelative
	}
	return 0
}

type SetMaxPriceRelativeResponse struct {
}

func (m *SetMaxPriceRelativeResponse) Reset()                    { *m = SetMaxPriceRelativeResponse{} }
func (m *SetMaxPriceRelativeResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPriceRelativeResponse) ProtoMessage()               {}
func (*SetMaxPriceRelativeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

type SetMaxPriceScaleRequest struct {
	MaxPriceScale int64 `protobuf:"varint,1,opt,name=max_price_scale,json=maxPriceScale" json:"max_price_scale,omitempty"`
}

func (m *SetMaxPriceScaleRequest) Reset()                    { *m = SetMaxPriceScaleRequest{} }
func (m *SetMaxPriceScaleRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPriceScaleRequest) ProtoMessage()               {}
func (*SetMaxPriceScaleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *SetMaxPriceScaleRequest) GetMaxPriceScale() int64 {
	if m != nil {
		return m.MaxPriceScale
	}
	return 0
}

type SetMaxPriceScaleResponse struct {
}

func (m *SetMaxPriceScaleResponse) Reset()                    { *m = SetMaxPriceScaleResponse{} }
func (m *SetMaxPriceScaleResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPriceScaleResponse) ProtoMessage()               {}
func (*SetMaxPriceScaleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{110} }

type SetMaxInMempoolRequest struct {
	MaxInMempool int64 `protobuf:"varint,1,opt,name=max_in_mempool,json=maxInMempool" json:"max_in_mempool,omitempty"`
}

func (m *SetMaxInMempoolRequest) Reset()                    { *m = SetMaxInMempoolRequest{} }
func (m *SetMaxInMempoolRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMaxInMempoolRequest) ProtoMessage()               {}
func (*SetMaxInMempoolRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{111} }

func (m *SetMaxInMempoolRequest) GetMaxInMempool() int64 {
	if m != nil {
		return m.MaxInMempool
	}
	return 0
}

type SetMaxInMempoolResponse struct {
}

func (m *SetMaxInMempoolResponse) Reset()                    { *m = SetMaxInMempoolResponse{} }
func (m *SetMaxInMempoolResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMaxInMempoolResponse) ProtoMessage()               {}
func (*SetMaxInMempoolResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

type SetPoolAddressRequest struct {
	PoolAddress string `protobuf:"bytes,1,opt,name=pool_address,json=poolAddress" json:"pool_address,omitempty"`
}

func (m *SetPoolAddressRequest) Reset()                    { *m = SetPoolAddressRequest{} }
func (m *SetPoolAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPoolAddressRequest) ProtoMessage()               {}
func (*SetPoolAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

func (m *SetPoolAddressRequest) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

type SetPoolAddressResponse struct {
}

func (m *SetPoolAddressResponse) Reset()                    { *m = SetPoolAddressResponse{} }
func (m *SetPoolAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*SetPoolAddressResponse) ProtoMessage()               {}
func (*SetPoolAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

type SetPoolFeesRequest struct {
	PoolFees int64 `protobuf:"varint,1,opt,name=pool_fees,json=poolFees" json:"pool_fees,omitempty"`
}

func (m *SetPoolFeesRequest) Reset()                    { *m = SetPoolFeesRequest{} }
func (m *SetPoolFeesRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPoolFeesRequest) ProtoMessage()               {}
func (*SetPoolFeesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{115} }

func (m *SetPoolFeesRequest) GetPoolFees() int64 {
	if m != nil {
		return m.PoolFees
	}
	return 0
}

type SetPoolFeesResponse struct {
}

func (m *SetPoolFeesResponse) Reset()                    { *m = SetPoolFeesResponse{} }
func (m *SetPoolFeesResponse) String() string            { return proto.CompactTextString(m) }
func (*SetPoolFeesResponse) ProtoMessage()               {}
func (*SetPoolFeesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

type SetSpreadTicketPurchasesRequest struct {
	SpreadTicketPurchases bool `protobuf:"varint,1,opt,name=spread_ticket_purchases,json=spreadTicketPurchases" json:"spread_ticket_purchases,omitempty"`
}

func (m *SetSpreadTicketPurchasesRequest) Reset()         { *m = SetSpreadTicketPurchasesRequest{} }
func (m *SetSpreadTicketPurchasesRequest) String() string { return proto.CompactTextString(m) }
func (*SetSpreadTicketPurchasesRequest) ProtoMessage()    {}
func (*SetSpreadTicketPurchasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{117}
}

func (m *SetSpreadTicketPurchasesRequest) GetSpreadTicketPurchases() bool {
	if m != nil {
		return m.SpreadTicketPurchases
	}
	return false
}

type SetSpreadTicketPurchasesResponse struct {
}

func (m *SetSpreadTicketPurchasesResponse) Reset()         { *m = SetSpreadTicketPurchasesResponse{} }
func (m *SetSpreadTicketPurchasesResponse) String() string { return proto.CompactTextString(m) }
func (*SetSpreadTicketPurchasesResponse) ProtoMessage()    {}
func (*SetSpreadTicketPurchasesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{118}
}

type SetTicketAddressRequest struct {
	TicketAddress string `protobuf:"bytes,1,opt,name=ticket_address,json=ticketAddress" json:"ticket_address,omitempty"`
}

func (m *SetTicketAddressRequest) Reset()                    { *m = SetTicketAddressRequest{} }
func (m *SetTicketAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTicketAddressRequest) ProtoMessage()               {}
func (*SetTicketAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{119} }

func (m *SetTicketAddressRequest) GetTicketAddress() string {
	if m != nil {
		return m.TicketAddress
	}
	return ""
}

type SetTicketAddressResponse struct {
}

func (m *SetTicketAddressResponse) Reset()                    { *m = SetTicketAddressResponse{} }
func (m *SetTicketAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*SetTicketAddressResponse) ProtoMessage()               {}
func (*SetTicketAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{120} }

type SetTxFeeRequest struct {
	TxFee int64 `protobuf:"varint,1,opt,name=tx_fee,json=txFee" json:"tx_fee,omitempty"`
}

func (m *SetTxFeeRequest) Reset()                    { *m = SetTxFeeRequest{} }
func (m *SetTxFeeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTxFeeRequest) ProtoMessage()               {}
func (*SetTxFeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{121} }

func (m *SetTxFeeRequest) GetTxFee() int64 {
	if m != nil {
		return m.TxFee
	}
	return 0
}

type SetTxFeeResponse struct {
}

func (m *SetTxFeeResponse) Reset()                    { *m = SetTxFeeResponse{} }
func (m *SetTxFeeResponse) String() string            { return proto.CompactTextString(m) }
func (*SetTxFeeResponse) ProtoMessage()               {}
func (*SetTxFeeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{122} }

func init() {
	proto.RegisterType((*VersionRequest)(nil), "walletrpc.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "walletrpc.VersionResponse")
	proto.RegisterType((*TransactionDetails)(nil), "walletrpc.TransactionDetails")
	proto.RegisterType((*TransactionDetails_Input)(nil), "walletrpc.TransactionDetails.Input")
	proto.RegisterType((*TransactionDetails_Output)(nil), "walletrpc.TransactionDetails.Output")
	proto.RegisterType((*BlockDetails)(nil), "walletrpc.BlockDetails")
	proto.RegisterType((*AccountBalance)(nil), "walletrpc.AccountBalance")
	proto.RegisterType((*PingRequest)(nil), "walletrpc.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "walletrpc.PingResponse")
	proto.RegisterType((*NetworkRequest)(nil), "walletrpc.NetworkRequest")
	proto.RegisterType((*NetworkResponse)(nil), "walletrpc.NetworkResponse")
	proto.RegisterType((*AccountNumberRequest)(nil), "walletrpc.AccountNumberRequest")
	proto.RegisterType((*AccountNumberResponse)(nil), "walletrpc.AccountNumberResponse")
	proto.RegisterType((*AccountsRequest)(nil), "walletrpc.AccountsRequest")
	proto.RegisterType((*AccountsResponse)(nil), "walletrpc.AccountsResponse")
	proto.RegisterType((*AccountsResponse_Account)(nil), "walletrpc.AccountsResponse.Account")
	proto.RegisterType((*RenameAccountRequest)(nil), "walletrpc.RenameAccountRequest")
	proto.RegisterType((*RenameAccountResponse)(nil), "walletrpc.RenameAccountResponse")
	proto.RegisterType((*RescanRequest)(nil), "walletrpc.RescanRequest")
	proto.RegisterType((*RescanResponse)(nil), "walletrpc.RescanResponse")
	proto.RegisterType((*NextAccountRequest)(nil), "walletrpc.NextAccountRequest")
	proto.RegisterType((*NextAccountResponse)(nil), "walletrpc.NextAccountResponse")
	proto.RegisterType((*NextAddressRequest)(nil), "walletrpc.NextAddressRequest")
	proto.RegisterType((*NextAddressResponse)(nil), "walletrpc.NextAddressResponse")
	proto.RegisterType((*ImportPrivateKeyRequest)(nil), "walletrpc.ImportPrivateKeyRequest")
	proto.RegisterType((*ImportPrivateKeyResponse)(nil), "walletrpc.ImportPrivateKeyResponse")
	proto.RegisterType((*ImportScriptRequest)(nil), "walletrpc.ImportScriptRequest")
	proto.RegisterType((*ImportScriptResponse)(nil), "walletrpc.ImportScriptResponse")
	proto.RegisterType((*BalanceRequest)(nil), "walletrpc.BalanceRequest")
	proto.RegisterType((*BalanceResponse)(nil), "walletrpc.BalanceResponse")
	proto.RegisterType((*GetTransactionsRequest)(nil), "walletrpc.GetTransactionsRequest")
	proto.RegisterType((*GetTransactionsResponse)(nil), "walletrpc.GetTransactionsResponse")
	proto.RegisterType((*TicketPriceRequest)(nil), "walletrpc.TicketPriceRequest")
	proto.RegisterType((*TicketPriceResponse)(nil), "walletrpc.TicketPriceResponse")
	proto.RegisterType((*StakeInfoRequest)(nil), "walletrpc.StakeInfoRequest")
	proto.RegisterType((*StakeInfoResponse)(nil), "walletrpc.StakeInfoResponse")
	proto.RegisterType((*ChangePassphraseRequest)(nil), "walletrpc.ChangePassphraseRequest")
	proto.RegisterType((*ChangePassphraseResponse)(nil), "walletrpc.ChangePassphraseResponse")
	proto.RegisterType((*FundTransactionRequest)(nil), "walletrpc.FundTransactionRequest")
	proto.RegisterType((*FundTransactionResponse)(nil), "walletrpc.FundTransactionResponse")
	proto.RegisterType((*FundTransactionResponse_PreviousOutput)(nil), "walletrpc.FundTransactionResponse.PreviousOutput")
	proto.RegisterType((*ConstructTransactionRequest)(nil), "walletrpc.ConstructTransactionRequest")
	proto.RegisterType((*ConstructTransactionRequest_OutputDestination)(nil), "walletrpc.ConstructTransactionRequest.OutputDestination")
	proto.RegisterType((*ConstructTransactionRequest_Output)(nil), "walletrpc.ConstructTransactionRequest.Output")
	proto.RegisterType((*ConstructTransactionResponse)(nil), "walletrpc.ConstructTransactionResponse")
	proto.RegisterType((*SignTransactionRequest)(nil), "walletrpc.SignTransactionRequest")
	proto.RegisterType((*SignTransactionResponse)(nil), "walletrpc.SignTransactionResponse")
	proto.RegisterType((*PublishTransactionRequest)(nil), "walletrpc.PublishTransactionRequest")
	proto.RegisterType((*PublishTransactionResponse)(nil), "walletrpc.PublishTransactionResponse")
	proto.RegisterType((*PurchaseTicketsRequest)(nil), "walletrpc.PurchaseTicketsRequest")
	proto.RegisterType((*PurchaseTicketsResponse)(nil), "walletrpc.PurchaseTicketsResponse")
	proto.RegisterType((*LoadActiveDataFiltersRequest)(nil), "walletrpc.LoadActiveDataFiltersRequest")
	proto.RegisterType((*LoadActiveDataFiltersResponse)(nil), "walletrpc.LoadActiveDataFiltersResponse")
	proto.RegisterType((*TransactionNotificationsRequest)(nil), "walletrpc.TransactionNotificationsRequest")
	proto.RegisterType((*TransactionNotificationsResponse)(nil), "walletrpc.TransactionNotificationsResponse")
	proto.RegisterType((*SpentnessNotificationsRequest)(nil), "walletrpc.SpentnessNotificationsRequest")
	proto.RegisterType((*SpentnessNotificationsResponse)(nil), "walletrpc.SpentnessNotificationsResponse")
	proto.RegisterType((*SpentnessNotificationsResponse_Spender)(nil), "walletrpc.SpentnessNotificationsResponse.Spender")
	proto.RegisterType((*AccountNotificationsRequest)(nil), "walletrpc.AccountNotificationsRequest")
	proto.RegisterType((*AccountNotificationsResponse)(nil), "walletrpc.AccountNotificationsResponse")
	proto.RegisterType((*CreateWalletRequest)(nil), "walletrpc.CreateWalletRequest")
	proto.RegisterType((*CreateWalletResponse)(nil), "walletrpc.CreateWalletResponse")
	proto.RegisterType((*OpenWalletRequest)(nil), "walletrpc.OpenWalletRequest")
	proto.RegisterType((*OpenWalletResponse)(nil), "walletrpc.OpenWalletResponse")
	proto.RegisterType((*CloseWalletRequest)(nil), "walletrpc.CloseWalletRequest")
	proto.RegisterType((*CloseWalletResponse)(nil), "walletrpc.CloseWalletResponse")
	proto.RegisterType((*WalletExistsRequest)(nil), "walletrpc.WalletExistsRequest")
	proto.RegisterType((*WalletExistsResponse)(nil), "walletrpc.WalletExistsResponse")
	proto.RegisterType((*StartConsensusRpcRequest)(nil), "walletrpc.StartConsensusRpcRequest")
	proto.RegisterType((*StartConsensusRpcResponse)(nil), "walletrpc.StartConsensusRpcResponse")
	proto.RegisterType((*DiscoverAddressesRequest)(nil), "walletrpc.DiscoverAddressesRequest")
	proto.RegisterType((*DiscoverAddressesResponse)(nil), "walletrpc.DiscoverAddressesResponse")
	proto.RegisterType((*SubscribeToBlockNotificationsRequest)(nil), "walletrpc.SubscribeToBlockNotificationsRequest")
	proto.RegisterType((*SubscribeToBlockNotificationsResponse)(nil), "walletrpc.SubscribeToBlockNotificationsResponse")
	proto.RegisterType((*FetchHeadersRequest)(nil), "walletrpc.FetchHeadersRequest")
	proto.RegisterType((*FetchHeadersResponse)(nil), "walletrpc.FetchHeadersResponse")
	proto.RegisterType((*GenerateRandomSeedRequest)(nil), "walletrpc.GenerateRandomSeedRequest")
	proto.RegisterType((*GenerateRandomSeedResponse)(nil), "walletrpc.GenerateRandomSeedResponse")
	proto.RegisterType((*DecodeSeedRequest)(nil), "walletrpc.DecodeSeedRequest")
	proto.RegisterType((*DecodeSeedResponse)(nil), "walletrpc.DecodeSeedResponse")
	proto.RegisterType((*StartTicketPurchaseRequest)(nil), "walletrpc.StartTicketPurchaseRequest")
	proto.RegisterType((*StartTicketPurchaseResponse)(nil), "walletrpc.StartTicketPurchaseResponse")
	proto.RegisterType((*StopTicketPurchaseRequest)(nil), "walletrpc.StopTicketPurchaseRequest")
	proto.RegisterType((*StopTicketPurchaseResponse)(nil), "walletrpc.StopTicketPurchaseResponse")
	proto.RegisterType((*TicketBuyerConfigRequest)(nil), "walletrpc.TicketBuyerConfigRequest")
	proto.RegisterType((*TicketBuyerConfigResponse)(nil), "walletrpc.TicketBuyerConfigResponse")
	proto.RegisterType((*SetAccountNameRequest)(nil), "walletrpc.SetAccountNameRequest")
	proto.RegisterType((*SetAccountNameResponse)(nil), "walletrpc.SetAccountNameResponse")
	proto.RegisterType((*SetAvgPriceModeRequest)(nil), "walletrpc.SetAvgPriceModeRequest")
	proto.RegisterType((*SetAvgPriceModeResponse)(nil), "walletrpc.SetAvgPriceModeResponse")
	proto.RegisterType((*SetAvgPriceVWAPDeltaRequest)(nil), "walletrpc.SetAvgPriceVWAPDeltaRequest")
	proto.RegisterType((*SetAvgPriceVWAPDeltaResponse)(nil), "walletrpc.SetAvgPriceVWAPDeltaResponse")
	proto.RegisterType((*SetBalanceToMaintainRequest)(nil), "walletrpc.SetBalanceToMaintainRequest")
	proto.RegisterType((*SetBalanceToMaintainResponse)(nil), "walletrpc.SetBalanceToMaintainResponse")
	proto.RegisterType((*SetBlocksToAverageRequest)(nil), "walletrpc.SetBlocksToAverageRequest")
	proto.RegisterType((*SetBlocksToAverageResponse)(nil), "walletrpc.SetBlocksToAverageResponse")
	proto.RegisterType((*SetDontWaitForTicketsRequest)(nil), "walletrpc.SetDontWaitForTicketsRequest")
	proto.RegisterType((*SetDontWaitForTicketsResponse)(nil), "walletrpc.SetDontWaitForTicketsResponse")
	proto.RegisterType((*SetExpiryDeltaRequest)(nil), "walletrpc.SetExpiryDeltaRequest")
	proto.RegisterType((*SetExpiryDeltaResponse)(nil), "walletrpc.SetExpiryDeltaResponse")
	proto.RegisterType((*SetFeeSourceRequest)(nil), "walletrpc.SetFeeSourceRequest")
	proto.RegisterType((*SetFeeSourceResponse)(nil), "walletrpc.SetFeeSourceResponse")
	proto.RegisterType((*SetFeeTargetScalingRequest)(nil), "walletrpc.SetFeeTargetScalingRequest")
	proto.RegisterType((*SetFeeTargetScalingResponse)(nil), "walletrpc.SetFeeTargetScalingResponse")
	proto.RegisterType((*SetMinFeeRequest)(nil), "walletrpc.SetMinFeeRequest")
	proto.RegisterType((*SetMinFeeResponse)(nil), "walletrpc.SetMinFeeResponse")
	proto.RegisterType((*SetMinPriceScaleRequest)(nil), "walletrpc.SetMinPriceScaleRequest")
	proto.RegisterType((*SetMinPriceScaleResponse)(nil), "walletrpc.SetMinPriceScaleResponse")
	proto.RegisterType((*SetMaxFeeRequest)(nil), "walletrpc.SetMaxFeeRequest")
	proto.RegisterType((*SetMaxFeeResponse)(nil), "walletrpc.SetMaxFeeResponse")
	proto.RegisterType((*SetMaxPerBlockRequest)(nil), "walletrpc.SetMaxPerBlockRequest")
	proto.RegisterType((*SetMaxPerBlockResponse)(nil), "walletrpc.SetMaxPerBlockResponse")
	proto.RegisterType((*SetMaxPriceAbsoluteRequest)(nil), "walletrpc.SetMaxPriceAbsoluteRequest")
	proto.RegisterType((*SetMaxPriceAbsoluteResponse)(nil), "walletrpc.SetMaxPriceAbsoluteResponse")
	proto.RegisterType((*SetMaxPriceRelativeRequest)(nil), "walletrpc.SetMaxPriceRelativeRequest")
	proto.RegisterType((*SetMaxPriceRelativeResponse)(nil), "walletrpc.SetMaxPriceRelativeResponse")
	proto.RegisterType((*SetMaxPriceScaleRequest)(nil), "walletrpc.SetMaxPriceScaleRequest")
	proto.RegisterType((*SetMaxPriceScaleResponse)(nil), "walletrpc.SetMaxPriceScaleResponse")
	proto.RegisterType((*SetMaxInMempoolRequest)(nil), "walletrpc.SetMaxInMempoolRequest")
	proto.RegisterType((*SetMaxInMempoolResponse)(nil), "walletrpc.SetMaxInMempoolResponse")
	proto.RegisterType((*SetPoolAddressRequest)(nil), "walletrpc.SetPoolAddressRequest")
	proto.RegisterType((*SetPoolAddressResponse)(nil), "walletrpc.SetPoolAddressResponse")
	proto.RegisterType((*SetPoolFeesRequest)(nil), "walletrpc.SetPoolFeesRequest")
	proto.RegisterType((*SetPoolFeesResponse)(nil), "walletrpc.SetPoolFeesResponse")
	proto.RegisterType((*SetSpreadTicketPurchasesRequest)(nil), "walletrpc.SetSpreadTicketPurchasesRequest")
	proto.RegisterType((*SetSpreadTicketPurchasesResponse)(nil), "walletrpc.SetSpreadTicketPurchasesResponse")
	proto.RegisterType((*SetTicketAddressRequest)(nil), "walletrpc.SetTicketAddressRequest")
	proto.RegisterType((*SetTicketAddressResponse)(nil), "walletrpc.SetTicketAddressResponse")
	proto.RegisterType((*SetTxFeeRequest)(nil), "walletrpc.SetTxFeeRequest")
	proto.RegisterType((*SetTxFeeResponse)(nil), "walletrpc.SetTxFeeResponse")
	proto.RegisterEnum("walletrpc.NextAddressRequest_Kind", NextAddressRequest_Kind_name, NextAddressRequest_Kind_value)
	proto.RegisterEnum("walletrpc.ChangePassphraseRequest_Key", ChangePassphraseRequest_Key_name, ChangePassphraseRequest_Key_value)
	proto.RegisterEnum("walletrpc.ConstructTransactionRequest_OutputSelectionAlgorithm", ConstructTransactionRequest_OutputSelectionAlgorithm_name, ConstructTransactionRequest_OutputSelectionAlgorithm_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VersionService service

type VersionServiceClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type versionServiceClient struct {
	cc *grpc.ClientConn
}

func NewVersionServiceClient(cc *grpc.ClientConn) VersionServiceClient {
	return &versionServiceClient{cc}
}

func (c *versionServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.VersionService/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VersionService service

type VersionServiceServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
}

func RegisterVersionServiceServer(s *grpc.Server, srv VersionServiceServer) {
	s.RegisterService(&_VersionService_serviceDesc, srv)
}

func _VersionService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.VersionService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.VersionService",
	HandlerType: (*VersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _VersionService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for WalletService service

type WalletServiceClient interface {
	// Queries
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Network(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkResponse, error)
	AccountNumber(ctx context.Context, in *AccountNumberRequest, opts ...grpc.CallOption) (*AccountNumberResponse, error)
	Accounts(ctx context.Context, in *AccountsRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (WalletService_GetTransactionsClient, error)
	TicketPrice(ctx context.Context, in *TicketPriceRequest, opts ...grpc.CallOption) (*TicketPriceResponse, error)
	StakeInfo(ctx context.Context, in *StakeInfoRequest, opts ...grpc.CallOption) (*StakeInfoResponse, error)
	// Notifications
	TransactionNotifications(ctx context.Context, in *TransactionNotificationsRequest, opts ...grpc.CallOption) (WalletService_TransactionNotificationsClient, error)
	SpentnessNotifications(ctx context.Context, in *SpentnessNotificationsRequest, opts ...grpc.CallOption) (WalletService_SpentnessNotificationsClient, error)
	AccountNotifications(ctx context.Context, in *AccountNotificationsRequest, opts ...grpc.CallOption) (WalletService_AccountNotificationsClient, error)
	// Control
	ChangePassphrase(ctx context.Context, in *ChangePassphraseRequest, opts ...grpc.CallOption) (*ChangePassphraseResponse, error)
	RenameAccount(ctx context.Context, in *RenameAccountRequest, opts ...grpc.CallOption) (*RenameAccountResponse, error)
	Rescan(ctx context.Context, in *RescanRequest, opts ...grpc.CallOption) (WalletService_RescanClient, error)
	NextAccount(ctx context.Context, in *NextAccountRequest, opts ...grpc.CallOption) (*NextAccountResponse, error)
	NextAddress(ctx context.Context, in *NextAddressRequest, opts ...grpc.CallOption) (*NextAddressResponse, error)
	ImportPrivateKey(ctx context.Context, in *ImportPrivateKeyRequest, opts ...grpc.CallOption) (*ImportPrivateKeyResponse, error)
	ImportScript(ctx context.Context, in *ImportScriptRequest, opts ...grpc.CallOption) (*ImportScriptResponse, error)
	FundTransaction(ctx context.Context, in *FundTransactionRequest, opts ...grpc.CallOption) (*FundTransactionResponse, error)
	ConstructTransaction(ctx context.Context, in *ConstructTransactionRequest, opts ...grpc.CallOption) (*ConstructTransactionResponse, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error)
	PublishTransaction(ctx context.Context, in *PublishTransactionRequest, opts ...grpc.CallOption) (*PublishTransactionResponse, error)
	PurchaseTickets(ctx context.Context, in *PurchaseTicketsRequest, opts ...grpc.CallOption) (*PurchaseTicketsResponse, error)
	LoadActiveDataFilters(ctx context.Context, in *LoadActiveDataFiltersRequest, opts ...grpc.CallOption) (*LoadActiveDataFiltersResponse, error)
}

type walletServiceClient struct {
	cc *grpc.ClientConn
}

func NewWalletServiceClient(cc *grpc.ClientConn) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Network(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkResponse, error) {
	out := new(NetworkResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/Network", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) AccountNumber(ctx context.Context, in *AccountNumberRequest, opts ...grpc.CallOption) (*AccountNumberResponse, error) {
	out := new(AccountNumberResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/AccountNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Accounts(ctx context.Context, in *AccountsRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/Accounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/Balance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (WalletService_GetTransactionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WalletService_serviceDesc.Streams[0], c.cc, "/walletrpc.WalletService/GetTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceGetTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_GetTransactionsClient interface {
	Recv() (*GetTransactionsResponse, error)
	grpc.ClientStream
}

type walletServiceGetTransactionsClient struct {
	grpc.ClientStream
}

func (x *walletServiceGetTransactionsClient) Recv() (*GetTransactionsResponse, error) {
	m := new(GetTransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) TicketPrice(ctx context.Context, in *TicketPriceRequest, opts ...grpc.CallOption) (*TicketPriceResponse, error) {
	out := new(TicketPriceResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/TicketPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) StakeInfo(ctx context.Context, in *StakeInfoRequest, opts ...grpc.CallOption) (*StakeInfoResponse, error) {
	out := new(StakeInfoResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/StakeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) TransactionNotifications(ctx context.Context, in *TransactionNotificationsRequest, opts ...grpc.CallOption) (WalletService_TransactionNotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WalletService_serviceDesc.Streams[1], c.cc, "/walletrpc.WalletService/TransactionNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceTransactionNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_TransactionNotificationsClient interface {
	Recv() (*TransactionNotificationsResponse, error)
	grpc.ClientStream
}

type walletServiceTransactionNotificationsClient struct {
	grpc.ClientStream
}

func (x *walletServiceTransactionNotificationsClient) Recv() (*TransactionNotificationsResponse, error) {
	m := new(TransactionNotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) SpentnessNotifications(ctx context.Context, in *SpentnessNotificationsRequest, opts ...grpc.CallOption) (WalletService_SpentnessNotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WalletService_serviceDesc.Streams[2], c.cc, "/walletrpc.WalletService/SpentnessNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceSpentnessNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_SpentnessNotificationsClient interface {
	Recv() (*SpentnessNotificationsResponse, error)
	grpc.ClientStream
}

type walletServiceSpentnessNotificationsClient struct {
	grpc.ClientStream
}

func (x *walletServiceSpentnessNotificationsClient) Recv() (*SpentnessNotificationsResponse, error) {
	m := new(SpentnessNotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) AccountNotifications(ctx context.Context, in *AccountNotificationsRequest, opts ...grpc.CallOption) (WalletService_AccountNotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WalletService_serviceDesc.Streams[3], c.cc, "/walletrpc.WalletService/AccountNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceAccountNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_AccountNotificationsClient interface {
	Recv() (*AccountNotificationsResponse, error)
	grpc.ClientStream
}

type walletServiceAccountNotificationsClient struct {
	grpc.ClientStream
}

func (x *walletServiceAccountNotificationsClient) Recv() (*AccountNotificationsResponse, error) {
	m := new(AccountNotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) ChangePassphrase(ctx context.Context, in *ChangePassphraseRequest, opts ...grpc.CallOption) (*ChangePassphraseResponse, error) {
	out := new(ChangePassphraseResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/ChangePassphrase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RenameAccount(ctx context.Context, in *RenameAccountRequest, opts ...grpc.CallOption) (*RenameAccountResponse, error) {
	out := new(RenameAccountResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/RenameAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Rescan(ctx context.Context, in *RescanRequest, opts ...grpc.CallOption) (WalletService_RescanClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WalletService_serviceDesc.Streams[4], c.cc, "/walletrpc.WalletService/Rescan", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceRescanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_RescanClient interface {
	Recv() (*RescanResponse, error)
	grpc.ClientStream
}

type walletServiceRescanClient struct {
	grpc.ClientStream
}

func (x *walletServiceRescanClient) Recv() (*RescanResponse, error) {
	m := new(RescanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) NextAccount(ctx context.Context, in *NextAccountRequest, opts ...grpc.CallOption) (*NextAccountResponse, error) {
	out := new(NextAccountResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/NextAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) NextAddress(ctx context.Context, in *NextAddressRequest, opts ...grpc.CallOption) (*NextAddressResponse, error) {
	out := new(NextAddressResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/NextAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ImportPrivateKey(ctx context.Context, in *ImportPrivateKeyRequest, opts ...grpc.CallOption) (*ImportPrivateKeyResponse, error) {
	out := new(ImportPrivateKeyResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/ImportPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ImportScript(ctx context.Context, in *ImportScriptRequest, opts ...grpc.CallOption) (*ImportScriptResponse, error) {
	out := new(ImportScriptResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/ImportScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FundTransaction(ctx context.Context, in *FundTransactionRequest, opts ...grpc.CallOption) (*FundTransactionResponse, error) {
	out := new(FundTransactionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/FundTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ConstructTransaction(ctx context.Context, in *ConstructTransactionRequest, opts ...grpc.CallOption) (*ConstructTransactionResponse, error) {
	out := new(ConstructTransactionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/ConstructTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error) {
	out := new(SignTransactionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/SignTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PublishTransaction(ctx context.Context, in *PublishTransactionRequest, opts ...grpc.CallOption) (*PublishTransactionResponse, error) {
	out := new(PublishTransactionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/PublishTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PurchaseTickets(ctx context.Context, in *PurchaseTicketsRequest, opts ...grpc.CallOption) (*PurchaseTicketsResponse, error) {
	out := new(PurchaseTicketsResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/PurchaseTickets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) LoadActiveDataFilters(ctx context.Context, in *LoadActiveDataFiltersRequest, opts ...grpc.CallOption) (*LoadActiveDataFiltersResponse, error) {
	out := new(LoadActiveDataFiltersResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/LoadActiveDataFilters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletService service

type WalletServiceServer interface {
	// Queries
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Network(context.Context, *NetworkRequest) (*NetworkResponse, error)
	AccountNumber(context.Context, *AccountNumberRequest) (*AccountNumberResponse, error)
	Accounts(context.Context, *AccountsRequest) (*AccountsResponse, error)
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	GetTransactions(*GetTransactionsRequest, WalletService_GetTransactionsServer) error
	TicketPrice(context.Context, *TicketPriceRequest) (*TicketPriceResponse, error)
	StakeInfo(context.Context, *StakeInfoRequest) (*StakeInfoResponse, error)
	// Notifications
	TransactionNotifications(*TransactionNotificationsRequest, WalletService_TransactionNotificationsServer) error
	SpentnessNotifications(*SpentnessNotificationsRequest, WalletService_SpentnessNotificationsServer) error
	AccountNotifications(*AccountNotificationsRequest, WalletService_AccountNotificationsServer) error
	// Control
	ChangePassphrase(context.Context, *ChangePassphraseRequest) (*ChangePassphraseResponse, error)
	RenameAccount(context.Context, *RenameAccountRequest) (*RenameAccountResponse, error)
	Rescan(*RescanRequest, WalletService_RescanServer) error
	NextAccount(context.Context, *NextAccountRequest) (*NextAccountResponse, error)
	NextAddress(context.Context, *NextAddressRequest) (*NextAddressResponse, error)
	ImportPrivateKey(context.Context, *ImportPrivateKeyRequest) (*ImportPrivateKeyResponse, error)
	ImportScript(context.Context, *ImportScriptRequest) (*ImportScriptResponse, error)
	FundTransaction(context.Context, *FundTransactionRequest) (*FundTransactionResponse, error)
	ConstructTransaction(context.Context, *ConstructTransactionRequest) (*ConstructTransactionResponse, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error)
	PublishTransaction(context.Context, *PublishTransactionRequest) (*PublishTransactionResponse, error)
	PurchaseTickets(context.Context, *PurchaseTicketsRequest) (*PurchaseTicketsResponse, error)
	LoadActiveDataFilters(context.Context, *LoadActiveDataFiltersRequest) (*LoadActiveDataFiltersResponse, error)
}

func RegisterWalletServiceServer(s *grpc.Server, srv WalletServiceServer) {
	s.RegisterService(&_WalletService_serviceDesc, srv)
}

func _WalletService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Network_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Network(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/Network",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Network(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_AccountNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).AccountNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/AccountNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).AccountNumber(ctx, req.(*AccountNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Accounts(ctx, req.(*AccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).GetTransactions(m, &walletServiceGetTransactionsServer{stream})
}

type WalletService_GetTransactionsServer interface {
	Send(*GetTransactionsResponse) error
	grpc.ServerStream
}

type walletServiceGetTransactionsServer struct {
	grpc.ServerStream
}

func (x *walletServiceGetTransactionsServer) Send(m *GetTransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_TicketPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).TicketPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/TicketPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).TicketPrice(ctx, req.(*TicketPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_StakeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).StakeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/StakeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).StakeInfo(ctx, req.(*StakeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_TransactionNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).TransactionNotifications(m, &walletServiceTransactionNotificationsServer{stream})
}

type WalletService_TransactionNotificationsServer interface {
	Send(*TransactionNotificationsResponse) error
	grpc.ServerStream
}

type walletServiceTransactionNotificationsServer struct {
	grpc.ServerStream
}

func (x *walletServiceTransactionNotificationsServer) Send(m *TransactionNotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_SpentnessNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SpentnessNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).SpentnessNotifications(m, &walletServiceSpentnessNotificationsServer{stream})
}

type WalletService_SpentnessNotificationsServer interface {
	Send(*SpentnessNotificationsResponse) error
	grpc.ServerStream
}

type walletServiceSpentnessNotificationsServer struct {
	grpc.ServerStream
}

func (x *walletServiceSpentnessNotificationsServer) Send(m *SpentnessNotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_AccountNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).AccountNotifications(m, &walletServiceAccountNotificationsServer{stream})
}

type WalletService_AccountNotificationsServer interface {
	Send(*AccountNotificationsResponse) error
	grpc.ServerStream
}

type walletServiceAccountNotificationsServer struct {
	grpc.ServerStream
}

func (x *walletServiceAccountNotificationsServer) Send(m *AccountNotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_ChangePassphrase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePassphraseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ChangePassphrase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/ChangePassphrase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ChangePassphrase(ctx, req.(*ChangePassphraseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RenameAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RenameAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/RenameAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RenameAccount(ctx, req.(*RenameAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Rescan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RescanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).Rescan(m, &walletServiceRescanServer{stream})
}

type WalletService_RescanServer interface {
	Send(*RescanResponse) error
	grpc.ServerStream
}

type walletServiceRescanServer struct {
	grpc.ServerStream
}

func (x *walletServiceRescanServer) Send(m *RescanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_NextAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).NextAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/NextAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).NextAccount(ctx, req.(*NextAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_NextAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).NextAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/NextAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).NextAddress(ctx, req.(*NextAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ImportPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ImportPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/ImportPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ImportPrivateKey(ctx, req.(*ImportPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ImportScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ImportScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/ImportScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ImportScript(ctx, req.(*ImportScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FundTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).FundTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/FundTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).FundTransaction(ctx, req.(*FundTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ConstructTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConstructTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ConstructTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/ConstructTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ConstructTransaction(ctx, req.(*ConstructTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PublishTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PublishTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/PublishTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PublishTransaction(ctx, req.(*PublishTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PurchaseTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PurchaseTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/PurchaseTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PurchaseTickets(ctx, req.(*PurchaseTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_LoadActiveDataFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadActiveDataFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).LoadActiveDataFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/LoadActiveDataFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).LoadActiveDataFilters(ctx, req.(*LoadActiveDataFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WalletService_Ping_Handler,
		},
		{
			MethodName: "Network",
			Handler:    _WalletService_Network_Handler,
		},
		{
			MethodName: "AccountNumber",
			Handler:    _WalletService_AccountNumber_Handler,
		},
		{
			MethodName: "Accounts",
			Handler:    _WalletService_Accounts_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _WalletService_Balance_Handler,
		},
		{
			MethodName: "TicketPrice",
			Handler:    _WalletService_TicketPrice_Handler,
		},
		{
			MethodName: "StakeInfo",
			Handler:    _WalletService_StakeInfo_Handler,
		},
		{
			MethodName: "ChangePassphrase",
			Handler:    _WalletService_ChangePassphrase_Handler,
		},
		{
			MethodName: "RenameAccount",
			Handler:    _WalletService_RenameAccount_Handler,
		},
		{
			MethodName: "NextAccount",
			Handler:    _WalletService_NextAccount_Handler,
		},
		{
			MethodName: "NextAddress",
			Handler:    _WalletService_NextAddress_Handler,
		},
		{
			MethodName: "ImportPrivateKey",
			Handler:    _WalletService_ImportPrivateKey_Handler,
		},
		{
			MethodName: "ImportScript",
			Handler:    _WalletService_ImportScript_Handler,
		},
		{
			MethodName: "FundTransaction",
			Handler:    _WalletService_FundTransaction_Handler,
		},
		{
			MethodName: "ConstructTransaction",
			Handler:    _WalletService_ConstructTransaction_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _WalletService_SignTransaction_Handler,
		},
		{
			MethodName: "PublishTransaction",
			Handler:    _WalletService_PublishTransaction_Handler,
		},
		{
			MethodName: "PurchaseTickets",
			Handler:    _WalletService_PurchaseTickets_Handler,
		},
		{
			MethodName: "LoadActiveDataFilters",
			Handler:    _WalletService_LoadActiveDataFilters_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactions",
			Handler:       _WalletService_GetTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransactionNotifications",
			Handler:       _WalletService_TransactionNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SpentnessNotifications",
			Handler:       _WalletService_SpentnessNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AccountNotifications",
			Handler:       _WalletService_AccountNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Rescan",
			Handler:       _WalletService_Rescan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

// Client API for WalletLoaderService service

type WalletLoaderServiceClient interface {
	WalletExists(ctx context.Context, in *WalletExistsRequest, opts ...grpc.CallOption) (*WalletExistsResponse, error)
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	OpenWallet(ctx context.Context, in *OpenWalletRequest, opts ...grpc.CallOption) (*OpenWalletResponse, error)
	CloseWallet(ctx context.Context, in *CloseWalletRequest, opts ...grpc.CallOption) (*CloseWalletResponse, error)
	StartConsensusRpc(ctx context.Context, in *StartConsensusRpcRequest, opts ...grpc.CallOption) (*StartConsensusRpcResponse, error)
	DiscoverAddresses(ctx context.Context, in *DiscoverAddressesRequest, opts ...grpc.CallOption) (*DiscoverAddressesResponse, error)
	SubscribeToBlockNotifications(ctx context.Context, in *SubscribeToBlockNotificationsRequest, opts ...grpc.CallOption) (*SubscribeToBlockNotificationsResponse, error)
	FetchHeaders(ctx context.Context, in *FetchHeadersRequest, opts ...grpc.CallOption) (*FetchHeadersResponse, error)
}

type walletLoaderServiceClient struct {
	cc *grpc.ClientConn
}

func NewWalletLoaderServiceClient(cc *grpc.ClientConn) WalletLoaderServiceClient {
	return &walletLoaderServiceClient{cc}
}

func (c *walletLoaderServiceClient) WalletExists(ctx context.Context, in *WalletExistsRequest, opts ...grpc.CallOption) (*WalletExistsResponse, error) {
	out := new(WalletExistsResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/WalletExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	out := new(CreateWalletResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/CreateWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) OpenWallet(ctx context.Context, in *OpenWalletRequest, opts ...grpc.CallOption) (*OpenWalletResponse, error) {
	out := new(OpenWalletResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/OpenWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) CloseWallet(ctx context.Context, in *CloseWalletRequest, opts ...grpc.CallOption) (*CloseWalletResponse, error) {
	out := new(CloseWalletResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/CloseWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) StartConsensusRpc(ctx context.Context, in *StartConsensusRpcRequest, opts ...grpc.CallOption) (*StartConsensusRpcResponse, error) {
	out := new(StartConsensusRpcResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/StartConsensusRpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) DiscoverAddresses(ctx context.Context, in *DiscoverAddressesRequest, opts ...grpc.CallOption) (*DiscoverAddressesResponse, error) {
	out := new(DiscoverAddressesResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/DiscoverAddresses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) SubscribeToBlockNotifications(ctx context.Context, in *SubscribeToBlockNotificationsRequest, opts ...grpc.CallOption) (*SubscribeToBlockNotificationsResponse, error) {
	out := new(SubscribeToBlockNotificationsResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/SubscribeToBlockNotifications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) FetchHeaders(ctx context.Context, in *FetchHeadersRequest, opts ...grpc.CallOption) (*FetchHeadersResponse, error) {
	out := new(FetchHeadersResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/FetchHeaders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletLoaderService service

type WalletLoaderServiceServer interface {
	WalletExists(context.Context, *WalletExistsRequest) (*WalletExistsResponse, error)
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	OpenWallet(context.Context, *OpenWalletRequest) (*OpenWalletResponse, error)
	CloseWallet(context.Context, *CloseWalletRequest) (*CloseWalletResponse, error)
	StartConsensusRpc(context.Context, *StartConsensusRpcRequest) (*StartConsensusRpcResponse, error)
	DiscoverAddresses(context.Context, *DiscoverAddressesRequest) (*DiscoverAddressesResponse, error)
	SubscribeToBlockNotifications(context.Context, *SubscribeToBlockNotificationsRequest) (*SubscribeToBlockNotificationsResponse, error)
	FetchHeaders(context.Context, *FetchHeadersRequest) (*FetchHeadersResponse, error)
}

func RegisterWalletLoaderServiceServer(s *grpc.Server, srv WalletLoaderServiceServer) {
	s.RegisterService(&_WalletLoaderService_serviceDesc, srv)
}

func _WalletLoaderService_WalletExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).WalletExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/WalletExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).WalletExists(ctx, req.(*WalletExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_OpenWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).OpenWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/OpenWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).OpenWallet(ctx, req.(*OpenWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_CloseWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).CloseWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/CloseWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).CloseWallet(ctx, req.(*CloseWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_StartConsensusRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartConsensusRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).StartConsensusRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/StartConsensusRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).StartConsensusRpc(ctx, req.(*StartConsensusRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_DiscoverAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).DiscoverAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/DiscoverAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).DiscoverAddresses(ctx, req.(*DiscoverAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_SubscribeToBlockNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToBlockNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).SubscribeToBlockNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/SubscribeToBlockNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).SubscribeToBlockNotifications(ctx, req.(*SubscribeToBlockNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_FetchHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).FetchHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/FetchHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).FetchHeaders(ctx, req.(*FetchHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletLoaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.WalletLoaderService",
	HandlerType: (*WalletLoaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WalletExists",
			Handler:    _WalletLoaderService_WalletExists_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _WalletLoaderService_CreateWallet_Handler,
		},
		{
			MethodName: "OpenWallet",
			Handler:    _WalletLoaderService_OpenWallet_Handler,
		},
		{
			MethodName: "CloseWallet",
			Handler:    _WalletLoaderService_CloseWallet_Handler,
		},
		{
			MethodName: "StartConsensusRpc",
			Handler:    _WalletLoaderService_StartConsensusRpc_Handler,
		},
		{
			MethodName: "DiscoverAddresses",
			Handler:    _WalletLoaderService_DiscoverAddresses_Handler,
		},
		{
			MethodName: "SubscribeToBlockNotifications",
			Handler:    _WalletLoaderService_SubscribeToBlockNotifications_Handler,
		},
		{
			MethodName: "FetchHeaders",
			Handler:    _WalletLoaderService_FetchHeaders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for SeedService service

type SeedServiceClient interface {
	GenerateRandomSeed(ctx context.Context, in *GenerateRandomSeedRequest, opts ...grpc.CallOption) (*GenerateRandomSeedResponse, error)
	DecodeSeed(ctx context.Context, in *DecodeSeedRequest, opts ...grpc.CallOption) (*DecodeSeedResponse, error)
}

type seedServiceClient struct {
	cc *grpc.ClientConn
}

func NewSeedServiceClient(cc *grpc.ClientConn) SeedServiceClient {
	return &seedServiceClient{cc}
}

func (c *seedServiceClient) GenerateRandomSeed(ctx context.Context, in *GenerateRandomSeedRequest, opts ...grpc.CallOption) (*GenerateRandomSeedResponse, error) {
	out := new(GenerateRandomSeedResponse)
	err := grpc.Invoke(ctx, "/walletrpc.SeedService/GenerateRandomSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedServiceClient) DecodeSeed(ctx context.Context, in *DecodeSeedRequest, opts ...grpc.CallOption) (*DecodeSeedResponse, error) {
	out := new(DecodeSeedResponse)
	err := grpc.Invoke(ctx, "/walletrpc.SeedService/DecodeSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SeedService service

type SeedServiceServer interface {
	GenerateRandomSeed(context.Context, *GenerateRandomSeedRequest) (*GenerateRandomSeedResponse, error)
	DecodeSeed(context.Context, *DecodeSeedRequest) (*DecodeSeedResponse, error)
}

func RegisterSeedServiceServer(s *grpc.Server, srv SeedServiceServer) {
	s.RegisterService(&_SeedService_serviceDesc, srv)
}

func _SeedService_GenerateRandomSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRandomSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedServiceServer).GenerateRandomSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.SeedService/GenerateRandomSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedServiceServer).GenerateRandomSeed(ctx, req.(*GenerateRandomSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedService_DecodeSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedServiceServer).DecodeSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.SeedService/DecodeSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedServiceServer).DecodeSeed(ctx, req.(*DecodeSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SeedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.SeedService",
	HandlerType: (*SeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRandomSeed",
			Handler:    _SeedService_GenerateRandomSeed_Handler,
		},
		{
			MethodName: "DecodeSeed",
			Handler:    _SeedService_DecodeSeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for TicketBuyerService service

type TicketBuyerServiceClient interface {
	StartTicketPurchase(ctx context.Context, in *StartTicketPurchaseRequest, opts ...grpc.CallOption) (*StartTicketPurchaseResponse, error)
	StopTicketPurchase(ctx context.Context, in *StopTicketPurchaseRequest, opts ...grpc.CallOption) (*StopTicketPurchaseResponse, error)
	Config(ctx context.Context, in *TicketBuyerConfigRequest, opts ...grpc.CallOption) (*TicketBuyerConfigResponse, error)
	SetAccountName(ctx context.Context, in *SetAccountNameRequest, opts ...grpc.CallOption) (*SetAccountNameResponse, error)
	SetAvgPriceMode(ctx context.Context, in *SetAvgPriceModeRequest, opts ...grpc.CallOption) (*SetAvgPriceModeResponse, error)
	SetAvgPriceVWAPDelta(ctx context.Context, in *SetAvgPriceVWAPDeltaRequest, opts ...grpc.CallOption) (*SetAvgPriceVWAPDeltaResponse, error)
	SetBalanceToMaintain(ctx context.Context, in *SetBalanceToMaintainRequest, opts ...grpc.CallOption) (*SetBalanceToMaintainResponse, error)
	SetBlocksToAverage(ctx context.Context, in *SetBlocksToAverageRequest, opts ...grpc.CallOption) (*SetBlocksToAverageResponse, error)
	SetDontWaitForTickets(ctx context.Context, in *SetDontWaitForTicketsRequest, opts ...grpc.CallOption) (*SetDontWaitForTicketsResponse, error)
	SetExpiryDelta(ctx context.Context, in *SetExpiryDeltaRequest, opts ...grpc.CallOption) (*SetExpiryDeltaResponse, error)
	SetFeeSource(ctx context.Context, in *SetFeeSourceRequest, opts ...grpc.CallOption) (*SetFeeSourceResponse, error)
	SetFeeTargetScaling(ctx context.Context, in *SetFeeTargetScalingRequest, opts ...grpc.CallOption) (*SetFeeTargetScalingResponse, error)
	SetMinFee(ctx context.Context, in *SetMinFeeRequest, opts ...grpc.CallOption) (*SetMinFeeResponse, error)
	SetMinPriceScale(ctx context.Context, in *SetMinPriceScaleRequest, opts ...grpc.CallOption) (*SetMinPriceScaleResponse, error)
	SetMaxFee(ctx context.Context, in *SetMaxFeeRequest, opts ...grpc.CallOption) (*SetMaxFeeResponse, error)
	SetMaxPerBlock(ctx context.Context, in *SetMaxPerBlockRequest, opts ...grpc.CallOption) (*SetMaxPerBlockResponse, error)
	SetMaxPriceAbsolute(ctx context.Context, in *SetMaxPriceAbsoluteRequest, opts ...grpc.CallOption) (*SetMaxPriceAbsoluteResponse, error)
	SetMaxPriceRelative(ctx context.Context, in *SetMaxPriceRelativeRequest, opts ...grpc.CallOption) (*SetMaxPriceRelativeResponse, error)
	SetMaxPriceScale(ctx context.Context, in *SetMaxPriceScaleRequest, opts ...grpc.CallOption) (*SetMaxPriceScaleResponse, error)
	SetMaxInMempool(ctx context.Context, in *SetMaxInMempoolRequest, opts ...grpc.CallOption) (*SetMaxInMempoolResponse, error)
	SetPoolAddress(ctx context.Context, in *SetPoolAddressRequest, opts ...grpc.CallOption) (*SetPoolAddressResponse, error)
	SetPoolFees(ctx context.Context, in *SetPoolFeesRequest, opts ...grpc.CallOption) (*SetPoolFeesResponse, error)
	SetSpreadTicketPurchases(ctx context.Context, in *SetSpreadTicketPurchasesRequest, opts ...grpc.CallOption) (*SetSpreadTicketPurchasesResponse, error)
	SetTicketAddress(ctx context.Context, in *SetTicketAddressRequest, opts ...grpc.CallOption) (*SetTicketAddressResponse, error)
	SetTxFee(ctx context.Context, in *SetTxFeeRequest, opts ...grpc.CallOption) (*SetTxFeeResponse, error)
}

type ticketBuyerServiceClient struct {
	cc *grpc.ClientConn
}

func NewTicketBuyerServiceClient(cc *grpc.ClientConn) TicketBuyerServiceClient {
	return &ticketBuyerServiceClient{cc}
}

func (c *ticketBuyerServiceClient) StartTicketPurchase(ctx context.Context, in *StartTicketPurchaseRequest, opts ...grpc.CallOption) (*StartTicketPurchaseResponse, error) {
	out := new(StartTicketPurchaseResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/StartTicketPurchase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) StopTicketPurchase(ctx context.Context, in *StopTicketPurchaseRequest, opts ...grpc.CallOption) (*StopTicketPurchaseResponse, error) {
	out := new(StopTicketPurchaseResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/StopTicketPurchase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) Config(ctx context.Context, in *TicketBuyerConfigRequest, opts ...grpc.CallOption) (*TicketBuyerConfigResponse, error) {
	out := new(TicketBuyerConfigResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/Config", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetAccountName(ctx context.Context, in *SetAccountNameRequest, opts ...grpc.CallOption) (*SetAccountNameResponse, error) {
	out := new(SetAccountNameResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetAccountName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetAvgPriceMode(ctx context.Context, in *SetAvgPriceModeRequest, opts ...grpc.CallOption) (*SetAvgPriceModeResponse, error) {
	out := new(SetAvgPriceModeResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetAvgPriceMode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetAvgPriceVWAPDelta(ctx context.Context, in *SetAvgPriceVWAPDeltaRequest, opts ...grpc.CallOption) (*SetAvgPriceVWAPDeltaResponse, error) {
	out := new(SetAvgPriceVWAPDeltaResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetAvgPriceVWAPDelta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetBalanceToMaintain(ctx context.Context, in *SetBalanceToMaintainRequest, opts ...grpc.CallOption) (*SetBalanceToMaintainResponse, error) {
	out := new(SetBalanceToMaintainResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetBalanceToMaintain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetBlocksToAverage(ctx context.Context, in *SetBlocksToAverageRequest, opts ...grpc.CallOption) (*SetBlocksToAverageResponse, error) {
	out := new(SetBlocksToAverageResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetBlocksToAverage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetDontWaitForTickets(ctx context.Context, in *SetDontWaitForTicketsRequest, opts ...grpc.CallOption) (*SetDontWaitForTicketsResponse, error) {
	out := new(SetDontWaitForTicketsResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetDontWaitForTickets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetExpiryDelta(ctx context.Context, in *SetExpiryDeltaRequest, opts ...grpc.CallOption) (*SetExpiryDeltaResponse, error) {
	out := new(SetExpiryDeltaResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetExpiryDelta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetFeeSource(ctx context.Context, in *SetFeeSourceRequest, opts ...grpc.CallOption) (*SetFeeSourceResponse, error) {
	out := new(SetFeeSourceResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetFeeSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetFeeTargetScaling(ctx context.Context, in *SetFeeTargetScalingRequest, opts ...grpc.CallOption) (*SetFeeTargetScalingResponse, error) {
	out := new(SetFeeTargetScalingResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetFeeTargetScaling", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMinFee(ctx context.Context, in *SetMinFeeRequest, opts ...grpc.CallOption) (*SetMinFeeResponse, error) {
	out := new(SetMinFeeResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMinFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMinPriceScale(ctx context.Context, in *SetMinPriceScaleRequest, opts ...grpc.CallOption) (*SetMinPriceScaleResponse, error) {
	out := new(SetMinPriceScaleResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMinPriceScale", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMaxFee(ctx context.Context, in *SetMaxFeeRequest, opts ...grpc.CallOption) (*SetMaxFeeResponse, error) {
	out := new(SetMaxFeeResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMaxFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMaxPerBlock(ctx context.Context, in *SetMaxPerBlockRequest, opts ...grpc.CallOption) (*SetMaxPerBlockResponse, error) {
	out := new(SetMaxPerBlockResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMaxPerBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMaxPriceAbsolute(ctx context.Context, in *SetMaxPriceAbsoluteRequest, opts ...grpc.CallOption) (*SetMaxPriceAbsoluteResponse, error) {
	out := new(SetMaxPriceAbsoluteResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMaxPriceAbsolute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMaxPriceRelative(ctx context.Context, in *SetMaxPriceRelativeRequest, opts ...grpc.CallOption) (*SetMaxPriceRelativeResponse, error) {
	out := new(SetMaxPriceRelativeResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMaxPriceRelative", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMaxPriceScale(ctx context.Context, in *SetMaxPriceScaleRequest, opts ...grpc.CallOption) (*SetMaxPriceScaleResponse, error) {
	out := new(SetMaxPriceScaleResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMaxPriceScale", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMaxInMempool(ctx context.Context, in *SetMaxInMempoolRequest, opts ...grpc.CallOption) (*SetMaxInMempoolResponse, error) {
	out := new(SetMaxInMempoolResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMaxInMempool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetPoolAddress(ctx context.Context, in *SetPoolAddressRequest, opts ...grpc.CallOption) (*SetPoolAddressResponse, error) {
	out := new(SetPoolAddressResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetPoolAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetPoolFees(ctx context.Context, in *SetPoolFeesRequest, opts ...grpc.CallOption) (*SetPoolFeesResponse, error) {
	out := new(SetPoolFeesResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetPoolFees", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetSpreadTicketPurchases(ctx context.Context, in *SetSpreadTicketPurchasesRequest, opts ...grpc.CallOption) (*SetSpreadTicketPurchasesResponse, error) {
	out := new(SetSpreadTicketPurchasesResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetSpreadTicketPurchases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetTicketAddress(ctx context.Context, in *SetTicketAddressRequest, opts ...grpc.CallOption) (*SetTicketAddressResponse, error) {
	out := new(SetTicketAddressResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetTicketAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetTxFee(ctx context.Context, in *SetTxFeeRequest, opts ...grpc.CallOption) (*SetTxFeeResponse, error) {
	out := new(SetTxFeeResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetTxFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TicketBuyerService service

type TicketBuyerServiceServer interface {
	StartTicketPurchase(context.Context, *StartTicketPurchaseRequest) (*StartTicketPurchaseResponse, error)
	StopTicketPurchase(context.Context, *StopTicketPurchaseRequest) (*StopTicketPurchaseResponse, error)
	Config(context.Context, *TicketBuyerConfigRequest) (*TicketBuyerConfigResponse, error)
	SetAccountName(context.Context, *SetAccountNameRequest) (*SetAccountNameResponse, error)
	SetAvgPriceMode(context.Context, *SetAvgPriceModeRequest) (*SetAvgPriceModeResponse, error)
	SetAvgPriceVWAPDelta(context.Context, *SetAvgPriceVWAPDeltaRequest) (*SetAvgPriceVWAPDeltaResponse, error)
	SetBalanceToMaintain(context.Context, *SetBalanceToMaintainRequest) (*SetBalanceToMaintainResponse, error)
	SetBlocksToAverage(context.Context, *SetBlocksToAverageRequest) (*SetBlocksToAverageResponse, error)
	SetDontWaitForTickets(context.Context, *SetDontWaitForTicketsRequest) (*SetDontWaitForTicketsResponse, error)
	SetExpiryDelta(context.Context, *SetExpiryDeltaRequest) (*SetExpiryDeltaResponse, error)
	SetFeeSource(context.Context, *SetFeeSourceRequest) (*SetFeeSourceResponse, error)
	SetFeeTargetScaling(context.Context, *SetFeeTargetScalingRequest) (*SetFeeTargetScalingResponse, error)
	SetMinFee(context.Context, *SetMinFeeRequest) (*SetMinFeeResponse, error)
	SetMinPriceScale(context.Context, *SetMinPriceScaleRequest) (*SetMinPriceScaleResponse, error)
	SetMaxFee(context.Context, *SetMaxFeeRequest) (*SetMaxFeeResponse, error)
	SetMaxPerBlock(context.Context, *SetMaxPerBlockRequest) (*SetMaxPerBlockResponse, error)
	SetMaxPriceAbsolute(context.Context, *SetMaxPriceAbsoluteRequest) (*SetMaxPriceAbsoluteResponse, error)
	SetMaxPriceRelative(context.Context, *SetMaxPriceRelativeRequest) (*SetMaxPriceRelativeResponse, error)
	SetMaxPriceScale(context.Context, *SetMaxPriceScaleRequest) (*SetMaxPriceScaleResponse, error)
	SetMaxInMempool(context.Context, *SetMaxInMempoolRequest) (*SetMaxInMempoolResponse, error)
	SetPoolAddress(context.Context, *SetPoolAddressRequest) (*SetPoolAddressResponse, error)
	SetPoolFees(context.Context, *SetPoolFeesRequest) (*SetPoolFeesResponse, error)
	SetSpreadTicketPurchases(context.Context, *SetSpreadTicketPurchasesRequest) (*SetSpreadTicketPurchasesResponse, error)
	SetTicketAddress(context.Context, *SetTicketAddressRequest) (*SetTicketAddressResponse, error)
	SetTxFee(context.Context, *SetTxFeeRequest) (*SetTxFeeResponse, error)
}

func RegisterTicketBuyerServiceServer(s *grpc.Server, srv TicketBuyerServiceServer) {
	s.RegisterService(&_TicketBuyerService_serviceDesc, srv)
}

func _TicketBuyerService_StartTicketPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTicketPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).StartTicketPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/StartTicketPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).StartTicketPurchase(ctx, req.(*StartTicketPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_StopTicketPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTicketPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).StopTicketPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/StopTicketPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).StopTicketPurchase(ctx, req.(*StopTicketPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketBuyerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).Config(ctx, req.(*TicketBuyerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetAccountName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetAccountName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetAccountName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetAccountName(ctx, req.(*SetAccountNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetAvgPriceMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAvgPriceModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetAvgPriceMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetAvgPriceMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetAvgPriceMode(ctx, req.(*SetAvgPriceModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetAvgPriceVWAPDelta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAvgPriceVWAPDeltaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetAvgPriceVWAPDelta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetAvgPriceVWAPDelta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetAvgPriceVWAPDelta(ctx, req.(*SetAvgPriceVWAPDeltaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetBalanceToMaintain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBalanceToMaintainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetBalanceToMaintain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetBalanceToMaintain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetBalanceToMaintain(ctx, req.(*SetBalanceToMaintainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetBlocksToAverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlocksToAverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetBlocksToAverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetBlocksToAverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetBlocksToAverage(ctx, req.(*SetBlocksToAverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetDontWaitForTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDontWaitForTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetDontWaitForTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetDontWaitForTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetDontWaitForTickets(ctx, req.(*SetDontWaitForTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetExpiryDelta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExpiryDeltaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetExpiryDelta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetExpiryDelta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetExpiryDelta(ctx, req.(*SetExpiryDeltaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetFeeSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFeeSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetFeeSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetFeeSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetFeeSource(ctx, req.(*SetFeeSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetFeeTargetScaling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFeeTargetScalingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetFeeTargetScaling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetFeeTargetScaling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetFeeTargetScaling(ctx, req.(*SetFeeTargetScalingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMinFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMinFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMinFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMinFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMinFee(ctx, req.(*SetMinFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMinPriceScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMinPriceScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMinPriceScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMinPriceScale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMinPriceScale(ctx, req.(*SetMinPriceScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMaxFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaxFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMaxFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMaxFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMaxFee(ctx, req.(*SetMaxFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMaxPerBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaxPerBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMaxPerBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMaxPerBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMaxPerBlock(ctx, req.(*SetMaxPerBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMaxPriceAbsolute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaxPriceAbsoluteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMaxPriceAbsolute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMaxPriceAbsolute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMaxPriceAbsolute(ctx, req.(*SetMaxPriceAbsoluteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMaxPriceRelative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaxPriceRelativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMaxPriceRelative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMaxPriceRelative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMaxPriceRelative(ctx, req.(*SetMaxPriceRelativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMaxPriceScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaxPriceScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMaxPriceScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMaxPriceScale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMaxPriceScale(ctx, req.(*SetMaxPriceScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMaxInMempool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaxInMempoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMaxInMempool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMaxInMempool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMaxInMempool(ctx, req.(*SetMaxInMempoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetPoolAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPoolAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetPoolAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetPoolAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetPoolAddress(ctx, req.(*SetPoolAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetPoolFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPoolFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetPoolFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetPoolFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetPoolFees(ctx, req.(*SetPoolFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetSpreadTicketPurchases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpreadTicketPurchasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetSpreadTicketPurchases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetSpreadTicketPurchases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetSpreadTicketPurchases(ctx, req.(*SetSpreadTicketPurchasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetTicketAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTicketAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetTicketAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetTicketAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetTicketAddress(ctx, req.(*SetTicketAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetTxFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTxFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetTxFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetTxFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetTxFee(ctx, req.(*SetTxFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TicketBuyerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.TicketBuyerService",
	HandlerType: (*TicketBuyerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTicketPurchase",
			Handler:    _TicketBuyerService_StartTicketPurchase_Handler,
		},
		{
			MethodName: "StopTicketPurchase",
			Handler:    _TicketBuyerService_StopTicketPurchase_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _TicketBuyerService_Config_Handler,
		},
		{
			MethodName: "SetAccountName",
			Handler:    _TicketBuyerService_SetAccountName_Handler,
		},
		{
			MethodName: "SetAvgPriceMode",
			Handler:    _TicketBuyerService_SetAvgPriceMode_Handler,
		},
		{
			MethodName: "SetAvgPriceVWAPDelta",
			Handler:    _TicketBuyerService_SetAvgPriceVWAPDelta_Handler,
		},
		{
			MethodName: "SetBalanceToMaintain",
			Handler:    _TicketBuyerService_SetBalanceToMaintain_Handler,
		},
		{
			MethodName: "SetBlocksToAverage",
			Handler:    _TicketBuyerService_SetBlocksToAverage_Handler,
		},
		{
			MethodName: "SetDontWaitForTickets",
			Handler:    _TicketBuyerService_SetDontWaitForTickets_Handler,
		},
		{
			MethodName: "SetExpiryDelta",
			Handler:    _TicketBuyerService_SetExpiryDelta_Handler,
		},
		{
			MethodName: "SetFeeSource",
			Handler:    _TicketBuyerService_SetFeeSource_Handler,
		},
		{
			MethodName: "SetFeeTargetScaling",
			Handler:    _TicketBuyerService_SetFeeTargetScaling_Handler,
		},
		{
			MethodName: "SetMinFee",
			Handler:    _TicketBuyerService_SetMinFee_Handler,
		},
		{
			MethodName: "SetMinPriceScale",
			Handler:    _TicketBuyerService_SetMinPriceScale_Handler,
		},
		{
			MethodName: "SetMaxFee",
			Handler:    _TicketBuyerService_SetMaxFee_Handler,
		},
		{
			MethodName: "SetMaxPerBlock",
			Handler:    _TicketBuyerService_SetMaxPerBlock_Handler,
		},
		{
			MethodName: "SetMaxPriceAbsolute",
			Handler:    _TicketBuyerService_SetMaxPriceAbsolute_Handler,
		},
		{
			MethodName: "SetMaxPriceRelative",
			Handler:    _TicketBuyerService_SetMaxPriceRelative_Handler,
		},
		{
			MethodName: "SetMaxPriceScale",
			Handler:    _TicketBuyerService_SetMaxPriceScale_Handler,
		},
		{
			MethodName: "SetMaxInMempool",
			Handler:    _TicketBuyerService_SetMaxInMempool_Handler,
		},
		{
			MethodName: "SetPoolAddress",
			Handler:    _TicketBuyerService_SetPoolAddress_Handler,
		},
		{
			MethodName: "SetPoolFees",
			Handler:    _TicketBuyerService_SetPoolFees_Handler,
		},
		{
			MethodName: "SetSpreadTicketPurchases",
			Handler:    _TicketBuyerService_SetSpreadTicketPurchases_Handler,
		},
		{
			MethodName: "SetTicketAddress",
			Handler:    _TicketBuyerService_SetTicketAddress_Handler,
		},
		{
			MethodName: "SetTxFee",
			Handler:    _TicketBuyerService_SetTxFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4957 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x3c, 0x4d, 0x6f, 0xe4, 0x46,
	0x76, 0xa1, 0x5a, 0x5f, 0xf3, 0xf4, 0xd5, 0xa2, 0xbe, 0x5a, 0x9c, 0x2f, 0x9b, 0xf6, 0x8c, 0x67,
	0xd7, 0xd9, 0x59, 0x5b, 0xeb, 0xec, 0x3a, 0x59, 0xc7, 0xb6, 0xe6, 0xcb, 0xd6, 0x7a, 0x34, 0x56,
	0x28, 0xd9, 0xe3, 0xec, 0x06, 0x69, 0x50, 0xdd, 0x35, 0x12, 0x57, 0xdd, 0x64, 0x9b, 0x64, 0xcf,
	0x47, 0x3e, 0x00, 0xc3, 0x40, 0x8e, 0xb9, 0x04, 0x09, 0xb0, 0x48, 0xb0, 0xf7, 0x00, 0xc9, 0x21,
	0x40, 0x80, 0x24, 0x40, 0x4e, 0xf9, 0x33, 0x01, 0x72, 0x0a, 0x90, 0x43, 0xce, 0xfb, 0xaa, 0xea,
	0x15, 0x59, 0x45, 0x16, 0x5b, 0x92, 0xf7, 0x32, 0xd3, 0x7c, 0xef, 0xd5, 0xab, 0x57, 0x55, 0xef,
	0xbb, 0x6a, 0x06, 0xae, 0x84, 0xa3, 0xe8, 0xee, 0x28, 0x4d, 0xf2, 0xc4, 0xbd, 0xf2, 0x22, 0x1c,
	0x0c, 0x58, 0x9e, 0x8e, 0x7a, 0x7e, 0x1b, 0x96, 0xbf, 0x64, 0x69, 0x16, 0x25, 0x71, 0xc0, 0xbe,
	0x1e, 0xb3, 0x2c, 0xf7, 0xff, 0xcb, 0x81, 0x95, 0x02, 0x94, 0x8d, 0x92, 0x38, 0x63, 0xee, 0x2d,
	0x58, 0x7e, 0x2e, 0x41, 0xdd, 0x2c, 0x4f, 0xa3, 0xf8, 0xa4, 0xe3, 0xbc, 0xe6, 0xdc, 0xb9, 0x12,
	0x2c, 0x11, 0xf4, 0x50, 0x00, 0xdd, 0x75, 0x98, 0x19, 0x86, 0xbf, 0x4c, 0xd2, 0xce, 0x14, 0x62,
	0x97, 0x02, 0xf9, 0x21, 0xa0, 0x51, 0x8c, 0xd0, 0x16, 0x41, 0xf9, 0x07, 0x87, 0x8e, 0xc2, 0xbc,
	0x77, 0xda, 0x99, 0x96, 0x50, 0xf1, 0xe1, 0xde, 0x00, 0x18, 0xa5, 0x2c, 0x65, 0x03, 0x16, 0x66,
	0xac, 0x33, 0x23, 0x26, 0xd1, 0x20, 0x5c, 0x90, 0xe3, 0x71, 0x34, 0xe8, 0x77, 0x87, 0x2c, 0x0f,
	0xfb, 0x61, 0x1e, 0x76, 0x66, 0xa5, 0x20, 0x02, 0xba, 0x4f, 0x40, 0xff, 0x57, 0xd3, 0xe0, 0x1e,
	0xa5, 0x61, 0x9c, 0x85, 0xbd, 0x1c, 0xc5, 0x7b, 0x80, 0xf0, 0x68, 0x90, 0xb9, 0x2e, 0x4c, 0x9f,
	0x86, 0xd9, 0xa9, 0x10, 0x7e, 0x31, 0x10, 0xbf, 0xdd, 0xd7, 0x60, 0x21, 0x2f, 0x29, 0x85, 0xe4,
	0x8b, 0x81, 0x0e, 0x72, 0x7f, 0x0a, 0xb3, 0x7d, 0x76, 0x1c, 0xe5, 0x19, 0x2e, 0xa0, 0x75, 0x67,
	0x61, 0xe7, 0x8d, 0xbb, 0xc5, 0xf6, 0xdd, 0xad, 0x4f, 0x72, 0x77, 0x2f, 0x1e, 0x8d, 0xf3, 0x80,
	0x86, 0xb8, 0x1f, 0xc2, 0x5c, 0x2f, 0x65, 0x7d, 0x3e, 0x7a, 0x5a, 0x8c, 0x7e, 0x73, 0xf2, 0xe8,
	0xcf, 0xc7, 0x39, 0x1f, 0xae, 0x06, 0xb9, 0x6d, 0x68, 0x3d, 0x63, 0x72, 0x27, 0x5a, 0x01, 0xff,
	0xe9, 0x5e, 0x83, 0x2b, 0x79, 0x34, 0xc4, 0x93, 0x0a, 0x87, 0x23, 0xb1, 0xfa, 0x56, 0x50, 0x02,
	0xbc, 0xaf, 0x61, 0x46, 0x08, 0xc0, 0xf7, 0x37, 0x8a, 0xfb, 0xec, 0xa5, 0x58, 0x2c, 0xee, 0xaf,
	0xf8, 0x70, 0xbf, 0x07, 0x6d, 0xdc, 0xcd, 0xe7, 0x51, 0x32, 0xce, 0xba, 0x61, 0xaf, 0x97, 0x8c,
	0xe3, 0x9c, 0x0e, 0x6b, 0x45, 0xc1, 0x77, 0x25, 0xd8, 0x7d, 0x0b, 0x56, 0x4a, 0xd2, 0xa1, 0xa0,
	0x6c, 0x89, 0xd9, 0x96, 0x0b, 0x4a, 0x01, 0xf5, 0xfe, 0xc9, 0x81, 0x59, 0x29, 0x76, 0xc3, 0xa4,
	0x1d, 0x98, 0x33, 0xe7, 0x52, 0x9f, 0xae, 0x07, 0xf3, 0x51, 0x9c, 0xb3, 0x34, 0x0e, 0x07, 0x82,
	0xf9, 0x7c, 0x50, 0x7c, 0xbb, 0x9b, 0x30, 0x4b, 0xd3, 0x4e, 0x8b, 0x69, 0xe9, 0x4b, 0x70, 0xeb,
	0xf7, 0x53, 0x96, 0x65, 0xa4, 0x1f, 0xea, 0xd3, 0x7d, 0x03, 0x96, 0x12, 0x21, 0x47, 0x37, 0xeb,
	0xa5, 0xd1, 0x28, 0x17, 0xbb, 0xb3, 0x18, 0x2c, 0x4a, 0xe0, 0xa1, 0x80, 0xf9, 0xff, 0xe0, 0xc0,
	0xe2, 0xbd, 0x41, 0xd2, 0x3b, 0x9b, 0xa4, 0x14, 0x38, 0xf7, 0x29, 0x8b, 0x4e, 0x4e, 0xa5, 0xc0,
	0x33, 0x01, 0x7d, 0x99, 0x7b, 0xdf, 0xaa, 0xec, 0xbd, 0xbb, 0x0b, 0x8b, 0x9a, 0xde, 0xa8, 0x03,
	0xbf, 0x3e, 0xf1, 0xc0, 0x03, 0x63, 0x88, 0xff, 0x39, 0x2c, 0xd3, 0xfe, 0xdf, 0x0b, 0x07, 0x61,
	0xdc, 0x63, 0xfa, 0xe6, 0x39, 0xe6, 0xe6, 0xe1, 0x72, 0xf3, 0x24, 0x0f, 0x07, 0xdd, 0x63, 0x49,
	0x2a, 0x64, 0x6d, 0x21, 0x43, 0x0e, 0xa4, 0xe1, 0xfe, 0x12, 0x2c, 0x1c, 0xa0, 0x69, 0x2a, 0xe3,
	0x5e, 0x86, 0x45, 0xf9, 0x29, 0x0d, 0x9b, 0x9b, 0xff, 0x13, 0x96, 0xbf, 0x48, 0xd2, 0x33, 0x45,
	0xf1, 0x3e, 0xac, 0x14, 0x90, 0xd2, 0xfa, 0xb9, 0x7c, 0xcf, 0x59, 0x37, 0x96, 0x18, 0x92, 0x64,
	0x49, 0x42, 0x89, 0xdc, 0xff, 0x7d, 0x58, 0x27, 0xd9, 0x9f, 0x8c, 0x87, 0xc7, 0x2c, 0x25, 0x8e,
	0xee, 0xeb, 0xb0, 0x48, 0x22, 0x77, 0xe3, 0x70, 0xc8, 0xc8, 0x75, 0x2c, 0x10, 0xec, 0x09, 0x82,
	0xfc, 0x0f, 0x61, 0xa3, 0x32, 0x54, 0x9f, 0x9a, 0xc6, 0x0a, 0x4c, 0x39, 0xb5, 0x46, 0xee, 0xaf,
	0xc2, 0x0a, 0x8d, 0xcf, 0xd4, 0x3a, 0xfe, 0xa3, 0x05, 0xed, 0x12, 0x46, 0xec, 0x3e, 0x82, 0x79,
	0x1a, 0x98, 0x21, 0xa3, 0xaa, 0x31, 0x57, 0xc9, 0x15, 0x20, 0x28, 0x06, 0xb9, 0xbf, 0x0b, 0x6e,
	0x6f, 0x9c, 0xa6, 0x0c, 0xe5, 0x39, 0xe6, 0x4a, 0xd4, 0x15, 0xaa, 0x23, 0x9d, 0x46, 0x9b, 0x30,
	0x42, 0xbb, 0x3e, 0xe5, 0x6a, 0xf4, 0x0e, 0xac, 0x57, 0xa8, 0xa5, 0x52, 0xb5, 0x84, 0x52, 0xb9,
	0x06, 0xbd, 0xc0, 0x78, 0xdf, 0x4e, 0xc1, 0x9c, 0x32, 0xc0, 0x8b, 0xad, 0xbd, 0xb6, 0xbd, 0x53,
	0xb5, 0xed, 0xad, 0x6b, 0x4a, 0xab, 0xae, 0x29, 0x7c, 0x69, 0xec, 0xa5, 0xb4, 0xbd, 0xee, 0x19,
	0x7b, 0xd5, 0xed, 0x15, 0xb6, 0xb7, 0x14, 0xb4, 0x15, 0xe6, 0x33, 0xf6, 0xea, 0xbe, 0x10, 0x0e,
	0xa9, 0x95, 0xa5, 0x6a, 0xd4, 0x33, 0x92, 0x5a, 0x61, 0x0c, 0xea, 0xe1, 0x28, 0x49, 0x73, 0xd6,
	0xd7, 0xa8, 0x67, 0x89, 0x9a, 0x30, 0x8a, 0xda, 0xff, 0x0a, 0xd6, 0x03, 0xc6, 0xd7, 0xa2, 0xf6,
	0x9f, 0x14, 0xe9, 0x82, 0x1b, 0xb2, 0x0d, 0xf3, 0x31, 0x7b, 0xa1, 0x6f, 0xc6, 0x1c, 0x7e, 0x0b,
	0x3d, 0xdb, 0x82, 0x8d, 0x0a, 0x67, 0xb2, 0x83, 0x1d, 0x58, 0xc2, 0xdf, 0xbd, 0x30, 0xd6, 0x94,
	0xf6, 0x98, 0x9d, 0x44, 0xb1, 0x3a, 0x32, 0x47, 0x1c, 0xd9, 0x82, 0x80, 0xc9, 0xb3, 0xf2, 0xff,
	0x10, 0x96, 0xd5, 0x18, 0x52, 0xaf, 0xb7, 0x61, 0x35, 0x15, 0x90, 0x18, 0xd7, 0x99, 0x9f, 0xa6,
	0xc9, 0xf8, 0xe4, 0x94, 0x46, 0xb6, 0x0b, 0xc4, 0x91, 0x84, 0xfb, 0x4f, 0xc1, 0x7d, 0x82, 0xdb,
	0x5a, 0x59, 0x23, 0x0f, 0x80, 0x61, 0x96, 0x8d, 0x4e, 0x53, 0x1e, 0x00, 0xa5, 0x4f, 0xd2, 0x20,
	0x17, 0x38, 0x6d, 0xff, 0x03, 0x58, 0x33, 0x18, 0x5f, 0xce, 0x94, 0xfe, 0xde, 0x21, 0xb9, 0xa4,
	0x53, 0x55, 0x72, 0x35, 0xbb, 0xa1, 0x1f, 0xc3, 0xf4, 0x19, 0xfa, 0x79, 0x21, 0xc9, 0xf2, 0x8e,
	0xaf, 0xd9, 0x53, 0x9d, 0xcd, 0xdd, 0xcf, 0x90, 0x32, 0x10, 0xf4, 0xb8, 0xe5, 0xd3, 0xfc, 0x0b,
	0x63, 0x46, 0xfb, 0xde, 0xde, 0xc1, 0x3b, 0xef, 0xbc, 0xf7, 0x5e, 0xf7, 0xe1, 0x57, 0x47, 0x0f,
	0x83, 0x27, 0xbb, 0x8f, 0xdb, 0xbf, 0xa3, 0x43, 0xf7, 0x9e, 0x10, 0xd4, 0xf1, 0x9f, 0xd0, 0xd2,
	0x14, 0x53, 0x5a, 0x9a, 0x16, 0x12, 0x1c, 0x33, 0x24, 0x5c, 0xc7, 0xed, 0x1c, 0x1f, 0x0f, 0xa2,
	0x1e, 0x57, 0x3b, 0xda, 0xac, 0x2b, 0x12, 0x82, 0xea, 0xe6, 0xff, 0x8b, 0x03, 0x5b, 0x7b, 0x42,
	0xfd, 0x0e, 0xd2, 0xe8, 0x79, 0x98, 0x33, 0x04, 0x5e, 0xf4, 0x24, 0x9a, 0xa3, 0xda, 0x6d, 0x1e,
	0x39, 0x05, 0x3b, 0xa1, 0xec, 0x2f, 0xa2, 0x67, 0xc2, 0xe0, 0x30, 0x4b, 0x19, 0x15, 0xb3, 0x3c,
	0x8d, 0x9e, 0xf1, 0x28, 0x23, 0xb5, 0x42, 0x58, 0xd9, 0x7c, 0x40, 0x5f, 0xee, 0x55, 0xb8, 0xc2,
	0xff, 0xee, 0x3e, 0x4b, 0x93, 0xa1, 0x30, 0xa9, 0x99, 0x60, 0x9e, 0x03, 0x1e, 0xe1, 0xb7, 0xef,
	0x41, 0xa7, 0x2e, 0x31, 0x69, 0xf1, 0xb7, 0x0e, 0xac, 0x49, 0xa4, 0x0c, 0x76, 0x17, 0x5d, 0x0a,
	0x0a, 0x42, 0x11, 0x53, 0x7a, 0x32, 0xfa, 0xd2, 0x04, 0x6c, 0x35, 0x0b, 0x38, 0x5d, 0x11, 0x70,
	0x13, 0xd6, 0x4d, 0x19, 0x48, 0xb8, 0x18, 0x96, 0xc9, 0xd5, 0x5c, 0xd2, 0x9e, 0x7f, 0x0f, 0x36,
	0x53, 0x1c, 0x11, 0x61, 0x46, 0x84, 0x8e, 0x23, 0x7e, 0x16, 0xa5, 0xc3, 0x50, 0x06, 0x58, 0x19,
	0x9c, 0x37, 0x14, 0xf6, 0xbe, 0x8e, 0xc4, 0xf9, 0x56, 0x8a, 0xf9, 0x48, 0x4f, 0x30, 0x3d, 0x11,
	0x2e, 0x4f, 0xcc, 0xd3, 0x0a, 0xe4, 0x07, 0x0f, 0xea, 0xd9, 0x88, 0xc5, 0xfd, 0xf0, 0x78, 0xa0,
	0x62, 0x68, 0x09, 0xe0, 0x69, 0x50, 0x34, 0x44, 0x9e, 0xe3, 0x94, 0x75, 0x53, 0xf6, 0x22, 0x4c,
	0xfb, 0x2a, 0x0d, 0x52, 0xe0, 0x40, 0x40, 0xfd, 0x5f, 0x4d, 0xc1, 0xe6, 0x27, 0x2c, 0xd7, 0x42,
	0x7c, 0x61, 0x3c, 0x77, 0x61, 0x0d, 0x33, 0x84, 0x34, 0xc7, 0xc8, 0xab, 0x87, 0x0d, 0x79, 0x10,
	0xab, 0x0a, 0x55, 0xc6, 0x8d, 0x1d, 0xd8, 0xa8, 0xd2, 0x97, 0xd9, 0xc8, 0x6a, 0xb0, 0x66, 0x8e,
	0x90, 0xa9, 0xc9, 0xf7, 0x61, 0x15, 0x45, 0xae, 0xcc, 0xd0, 0x12, 0x33, 0xac, 0x48, 0x44, 0xc9,
	0x1f, 0xe5, 0x31, 0x69, 0x25, 0x77, 0x79, 0x92, 0xab, 0x3a, 0xb5, 0xe4, 0xfd, 0x21, 0x5c, 0xc5,
	0xa4, 0x3d, 0x1a, 0x8e, 0x87, 0xb8, 0x05, 0x3d, 0x1e, 0xce, 0x8c, 0x3c, 0x47, 0xaa, 0xe8, 0x36,
	0x91, 0x04, 0x82, 0x42, 0xdf, 0x06, 0xff, 0x5f, 0xd1, 0xcc, 0x6a, 0x5b, 0x43, 0x67, 0xf2, 0x08,
	0x5c, 0x1c, 0xc8, 0xfd, 0xa5, 0xce, 0x92, 0x6f, 0xcd, 0xc2, 0xce, 0x96, 0xe6, 0x4c, 0xf4, 0x9c,
	0x2d, 0x58, 0x15, 0x43, 0x74, 0x7e, 0xee, 0x01, 0xac, 0x8f, 0x63, 0x0b, 0xa7, 0xa9, 0x8b, 0x24,
	0x61, 0x6b, 0x34, 0xd4, 0x90, 0x7a, 0x1d, 0x6b, 0x88, 0xa8, 0x77, 0xc6, 0xb8, 0xa5, 0x15, 0x4a,
	0xeb, 0x1f, 0xc0, 0x9a, 0x01, 0xa5, 0x65, 0xa0, 0x5f, 0xce, 0x05, 0xb8, 0x3b, 0xe2, 0x70, 0xd2,
	0xb0, 0x85, 0xbc, 0x24, 0x6d, 0x4a, 0x2a, 0x7d, 0x17, 0xda, 0x87, 0x79, 0x78, 0xc6, 0xf6, 0xe2,
	0x67, 0x89, 0x9a, 0xe5, 0xdf, 0xa7, 0x60, 0x55, 0x03, 0xd2, 0x24, 0x68, 0x77, 0xa3, 0x24, 0x19,
	0x74, 0xb3, 0xe8, 0xcf, 0x18, 0xd9, 0xca, 0x3c, 0x07, 0x1c, 0xe2, 0x37, 0xf7, 0x3a, 0xb8, 0x44,
	0x2c, 0x8c, 0x86, 0x82, 0x26, 0x8f, 0x5e, 0x92, 0x5f, 0x5a, 0x42, 0xf0, 0xbe, 0x84, 0x1e, 0x45,
	0x2f, 0x39, 0x5d, 0xf2, 0x22, 0x36, 0xe8, 0x64, 0x61, 0xb6, 0x84, 0x60, 0x8d, 0x8e, 0xe7, 0xe6,
	0xa4, 0xe1, 0x94, 0x05, 0x14, 0xdf, 0x3c, 0x67, 0x1e, 0x60, 0xe6, 0x47, 0xf1, 0x5e, 0xfc, 0xe6,
	0xc6, 0xf5, 0x3c, 0xc1, 0x30, 0x4e, 0x61, 0x5d, 0x7e, 0xf0, 0x45, 0x0f, 0xa3, 0x2c, 0x43, 0xf0,
	0x9c, 0x00, 0xd3, 0x17, 0xf7, 0x9e, 0x58, 0x45, 0x24, 0x67, 0x88, 0x98, 0x97, 0xde, 0x93, 0x3e,
	0x39, 0x86, 0xbd, 0x1c, 0x71, 0x7b, 0xee, 0x5c, 0x91, 0x18, 0xfa, 0x2c, 0xd3, 0x98, 0x6c, 0x7c,
	0x9c, 0x45, 0xfd, 0x57, 0x1d, 0xd0, 0xd2, 0x98, 0x43, 0x09, 0xe3, 0xe5, 0xeb, 0xd6, 0xfd, 0xd3,
	0x30, 0x3e, 0x61, 0x07, 0x85, 0x83, 0x53, 0x76, 0xf8, 0x3e, 0xb4, 0x78, 0x18, 0x70, 0x44, 0xa4,
	0xba, 0xad, 0xa9, 0x44, 0xc3, 0x80, 0xbb, 0xdc, 0xb9, 0xf2, 0x21, 0xdc, 0x55, 0x25, 0x58, 0x75,
	0x6a, 0x5e, 0x54, 0x7a, 0xca, 0x25, 0x84, 0x96, 0xc3, 0x38, 0x19, 0x4f, 0x3d, 0x34, 0x32, 0x69,
	0x81, 0x4b, 0x08, 0x2d, 0xc9, 0xfc, 0x1b, 0xd0, 0x42, 0xce, 0xee, 0x02, 0xcc, 0x1d, 0x04, 0x7b,
	0x5f, 0xee, 0x1e, 0x3d, 0xc4, 0x80, 0x07, 0x30, 0x7b, 0xf0, 0xc5, 0xbd, 0xc7, 0x7b, 0xf7, 0x31,
	0xcc, 0xa1, 0x8f, 0xaf, 0x4b, 0x44, 0x6e, 0xf4, 0x1b, 0x74, 0x33, 0x8f, 0xc6, 0xb1, 0xae, 0xaa,
	0xe7, 0xc7, 0x68, 0xbe, 0x73, 0x61, 0x7a, 0x82, 0xda, 0x49, 0x25, 0x95, 0x2a, 0x15, 0x04, 0x50,
	0xd6, 0x71, 0x13, 0xfc, 0x6c, 0x6b, 0x82, 0x9f, 0x75, 0x3f, 0x00, 0x2f, 0x8a, 0x7b, 0x83, 0x71,
	0x9f, 0x75, 0x0b, 0x47, 0xd9, 0x4b, 0xa2, 0xf8, 0x18, 0xa5, 0xce, 0x28, 0xb2, 0x75, 0x88, 0x62,
	0x8f, 0x08, 0xee, 0x2b, 0x3c, 0x77, 0x75, 0x6a, 0x74, 0x4f, 0x2c, 0x59, 0xd5, 0x6e, 0x33, 0x62,
	0xe0, 0x1a, 0x21, 0xe5, 0x76, 0x50, 0x09, 0xf7, 0x6f, 0x2d, 0xd8, 0xaa, 0x6d, 0x01, 0x99, 0xc8,
	0x9f, 0x40, 0x3b, 0x63, 0x03, 0xd6, 0xe3, 0x99, 0xa6, 0xac, 0xfb, 0x54, 0xa6, 0xff, 0xae, 0x76,
	0xde, 0x0d, 0xa3, 0xef, 0x1e, 0x50, 0x65, 0x4b, 0x55, 0xf8, 0x8a, 0x62, 0x25, 0xbf, 0x33, 0x61,
	0xe5, 0x42, 0x03, 0x8d, 0x6d, 0x5c, 0x10, 0x30, 0xda, 0xc5, 0x3b, 0xd0, 0xa6, 0x85, 0x8c, 0xce,
	0xd4, 0x5a, 0xa4, 0x12, 0x2c, 0x4b, 0xf8, 0xc1, 0x99, 0x5c, 0x86, 0xf7, 0xbf, 0x0e, 0x2c, 0x9b,
	0x13, 0xf2, 0xf2, 0x5c, 0x73, 0x5e, 0x7a, 0x94, 0x58, 0xd1, 0xe0, 0xc2, 0x87, 0xa3, 0x28, 0x54,
	0xec, 0xca, 0x8a, 0x5b, 0xda, 0xfa, 0x82, 0x84, 0xed, 0x89, 0xba, 0xbb, 0xac, 0xa0, 0x5b, 0x46,
	0x05, 0xcd, 0xdd, 0x48, 0x21, 0xdb, 0xb4, 0x60, 0x3f, 0x3f, 0x22, 0xa9, 0x38, 0x5f, 0xee, 0xe3,
	0x79, 0xb5, 0xc7, 0x2b, 0x5b, 0xea, 0x3c, 0x2c, 0x10, 0xec, 0x28, 0x92, 0xe5, 0x04, 0x8f, 0xfc,
	0xc5, 0x29, 0x0b, 0x8b, 0x9f, 0x0f, 0x16, 0x39, 0x50, 0x9d, 0x2c, 0x77, 0x11, 0x79, 0xca, 0x98,
	0x30, 0xfb, 0x99, 0x40, 0xfc, 0xf6, 0xbf, 0x99, 0x85, 0xab, 0xa8, 0x3c, 0x59, 0x9e, 0x8e, 0x7b,
	0xb9, 0x45, 0x81, 0xd1, 0x7c, 0xb2, 0x64, 0x9c, 0xf6, 0x58, 0xd7, 0xd4, 0xe3, 0x25, 0x09, 0x55,
	0x85, 0xd1, 0x77, 0x4b, 0x08, 0x30, 0xce, 0xc3, 0x33, 0x86, 0xc7, 0xc2, 0xd2, 0xee, 0xd9, 0x31,
	0xe9, 0xf4, 0x3c, 0x42, 0x0e, 0x58, 0xfa, 0xd9, 0xb1, 0xfb, 0x97, 0xe0, 0xa9, 0xe6, 0x81, 0x38,
	0x74, 0xbe, 0xff, 0xe1, 0xe0, 0x24, 0x49, 0xa3, 0xfc, 0x54, 0x26, 0x39, 0xcb, 0x3b, 0x1f, 0xe9,
	0x2e, 0xa3, 0x79, 0x1d, 0xd4, 0xc4, 0x39, 0x54, 0x7c, 0x76, 0x15, 0x9b, 0xa0, 0x93, 0x34, 0x60,
	0xdc, 0x5f, 0x80, 0x1b, 0xe3, 0x8c, 0xa4, 0x3a, 0x4a, 0x73, 0x67, 0x84, 0xe6, 0xfe, 0xe0, 0x52,
	0xd3, 0x06, 0x6d, 0x64, 0x24, 0xed, 0x45, 0xa9, 0xed, 0x09, 0x56, 0xad, 0x92, 0x71, 0x1f, 0xe9,
	0xa2, 0x58, 0x6c, 0x88, 0x38, 0xb5, 0x85, 0x9d, 0xf7, 0x2f, 0xc5, 0xfc, 0x41, 0x39, 0x3e, 0x58,
	0x95, 0x3c, 0x35, 0x90, 0x37, 0x80, 0xd5, 0x1a, 0xdd, 0x84, 0xec, 0xbc, 0x29, 0xef, 0xe4, 0x7a,
	0x20, 0x7e, 0x75, 0xa9, 0xbf, 0xa8, 0x22, 0x94, 0x84, 0x52, 0x77, 0xd2, 0xfb, 0x8b, 0xa2, 0xef,
	0xf4, 0x73, 0x58, 0xd0, 0x57, 0xe6, 0xfc, 0x96, 0x2b, 0xd3, 0x99, 0x69, 0x56, 0x34, 0xa5, 0x5b,
	0x91, 0xff, 0x1e, 0x74, 0x9a, 0xce, 0xd9, 0x5d, 0x81, 0x85, 0x2f, 0x9e, 0x1c, 0x1e, 0x3c, 0xbc,
	0xbf, 0xf7, 0x68, 0xef, 0xe1, 0x03, 0xf4, 0xee, 0x73, 0xd0, 0xda, 0x7d, 0xcc, 0x2b, 0x98, 0xff,
	0x77, 0xe0, 0x9a, 0x5d, 0x18, 0x72, 0x60, 0xef, 0xf2, 0x3c, 0x26, 0x8b, 0x4e, 0x2a, 0x89, 0x0c,
	0xb9, 0x81, 0x35, 0x85, 0xd3, 0x86, 0xba, 0x1f, 0xc1, 0x35, 0xe9, 0x95, 0x8a, 0x7e, 0x1d, 0x69,
	0xb2, 0x21, 0xf7, 0xb6, 0xa0, 0x31, 0x1d, 0x0e, 0xf9, 0x2c, 0xcc, 0x07, 0x25, 0x03, 0x73, 0x9c,
	0xf4, 0x1a, 0xab, 0x02, 0x65, 0xd0, 0xa3, 0xd3, 0xe6, 0x1b, 0x84, 0x86, 0x85, 0x42, 0x92, 0xac,
	0x22, 0x27, 0x91, 0x79, 0xc2, 0x5a, 0x81, 0x3c, 0x14, 0x38, 0x9e, 0x9e, 0xf8, 0x7f, 0xeb, 0xc0,
	0x26, 0xff, 0xb4, 0x98, 0xfd, 0x79, 0xe5, 0x09, 0xda, 0x7b, 0xc6, 0xd2, 0x28, 0x1c, 0x20, 0x1f,
	0x73, 0x53, 0xa4, 0xda, 0x6c, 0x94, 0x58, 0x7d, 0x5b, 0xd0, 0x4d, 0x45, 0x71, 0xe1, 0x20, 0x99,
	0x6c, 0xdf, 0x2e, 0x05, 0x8b, 0x02, 0xb8, 0x27, 0x61, 0xfe, 0xd7, 0xb0, 0x55, 0x93, 0x8a, 0x4e,
	0xa2, 0xd2, 0x19, 0x76, 0xea, 0x9d, 0xe1, 0xf7, 0x60, 0xb3, 0x38, 0x2b, 0x73, 0xaa, 0x29, 0x31,
	0x55, 0x71, 0x92, 0x7b, 0xfa, 0x94, 0x3f, 0x83, 0xed, 0x03, 0x5e, 0x81, 0x66, 0xa7, 0x96, 0xbd,
	0xf8, 0x01, 0xb8, 0x8d, 0x87, 0xbf, 0x5a, 0x3b, 0x7a, 0xff, 0x13, 0xf0, 0x6c, 0xbc, 0x68, 0x05,
	0x17, 0x0f, 0x27, 0xfe, 0x37, 0x2d, 0xd8, 0x3c, 0x40, 0x27, 0x8b, 0x34, 0x4c, 0xe6, 0xb7, 0xd9,
	0x6f, 0x5f, 0x08, 0xdf, 0x84, 0x05, 0x51, 0x48, 0x75, 0x07, 0xd1, 0x30, 0x52, 0xfa, 0x04, 0x02,
	0xf4, 0x98, 0x43, 0x26, 0x78, 0x72, 0xa9, 0x49, 0x0d, 0x9e, 0x1c, 0xfd, 0x03, 0x25, 0xdb, 0x66,
	0x27, 0x78, 0x49, 0x42, 0xa9, 0x3d, 0xc0, 0xa7, 0xc7, 0xba, 0xb2, 0x2b, 0x81, 0x19, 0xe5, 0xa5,
	0x80, 0x20, 0x5a, 0x20, 0x8f, 0x75, 0x22, 0x07, 0x56, 0x5c, 0xe6, 0x64, 0x33, 0x85, 0xc3, 0x14,
	0x0f, 0x95, 0x72, 0x63, 0x9c, 0xc8, 0x44, 0xa6, 0xea, 0xc8, 0x94, 0xfb, 0x11, 0x7e, 0x73, 0xd7,
	0x20, 0x72, 0xd3, 0x57, 0x94, 0xa9, 0xd2, 0x97, 0xbb, 0x01, 0xb3, 0xf9, 0x4b, 0x3e, 0x84, 0x32,
	0xd4, 0x99, 0xfc, 0x25, 0xd2, 0xf3, 0x66, 0x04, 0x89, 0xcd, 0x51, 0x0b, 0xaa, 0x7d, 0xcc, 0x21,
	0x88, 0xf6, 0x3f, 0x84, 0xad, 0xda, 0x09, 0xd0, 0x41, 0xf2, 0xfc, 0x4d, 0x8e, 0xe4, 0x67, 0xc8,
	0x64, 0x4a, 0xb3, 0x18, 0x50, 0xc9, 0xf1, 0xa9, 0x80, 0x61, 0x56, 0x79, 0xed, 0x71, 0x12, 0xf6,
	0x77, 0x45, 0x53, 0xf6, 0x41, 0x98, 0x87, 0x8f, 0xa2, 0x41, 0x8e, 0xae, 0x52, 0xd5, 0x14, 0x37,
	0xe1, 0x7a, 0x03, 0x9e, 0x52, 0xcb, 0xd7, 0xe1, 0xa6, 0xa6, 0x45, 0x4f, 0x92, 0x3c, 0x7a, 0x16,
	0xf5, 0x42, 0xbd, 0x92, 0xf5, 0x7f, 0x3d, 0x05, 0xaf, 0x35, 0xd3, 0x90, 0xb4, 0x1f, 0x63, 0x25,
	0x92, 0xe7, 0x61, 0xef, 0x14, 0x4f, 0x55, 0x14, 0x98, 0x2a, 0x05, 0x6b, 0xac, 0xe7, 0x96, 0x15,
	0xbd, 0x80, 0x66, 0xbc, 0xe8, 0xee, 0x33, 0x93, 0xc3, 0x94, 0x58, 0xf1, 0xb2, 0x02, 0x13, 0x61,
	0x53, 0xd5, 0xd7, 0xfa, 0xae, 0x55, 0x1f, 0x4f, 0x67, 0x2d, 0x1c, 0xd5, 0xbe, 0x4f, 0x0b, 0x29,
	0x3a, 0xf5, 0x81, 0x74, 0x06, 0x7f, 0xed, 0xc0, 0xf5, 0x43, 0xd4, 0xef, 0x3c, 0x46, 0xe5, 0xb1,
	0xed, 0xe0, 0x84, 0x24, 0x1d, 0x2b, 0xf8, 0x38, 0xe9, 0xc6, 0x7c, 0xd0, 0xab, 0x2e, 0x7a, 0x0e,
	0xce, 0x46, 0x58, 0xd4, 0x7c, 0xb0, 0x12, 0x27, 0x82, 0xd9, 0xab, 0x2f, 0x24, 0x98, 0x17, 0x71,
	0x25, 0xad, 0xa4, 0x94, 0x2d, 0x9a, 0x25, 0x45, 0x29, 0xa4, 0xf0, 0xff, 0x66, 0x0a, 0x6e, 0x34,
	0xc9, 0x73, 0x69, 0x27, 0x71, 0x91, 0x9c, 0xf3, 0x33, 0x98, 0x13, 0xf6, 0xcd, 0xe4, 0x75, 0x9f,
	0x99, 0x76, 0x4f, 0x96, 0x44, 0xa0, 0x71, 0x60, 0xa0, 0x38, 0x78, 0x5f, 0xc0, 0x1c, 0xc1, 0x2e,
	0x23, 0x25, 0x9a, 0xbd, 0xe6, 0x8c, 0x49, 0x48, 0x28, 0xbd, 0xbe, 0x7f, 0x1d, 0xae, 0xaa, 0xdb,
	0x06, 0x9b, 0x8e, 0xff, 0x1f, 0x86, 0x68, 0x3b, 0xfe, 0x52, 0x9d, 0xd4, 0x8b, 0x34, 0xe6, 0xed,
	0x3d, 0xf7, 0xd6, 0xa5, 0x7a, 0xee, 0xd3, 0x97, 0xea, 0xb9, 0xcf, 0x34, 0xf4, 0xdc, 0xff, 0xca,
	0x81, 0xb5, 0xfb, 0x29, 0xc3, 0xa0, 0xfd, 0x54, 0x1c, 0x97, 0x52, 0xd7, 0xb7, 0x61, 0x95, 0x1a,
	0xa8, 0xb5, 0x18, 0xd0, 0x96, 0x08, 0xad, 0xfc, 0xc5, 0xe0, 0xa5, 0x1a, 0x9f, 0xb5, 0x4a, 0x79,
	0x95, 0x30, 0x1a, 0x39, 0x96, 0x08, 0x19, 0x63, 0x7d, 0x2a, 0x8f, 0xc4, 0x6f, 0xde, 0x3d, 0x34,
	0xc5, 0x20, 0xdf, 0xf4, 0x31, 0x66, 0x96, 0xa8, 0x0a, 0xdf, 0x5d, 0x38, 0xde, 0xce, 0xd1, 0x39,
	0x10, 0x5f, 0x84, 0xde, 0x1f, 0x24, 0x99, 0xb9, 0x6a, 0x7f, 0x03, 0x37, 0x43, 0x87, 0x12, 0x31,
	0x82, 0x25, 0xe4, 0xe1, 0xcb, 0x28, 0x2b, 0xaf, 0x9a, 0xee, 0xc2, 0xba, 0x09, 0x26, 0x3d, 0x11,
	0xe1, 0x81, 0x43, 0x84, 0x4c, 0xf3, 0x01, 0x7d, 0xf9, 0xbf, 0x76, 0xa0, 0x73, 0xc8, 0x5b, 0x78,
	0x3c, 0x11, 0x64, 0x71, 0x36, 0xce, 0x82, 0x51, 0x4f, 0xad, 0x09, 0x5d, 0x1f, 0xdd, 0xb2, 0x75,
	0xcd, 0xac, 0x79, 0x99, 0xc0, 0x2a, 0x32, 0x79, 0x30, 0x3f, 0xce, 0xf8, 0x91, 0x17, 0xaa, 0x55,
	0x7c, 0x73, 0x1c, 0xdf, 0x11, 0x24, 0x57, 0xbb, 0x5b, 0x7c, 0xf3, 0xb4, 0xa6, 0xc7, 0x52, 0xd2,
	0x6b, 0x46, 0xf5, 0x9f, 0x0e, 0xf2, 0xaf, 0xc2, 0xb6, 0x45, 0x3c, 0xda, 0x83, 0xe7, 0xd0, 0x79,
	0x10, 0x65, 0xbd, 0x04, 0x33, 0x73, 0x92, 0x84, 0x65, 0xda, 0x79, 0xf4, 0x09, 0xd7, 0xd5, 0xee,
	0xd9, 0xf8, 0xda, 0xdb, 0x0a, 0xa1, 0x2e, 0xd9, 0x2e, 0xa9, 0x2c, 0x5c, 0x28, 0xcb, 0xbc, 0x24,
	0xd4, 0x6d, 0x78, 0x93, 0xf7, 0x7f, 0xb0, 0x3a, 0x38, 0x66, 0x47, 0x89, 0x88, 0x0d, 0x56, 0xd3,
	0x7e, 0x0b, 0x6e, 0x9d, 0x43, 0x57, 0x9e, 0xf4, 0x23, 0x96, 0xf7, 0x4e, 0x3f, 0x65, 0x61, 0x5f,
	0x0b, 0xa1, 0xff, 0x38, 0x05, 0xeb, 0x26, 0x9c, 0x8e, 0x1a, 0x33, 0xe2, 0x67, 0x1c, 0x8e, 0xb6,
	0x76, 0x2a, 0x51, 0x5d, 0xdd, 0xc7, 0xaf, 0x11, 0x92, 0x86, 0x49, 0x03, 0xfd, 0x21, 0xac, 0x63,
	0x4e, 0x93, 0xa1, 0x77, 0x60, 0x2f, 0xea, 0xb7, 0x89, 0xab, 0x02, 0xf7, 0x84, 0xbd, 0x28, 0xdb,
	0xb6, 0x3f, 0x82, 0xcd, 0xda, 0x00, 0xfd, 0x42, 0x71, 0xcd, 0x1c, 0x22, 0x7b, 0xb7, 0xef, 0xc3,
	0xf6, 0x30, 0x8c, 0x44, 0x65, 0x89, 0x7f, 0xe6, 0xd1, 0x48, 0x9f, 0x4a, 0x1e, 0xfe, 0x06, 0x27,
	0xb8, 0xcf, 0xf1, 0x47, 0xd1, 0xa8, 0x9c, 0xee, 0x03, 0xb8, 0x6a, 0x1f, 0x29, 0xe7, 0x94, 0x5d,
	0xdf, 0xad, 0xfa, 0x58, 0xd9, 0xd5, 0xfc, 0x00, 0xb6, 0x3f, 0x61, 0x31, 0x4b, 0xf1, 0x14, 0x83,
	0x30, 0xee, 0x27, 0xc3, 0x43, 0x34, 0x6f, 0xa5, 0x28, 0x3c, 0x31, 0xc4, 0xcf, 0xee, 0x80, 0xc5,
	0x27, 0xf9, 0x29, 0x6d, 0x12, 0x70, 0xd0, 0x63, 0x01, 0xf1, 0xff, 0x1c, 0x3c, 0xdb, 0x68, 0xda,
	0x6d, 0x4c, 0xa4, 0xc4, 0xf0, 0xe3, 0x57, 0x39, 0xcb, 0xc8, 0xe0, 0xaf, 0x70, 0xc8, 0x3d, 0x0e,
	0xe0, 0x17, 0x80, 0x02, 0x7d, 0x4a, 0xde, 0x1f, 0x2b, 0x4e, 0xfe, 0xfd, 0x29, 0x86, 0x27, 0x4c,
	0xa4, 0x04, 0x6a, 0x18, 0xb3, 0x61, 0x12, 0x47, 0x3d, 0xba, 0x98, 0x59, 0xe4, 0xc0, 0x7d, 0x82,
	0xf9, 0x3b, 0xb0, 0xfa, 0x80, 0xf5, 0x92, 0x3e, 0xd3, 0x45, 0xc6, 0x39, 0xb9, 0x79, 0xc9, 0x3c,
	0x9f, 0x4c, 0xf2, 0x0a, 0x87, 0x88, 0xdc, 0xde, 0xff, 0x09, 0xb8, 0xfa, 0x98, 0xb2, 0x2b, 0xdc,
	0x17, 0x50, 0xac, 0x8f, 0xb8, 0xa7, 0xa3, 0x1a, 0x82, 0x60, 0x9c, 0xd4, 0xbf, 0x06, 0x9e, 0x30,
	0x36, 0x6a, 0x2a, 0x53, 0x02, 0xa8, 0x14, 0x0e, 0x43, 0x95, 0x15, 0x4b, 0x6a, 0x2a, 0x2c, 0x35,
	0x19, 0xd9, 0xc7, 0x0a, 0xce, 0x75, 0x24, 0x0d, 0xf5, 0xa0, 0x23, 0x31, 0xf7, 0xc6, 0xaf, 0x58,
	0x2a, 0xf2, 0xeb, 0xe2, 0x95, 0xc0, 0xff, 0xcc, 0xc2, 0xb6, 0x05, 0x59, 0x2e, 0xea, 0x9c, 0xfb,
	0x7c, 0xf7, 0x4d, 0x8c, 0x90, 0xcf, 0x4f, 0x64, 0x2b, 0xbc, 0x3b, 0xc4, 0xb5, 0xd2, 0x39, 0x2c,
	0x22, 0x54, 0x34, 0xc3, 0xf7, 0x11, 0xc6, 0xcb, 0xce, 0x82, 0xea, 0xcb, 0xa7, 0xbb, 0x07, 0xdd,
	0x3e, 0x1b, 0xe4, 0xa1, 0x2a, 0x3b, 0x15, 0x29, 0xc7, 0x3c, 0xe0, 0x08, 0x4e, 0x4f, 0x17, 0xd8,
	0xdd, 0x3c, 0xe9, 0x72, 0xc5, 0xc3, 0x3c, 0x2e, 0xa6, 0xe7, 0x21, 0xab, 0x84, 0x3a, 0x4a, 0xf6,
	0x09, 0xe1, 0xfa, 0xb0, 0x24, 0x93, 0x47, 0x4e, 0x8e, 0xec, 0x54, 0x2f, 0x4b, 0x02, 0x8f, 0x92,
	0xdd, 0xe7, 0x27, 0x58, 0x6e, 0x6f, 0xf4, 0x13, 0x5c, 0xc9, 0x8b, 0x30, 0xc2, 0xb4, 0x3c, 0x49,
	0x8d, 0x6a, 0x61, 0x3e, 0x70, 0x39, 0xf2, 0x29, 0xe2, 0x1e, 0x25, 0xa9, 0x56, 0x35, 0xc8, 0x3c,
	0x9f, 0xe4, 0x9d, 0x93, 0x5c, 0x25, 0x4c, 0x4a, 0x7a, 0x5d, 0xb6, 0x9a, 0x64, 0xdb, 0x4a, 0x94,
	0x0d, 0xa8, 0x2c, 0x08, 0x39, 0x14, 0x00, 0x1e, 0x9a, 0x39, 0x9a, 0x5a, 0xb2, 0x59, 0x0f, 0x6b,
	0xd7, 0xf8, 0x44, 0xd4, 0x10, 0xad, 0xa0, 0x8d, 0x98, 0x23, 0x81, 0x38, 0x94, 0x70, 0x77, 0x0b,
	0xe6, 0x30, 0xdb, 0xd4, 0xca, 0x89, 0x59, 0xfc, 0xe4, 0xf5, 0x04, 0x26, 0x81, 0x1c, 0x21, 0x77,
	0x99, 0x73, 0x51, 0x45, 0xc5, 0x12, 0x82, 0xc5, 0xde, 0x71, 0x16, 0x4c, 0x30, 0x08, 0x65, 0x3d,
	0xb2, 0x48, 0x0c, 0x42, 0x51, 0x90, 0xe0, 0x06, 0x71, 0x04, 0xef, 0x88, 0x89, 0x3d, 0xe9, 0x2c,
	0xc9, 0xa5, 0x20, 0xf0, 0x80, 0xa5, 0xc2, 0x9a, 0xb9, 0xac, 0x82, 0x46, 0x4c, 0x12, 0x1e, 0x67,
	0xc9, 0x60, 0x8c, 0x51, 0x63, 0x59, 0xca, 0xca, 0x09, 0x39, 0x62, 0x97, 0xe0, 0x26, 0x75, 0xca,
	0x06, 0x21, 0xaf, 0x35, 0x3a, 0x2b, 0x26, 0x75, 0x40, 0x70, 0xb1, 0x80, 0x82, 0x5a, 0x2e, 0xa0,
	0x4d, 0x0b, 0x20, 0x52, 0xb9, 0x00, 0x54, 0x27, 0x4e, 0x17, 0x15, 0xb7, 0x16, 0x9d, 0x55, 0xd9,
	0xbf, 0x46, 0xe8, 0x9e, 0xba, 0xb3, 0xa8, 0x55, 0x73, 0xee, 0x39, 0xd5, 0xdc, 0x9a, 0xe0, 0x51,
	0x56, 0x73, 0x3f, 0x86, 0xad, 0x6c, 0x84, 0xb9, 0x47, 0xbf, 0xab, 0x6e, 0x72, 0xc8, 0x66, 0xb2,
	0xce, 0xba, 0x50, 0x86, 0x0d, 0x89, 0x36, 0x0d, 0xca, 0x56, 0x8d, 0x6e, 0xd8, 0xaa, 0xd1, 0xb2,
	0x28, 0xdc, 0xd4, 0x8a, 0x42, 0xff, 0x0f, 0x60, 0xe3, 0x90, 0xa9, 0xcb, 0x7a, 0x6e, 0x3c, 0x97,
	0x78, 0x36, 0xd3, 0x81, 0xcd, 0xea, 0x58, 0xb2, 0xee, 0x0f, 0x25, 0x46, 0xb3, 0x36, 0xc5, 0xb6,
	0x6e, 0x9a, 0x4e, 0xdd, 0x34, 0xfd, 0x6d, 0xd8, 0xaa, 0x8d, 0x27, 0xd6, 0xfb, 0xe8, 0x92, 0x4a,
	0x54, 0x61, 0x9d, 0xda, 0x5d, 0xa7, 0xcd, 0xa8, 0x9d, 0x06, 0xa3, 0xe6, 0x55, 0xab, 0x9d, 0x9d,
	0x31, 0xdd, 0xbd, 0xaa, 0x71, 0x6b, 0xd3, 0xd9, 0x7c, 0x82, 0xd3, 0xe0, 0x13, 0x68, 0x3a, 0x0b,
	0x3b, 0x9a, 0xee, 0x13, 0xf4, 0xa8, 0x4c, 0x3e, 0xc9, 0x11, 0x1e, 0x02, 0x43, 0xd0, 0x49, 0xb1,
	0x77, 0x58, 0xa1, 0xe9, 0x0e, 0x45, 0xe0, 0x68, 0xaa, 0x95, 0x63, 0x73, 0x88, 0xf0, 0xbe, 0x16,
	0x46, 0x34, 0xcd, 0x1f, 0x09, 0x31, 0x1e, 0xd4, 0x9c, 0x8b, 0x9a, 0xa9, 0xd1, 0x2d, 0x39, 0x4d,
	0x6e, 0x89, 0x97, 0xf7, 0x0d, 0x2c, 0x69, 0x4e, 0xa9, 0x69, 0x0f, 0x4b, 0x37, 0xa5, 0x69, 0x9a,
	0xe1, 0xd0, 0x9c, 0x9a, 0x43, 0x23, 0x4d, 0x33, 0xc6, 0x12, 0xd7, 0xf7, 0x60, 0xed, 0x50, 0xf4,
	0x2f, 0xa4, 0x6f, 0xd3, 0xc2, 0xa5, 0xe6, 0x01, 0x9d, 0x8a, 0x07, 0xe4, 0x69, 0xbe, 0x39, 0x8a,
	0xb8, 0xfd, 0x4c, 0xec, 0xda, 0xa3, 0x8a, 0x0b, 0x54, 0x4c, 0xed, 0x7e, 0xd3, 0xb1, 0xfb, 0x4d,
	0x11, 0x3b, 0x6d, 0xbc, 0x68, 0xaa, 0xb7, 0xa1, 0x8d, 0xe8, 0x7d, 0xe1, 0x4a, 0xd5, 0x04, 0x9a,
	0xab, 0x75, 0x74, 0x57, 0xeb, 0xaf, 0xc1, 0xaa, 0x46, 0x4c, 0x1c, 0x76, 0x85, 0x91, 0xec, 0xeb,
	0xbe, 0x56, 0x31, 0xb2, 0xb8, 0x66, 0xc7, 0xe2, 0x9a, 0x79, 0x14, 0xae, 0xb3, 0x30, 0x05, 0x14,
	0xae, 0x5a, 0x17, 0x90, 0x5c, 0xb9, 0xa3, 0xbb, 0x72, 0x25, 0x20, 0x11, 0x13, 0x87, 0x9f, 0x8a,
	0x13, 0xdf, 0x2f, 0xbd, 0xb9, 0x62, 0x53, 0x73, 0xfc, 0x4e, 0xcd, 0xf1, 0xd3, 0x91, 0x1b, 0x83,
	0x8d, 0x43, 0xda, 0xaf, 0xf8, 0x7e, 0xed, 0x90, 0x2c, 0x01, 0xc3, 0xb1, 0x07, 0x0c, 0x3a, 0xa4,
	0x3a, 0x2f, 0xeb, 0x54, 0x2a, 0x70, 0x58, 0xa7, 0x2a, 0xa2, 0x8d, 0x63, 0x8f, 0x36, 0x95, 0xa9,
	0x4a, 0x5e, 0xe6, 0x69, 0xea, 0x81, 0x47, 0x3f, 0xcd, 0x4a, 0x9c, 0x72, 0x2c, 0x71, 0x4a, 0x9d,
	0xa6, 0xc9, 0xc2, 0xf0, 0xc8, 0xfb, 0x5a, 0xc0, 0xd2, 0x3c, 0x72, 0x25, 0xba, 0x39, 0xf5, 0xe8,
	0x46, 0x1e, 0xd9, 0x1c, 0x6f, 0x18, 0xf6, 0x41, 0x19, 0xe7, 0x34, 0xc3, 0x36, 0x22, 0xa2, 0x53,
	0x8b, 0x88, 0x74, 0xca, 0xc6, 0x58, 0xe2, 0xfa, 0x2e, 0xb8, 0x84, 0xe1, 0xd1, 0x51, 0xb1, 0x34,
	0x22, 0xa8, 0x63, 0x46, 0x50, 0x5e, 0x35, 0x19, 0x43, 0x88, 0xd3, 0x1f, 0xc3, 0x4d, 0x04, 0x1f,
	0xda, 0x82, 0xa7, 0x62, 0x3b, 0x21, 0xf6, 0x3a, 0x13, 0x62, 0xaf, 0xef, 0xc3, 0x6b, 0xcd, 0xac,
	0x8b, 0xd6, 0x01, 0xdf, 0xb9, 0x23, 0x3d, 0x18, 0x6b, 0x17, 0x8e, 0x95, 0xd0, 0xed, 0x58, 0x42,
	0x37, 0x9d, 0x6b, 0x85, 0x03, 0x71, 0xbf, 0x03, 0x2b, 0x1c, 0xa7, 0x1b, 0x69, 0x19, 0xe9, 0x1d,
	0x3d, 0xd2, 0xbb, 0xc2, 0x9e, 0x8f, 0x74, 0x0b, 0xdd, 0x09, 0x8a, 0xe7, 0xf7, 0x87, 0x2c, 0x7d,
	0xce, 0x5f, 0x89, 0x7c, 0x0c, 0x73, 0x04, 0x71, 0xb7, 0xb5, 0xd6, 0x99, 0xf9, 0x48, 0xdf, 0xf3,
	0x6c, 0x28, 0xe2, 0xf9, 0xcf, 0x6d, 0x58, 0x92, 0xfd, 0x08, 0xc5, 0xf3, 0x27, 0x30, 0xcd, 0x5f,
	0xfd, 0xba, 0x9b, 0xda, 0x28, 0xed, 0x55, 0xb0, 0xb7, 0x55, 0x83, 0x17, 0x9d, 0xdc, 0x39, 0x7a,
	0xdd, 0x6b, 0x08, 0x63, 0x3e, 0x19, 0x36, 0x84, 0xa9, 0xbe, 0x1d, 0x0e, 0x60, 0xc9, 0x78, 0xd9,
	0xeb, 0xde, 0xac, 0x3f, 0xb8, 0x35, 0x9e, 0x0b, 0x7b, 0xaf, 0x35, 0x13, 0x10, 0xcf, 0xfb, 0x30,
	0x5f, 0x74, 0x11, 0x3c, 0xeb, 0xfb, 0x5d, 0xc9, 0xe9, 0xea, 0x84, 0xb7, 0xbd, 0x7c, 0x69, 0xea,
	0xe5, 0xab, 0xbe, 0x34, 0xf3, 0x89, 0x9a, 0xb1, 0xb4, 0xea, 0x6b, 0xb2, 0x9f, 0xc3, 0x4a, 0xe5,
	0x51, 0x93, 0xfb, 0xba, 0x46, 0x6e, 0x7f, 0x0b, 0xe6, 0xf9, 0x93, 0x48, 0x24, 0xe7, 0x77, 0x1c,
	0xf7, 0x31, 0x2c, 0x68, 0xaf, 0x8c, 0x5c, 0xa3, 0x91, 0x5d, 0x7b, 0x93, 0xe4, 0xdd, 0x68, 0x42,
	0x17, 0x6f, 0xac, 0xae, 0x14, 0x8f, 0x89, 0x5c, 0x7d, 0x57, 0xaa, 0xef, 0x8e, 0xbc, 0x6b, 0x76,
	0x24, 0xf1, 0x19, 0x63, 0xcd, 0xd8, 0xd0, 0xfc, 0x77, 0xbf, 0x6f, 0xef, 0xb5, 0xdb, 0xda, 0x30,
	0xde, 0xdb, 0x17, 0xa2, 0x2d, 0x36, 0x23, 0x41, 0x1f, 0x65, 0xed, 0x1c, 0xbb, 0x77, 0x2e, 0xd0,
	0x5c, 0x96, 0x53, 0x7e, 0xef, 0xc2, 0x6d, 0x68, 0x9c, 0x30, 0x2a, 0x5f, 0xb2, 0x1b, 0xd3, 0xdd,
	0xb6, 0xa8, 0xa6, 0x6d, 0xb2, 0xb7, 0xce, 0xa5, 0x2b, 0xa6, 0xfa, 0x05, 0xb4, 0xab, 0x4f, 0x7d,
	0x5c, 0xff, 0xfc, 0x97, 0x49, 0xde, 0x1b, 0x13, 0x69, 0x4a, 0xe3, 0x33, 0x9e, 0x3b, 0x1b, 0xc6,
	0x67, 0x7b, 0x62, 0x6d, 0x18, 0x9f, 0xf5, 0xa5, 0xb4, 0xfb, 0x11, 0xcc, 0xca, 0x57, 0xcf, 0x6e,
	0xc7, 0xa0, 0xd5, 0x1e, 0x4f, 0x7b, 0xdb, 0x16, 0x8c, 0xae, 0xda, 0xda, 0xf3, 0x64, 0x43, 0xb5,
	0xeb, 0xef, 0xa1, 0x0d, 0xd5, 0xb6, 0xbd, 0x6a, 0x56, 0xdc, 0xd4, 0x7b, 0xdf, 0x89, 0xcf, 0x8f,
	0xeb, 0xdc, 0x2a, 0x0f, 0x89, 0xf1, 0x34, 0xaa, 0x8f, 0x6b, 0x8d, 0xd3, 0x68, 0x78, 0x2b, 0x6c,
	0x9c, 0x46, 0xd3, 0xeb, 0x5c, 0xf7, 0x73, 0x58, 0xd4, 0x1f, 0xc6, 0xba, 0x37, 0x6a, 0x83, 0x8c,
	0x57, 0xbb, 0xde, 0xcd, 0x46, 0x3c, 0x31, 0xfc, 0x0a, 0x56, 0x2a, 0x0f, 0x99, 0x0c, 0x07, 0x64,
	0x7f, 0x25, 0x66, 0x38, 0xa0, 0xa6, 0x57, 0x54, 0x27, 0xb0, 0x6e, 0x7b, 0xa4, 0x60, 0x18, 0xc0,
	0x84, 0x27, 0x15, 0x86, 0x01, 0x4c, 0x7c, 0xed, 0x80, 0x4b, 0xa8, 0x5c, 0xbf, 0x1b, 0x4b, 0xb0,
	0x3f, 0x18, 0x30, 0x96, 0xd0, 0x74, 0x7b, 0x1f, 0x82, 0x5b, 0xbf, 0x19, 0x77, 0xf5, 0x7f, 0x7d,
	0xd5, 0x78, 0x09, 0xef, 0xdd, 0x3a, 0x87, 0xaa, 0x14, 0xbe, 0x72, 0x61, 0x6b, 0x08, 0x6f, 0xbf,
	0x4e, 0x37, 0x84, 0x6f, 0xba, 0xef, 0xfd, 0x25, 0x6c, 0x58, 0xaf, 0x6a, 0x5d, 0x7d, 0x63, 0x27,
	0x5d, 0xf6, 0x7a, 0x77, 0xce, 0x27, 0xa4, 0x74, 0xe1, 0xbf, 0x67, 0xd4, 0xad, 0x06, 0xa7, 0x63,
	0xa9, 0x4a, 0x1a, 0x50, 0x5d, 0xf5, 0x5b, 0x0d, 0x43, 0x5d, 0x2d, 0xb7, 0x20, 0x86, 0xba, 0x5a,
	0xaf, 0x43, 0x90, 0xa1, 0x7e, 0xb5, 0x63, 0x30, 0xb4, 0x5c, 0x3d, 0x19, 0x0c, 0x6d, 0x77, 0x42,
	0xee, 0x1e, 0x40, 0x79, 0xa3, 0xe3, 0xea, 0xa1, 0xab, 0x76, 0x55, 0xe4, 0x5d, 0x6f, 0xc0, 0x96,
	0x6e, 0x44, 0xbb, 0xf0, 0x31, 0xdc, 0x48, 0xfd, 0x7a, 0xc8, 0x70, 0x23, 0x96, 0x7b, 0x22, 0xf7,
	0x4f, 0xc5, 0xe3, 0x5d, 0xf3, 0x02, 0xc5, 0x7d, 0xc3, 0x0c, 0xad, 0xd6, 0xdb, 0x1f, 0xef, 0xcd,
	0xc9, 0x44, 0x25, 0xff, 0xda, 0x5d, 0x88, 0xc1, 0xbf, 0xe9, 0x86, 0xc6, 0xe0, 0xdf, 0x78, 0x9d,
	0xe2, 0x7e, 0xcb, 0x6f, 0xb1, 0x27, 0xdd, 0x93, 0xb8, 0x3f, 0xd4, 0xe5, 0xbc, 0xc0, 0xcd, 0x8b,
	0xf7, 0xce, 0xc5, 0x07, 0x94, 0xea, 0xa2, 0x5f, 0xb5, 0x18, 0xea, 0x62, 0xb9, 0x9b, 0x31, 0xd4,
	0xc5, 0x76, 0x47, 0xb3, 0xf3, 0x9f, 0x0e, 0x2c, 0xf0, 0x96, 0xbb, 0x52, 0x70, 0xf4, 0x10, 0xf5,
	0x3b, 0x06, 0xc3, 0x43, 0x34, 0x5e, 0x60, 0x18, 0x1e, 0x62, 0xc2, 0x45, 0x05, 0x6a, 0x68, 0x79,
	0x2b, 0x60, 0x68, 0x68, 0xed, 0x82, 0xc1, 0xd0, 0xd0, 0xfa, 0x55, 0xc2, 0xce, 0xdf, 0xb9, 0xea,
	0x39, 0xba, 0xe8, 0xc9, 0xab, 0x45, 0xf4, 0xb1, 0xe4, 0xaa, 0x5f, 0x10, 0xb8, 0xb7, 0xaa, 0x7a,
	0x64, 0xbd, 0x22, 0xf0, 0x6e, 0x9f, 0x47, 0x56, 0x3a, 0xd3, 0xfa, 0x55, 0x82, 0x6b, 0x2a, 0x6b,
	0xc3, 0x35, 0x84, 0x77, 0xeb, 0x1c, 0x2a, 0x9a, 0xe2, 0x10, 0x66, 0xe5, 0x3d, 0x83, 0xa1, 0xc8,
	0x4d, 0x57, 0x14, 0x86, 0x22, 0x37, 0x5f, 0x55, 0x7c, 0x01, 0xcb, 0x66, 0x83, 0xd4, 0xd5, 0x13,
	0x1c, 0x6b, 0xdf, 0xd5, 0x7b, 0x7d, 0x02, 0x85, 0x16, 0xb5, 0xcc, 0xee, 0xa8, 0x5b, 0x1d, 0x55,
	0xef, 0xbc, 0x9a, 0x51, 0xcb, 0xde, 0x5c, 0xe5, 0x81, 0xd7, 0xd6, 0x0d, 0x35, 0x02, 0xef, 0x84,
	0xee, 0xab, 0x11, 0x78, 0x27, 0xb5, 0x55, 0x69, 0xa2, 0x5a, 0x1f, 0xb4, 0x3a, 0x51, 0x53, 0xdf,
	0xb5, 0x3a, 0x51, 0x63, 0x43, 0x55, 0xa8, 0x4e, 0xad, 0x0f, 0x6a, 0xaa, 0x4e, 0x53, 0xbf, 0xd5,
	0x54, 0x9d, 0xc6, 0x66, 0x2a, 0x8f, 0x96, 0xd6, 0xce, 0xa7, 0x5b, 0x11, 0xb2, 0xb1, 0xdd, 0x6a,
	0x44, 0xcb, 0x89, 0x4d, 0x54, 0xd2, 0x28, 0xad, 0x11, 0x5a, 0xd5, 0xa8, 0x7a, 0x7f, 0xb5, 0xaa,
	0x51, 0x96, 0x2e, 0x2a, 0x77, 0x76, 0x7a, 0x3f, 0xd4, 0x70, 0x76, 0x96, 0xf6, 0xaa, 0xe1, 0xec,
	0x6c, 0x8d, 0x54, 0xe1, 0x17, 0xea, 0xcd, 0x4f, 0xf7, 0x56, 0x6d, 0x9c, 0xad, 0xd1, 0xea, 0xdd,
	0x3e, 0x8f, 0x4c, 0x2b, 0x2c, 0x55, 0x5b, 0xd4, 0x2c, 0x2c, 0x2b, 0x9d, 0x55, 0xb3, 0xb0, 0xac,
	0x76, 0x52, 0x79, 0xde, 0x5d, 0x6d, 0x83, 0xba, 0x7e, 0x6d, 0x44, 0xad, 0x31, 0x67, 0xe4, 0xdd,
	0x4d, 0x7d, 0x54, 0x25, 0xa4, 0xbc, 0xf2, 0xaa, 0x0a, 0xa9, 0x77, 0x57, 0x6b, 0x42, 0x1a, 0xdd,
	0x54, 0x3a, 0x7a, 0xad, 0x21, 0x5a, 0x3d, 0xfa, 0x7a, 0xa3, 0xb5, 0x7a, 0xf4, 0x96, 0x6e, 0x2a,
	0x9d, 0x54, 0xb5, 0x03, 0x5a, 0x3d, 0xa9, 0x86, 0x6e, 0x6b, 0xf5, 0xa4, 0x9a, 0x1a, 0xa9, 0x95,
	0x59, 0x8a, 0x1b, 0xb8, 0x86, 0x59, 0x2a, 0x8d, 0xd6, 0xa6, 0x59, 0xaa, 0x3d, 0x54, 0x75, 0x8e,
	0xc6, 0xe5, 0x9d, 0x6f, 0x1f, 0x3b, 0xf1, 0x1c, 0x6d, 0x1d, 0x54, 0xf2, 0xba, 0xfb, 0xc6, 0x95,
	0x5f, 0x6d, 0x5c, 0xb5, 0xbb, 0xea, 0xf9, 0x93, 0x48, 0x8c, 0x93, 0xd5, 0x9a, 0xa0, 0xd5, 0x93,
	0xad, 0xf7, 0x56, 0xab, 0x27, 0x6b, 0xe9, 0xa0, 0xf2, 0xa4, 0x52, 0x6b, 0x87, 0x1a, 0x49, 0x65,
	0xbd, 0xb3, 0xea, 0xdd, 0x68, 0x42, 0x13, 0xb7, 0x4c, 0x34, 0x21, 0xad, 0xad, 0x4e, 0xa3, 0xf9,
	0x72, 0x4e, 0xab, 0xd5, 0x68, 0xbe, 0x9c, 0xd7, 0x3b, 0xa5, 0x03, 0x35, 0x3a, 0x9f, 0xd5, 0x03,
	0xb5, 0x35, 0x56, 0xab, 0x07, 0x6a, 0x6d, 0x9d, 0xf2, 0x3e, 0x9e, 0x6a, 0x88, 0x1a, 0x7d, 0xbc,
	0x4a, 0x3f, 0xd5, 0xbb, 0x6a, 0xc5, 0x49, 0x26, 0xc7, 0xb3, 0xe2, 0xbf, 0x34, 0xf9, 0xd1, 0x6f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x66, 0x48, 0x19, 0x81, 0xdf, 0x44, 0x00, 0x00,
}
