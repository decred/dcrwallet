syntax = "proto3";

package walletrpc;

service VersionService {
	rpc Version (VersionRequest) returns (VersionResponse);
}

message VersionRequest {}
message VersionResponse {
	string version_string = 1;
	uint32 major = 2;
	uint32 minor = 3;
	uint32 patch = 4;
	string prerelease = 5;
	string build_metadata = 6;
}

service WalletService {
	// Queries
	rpc Ping (PingRequest) returns (PingResponse);
	rpc Network (NetworkRequest) returns (NetworkResponse);
	rpc AccountNumber (AccountNumberRequest) returns (AccountNumberResponse);
	rpc Accounts (AccountsRequest) returns (AccountsResponse);
	rpc Balance (BalanceRequest) returns (BalanceResponse);
	rpc GetTransactions (GetTransactionsRequest) returns (stream GetTransactionsResponse);
	rpc TicketPrice (TicketPriceRequest) returns (TicketPriceResponse);
	rpc StakeInfo (StakeInfoRequest) returns (StakeInfoResponse);

	// Notifications
	rpc TransactionNotifications (TransactionNotificationsRequest) returns (stream TransactionNotificationsResponse);
	rpc SpentnessNotifications (SpentnessNotificationsRequest) returns (stream SpentnessNotificationsResponse);
	rpc AccountNotifications (AccountNotificationsRequest) returns (stream AccountNotificationsResponse);

	// Control
	rpc ChangePassphrase (ChangePassphraseRequest) returns (ChangePassphraseResponse);
	rpc RenameAccount (RenameAccountRequest) returns (RenameAccountResponse);
	rpc Rescan (RescanRequest) returns (stream RescanResponse);
	rpc NextAccount (NextAccountRequest) returns (NextAccountResponse);
	rpc NextAddress (NextAddressRequest) returns (NextAddressResponse);
	rpc ImportPrivateKey (ImportPrivateKeyRequest) returns (ImportPrivateKeyResponse);
	rpc ImportScript(ImportScriptRequest) returns (ImportScriptResponse);
	rpc FundTransaction (FundTransactionRequest) returns (FundTransactionResponse);
	rpc ConstructTransaction (ConstructTransactionRequest) returns (ConstructTransactionResponse);
	rpc SignTransaction (SignTransactionRequest) returns (SignTransactionResponse);
	rpc PublishTransaction (PublishTransactionRequest) returns (PublishTransactionResponse);
	rpc PurchaseTickets(PurchaseTicketsRequest) returns (PurchaseTicketsResponse);
	rpc LoadActiveDataFilters(LoadActiveDataFiltersRequest) returns (LoadActiveDataFiltersResponse);
}

service WalletLoaderService {
	rpc WalletExists (WalletExistsRequest) returns (WalletExistsResponse);
	rpc CreateWallet (CreateWalletRequest) returns (CreateWalletResponse);
	rpc OpenWallet (OpenWalletRequest) returns (OpenWalletResponse);
	rpc CloseWallet (CloseWalletRequest) returns (CloseWalletResponse);
	rpc StartConsensusRpc (StartConsensusRpcRequest) returns (StartConsensusRpcResponse);
	rpc DiscoverAddresses (DiscoverAddressesRequest) returns (DiscoverAddressesResponse);
	rpc SubscribeToBlockNotifications (SubscribeToBlockNotificationsRequest) returns (SubscribeToBlockNotificationsResponse);
	rpc FetchHeaders(FetchHeadersRequest) returns (FetchHeadersResponse);
}

service TicketBuyerService {
    rpc StartAutoBuyer (StartAutoBuyerRequest) returns (StartAutoBuyerResponse);
    rpc StopAutoBuyer (StopAutoBuyerRequest) returns (StopAutoBuyerResponse);
    rpc TicketBuyerConfig (TicketBuyerConfigRequest) returns (TicketBuyerConfigResponse);
    rpc SetAccount (SetAccountRequest) returns (SetAccountResponse);
    rpc SetBalanceToMaintain (SetBalanceToMaintainRequest) returns (SetBalanceToMaintainResponse);
    rpc SetMaxFee (SetMaxFeeRequest) returns (SetMaxFeeResponse);
    rpc SetMaxPriceRelative (SetMaxPriceRelativeRequest) returns (SetMaxPriceRelativeResponse);
    rpc SetMaxPriceAbsolute (SetMaxPriceAbsoluteRequest) returns (SetMaxPriceAbsoluteResponse);
    rpc SetTicketAddress (SetTicketAddressRequest) returns (SetTicketAddressResponse);
    rpc SetPoolAddress (SetPoolAddressRequest) returns (SetPoolAddressResponse);
    rpc SetPoolFees (SetPoolFeesRequest) returns (SetPoolFeesResponse);
    rpc SetMaxPerBlock (SetMaxPerBlockRequest) returns (SetMaxPerBlockResponse);
}

service SeedService {
	rpc GenerateRandomSeed (GenerateRandomSeedRequest) returns (GenerateRandomSeedResponse);
	rpc DecodeSeed (DecodeSeedRequest) returns (DecodeSeedResponse);
}

message TransactionDetails {
	message Input {
		uint32 index = 1;
		uint32 previous_account = 2;
		int64 previous_amount = 3;
	}
	message Output {
		uint32 index = 1;
		uint32 account = 2;
		bool internal = 3;
		int64 amount = 4;
		string address = 5;
		bytes output_script = 6;
	}
	bytes hash = 1;
	bytes transaction = 2;
	repeated Input debits = 3;
	repeated Output credits = 4;
	int64 fee = 5;
	int64 timestamp = 6; // May be earlier than a block timestamp, but never later.
}

message BlockDetails {
	bytes hash = 1;
	int32 height = 2;
	int64 timestamp = 3;
	repeated TransactionDetails transactions = 4;
}

message AccountBalance {
	uint32 account = 1;
	int64 total_balance = 2;
}

message PingRequest {}
message PingResponse {}

message NetworkRequest {}
message NetworkResponse {
	uint32 active_network = 1;
}

message AccountNumberRequest {
	string account_name = 1;
}
message AccountNumberResponse {
	uint32 account_number = 1;
}

message AccountsRequest {}
message AccountsResponse {
	message Account {
		uint32 account_number = 1;
		string account_name = 2;
		int64 total_balance = 3;
		uint32 external_key_count = 4;
		uint32 internal_key_count = 5;
		uint32 imported_key_count = 6;
	}
	repeated Account accounts = 1;
	bytes current_block_hash = 2;
	int32 current_block_height = 3;
}

message RenameAccountRequest {
	uint32 account_number = 1;
	string new_name = 2;
}
message RenameAccountResponse {}

message RescanRequest {
	int32 begin_height = 1;
}
message RescanResponse {
	int32 rescanned_through = 1;
}

message NextAccountRequest {
	bytes passphrase = 1;
	string account_name = 2;
}
message NextAccountResponse {
	uint32 account_number = 1;
}

message NextAddressRequest {
	uint32 account = 1;
	enum Kind {
	     BIP0044_EXTERNAL = 0;
	     BIP0044_INTERNAL = 1;
	}
	Kind kind = 2;
}
message NextAddressResponse {
	string address = 1;
	string public_key = 2;
}

message ImportPrivateKeyRequest {
	bytes passphrase = 1;
	uint32 account = 2;
	string private_key_wif = 3;
	bool rescan = 4;
	int32 scan_from = 5;
}
message ImportPrivateKeyResponse {
}

message ImportScriptRequest {
	bytes passphrase = 1;
	bytes script = 2;
	bool rescan = 3;
	int32 scan_from = 4;
}
message ImportScriptResponse {
}

message BalanceRequest {
	uint32 account_number = 1;
	int32 required_confirmations = 2;
}
message BalanceResponse {
	int64 total = 1;
	int64 spendable = 2;
	int64 immature_reward = 3;
}

message GetTransactionsRequest {
	// Optionally specify the starting block from which to begin including all transactions.
	// Either the starting block hash or height may be specified, but not both.
	// If a block height is specified and is negative, the absolute value becomes the number of
	// last blocks to include.  That is, given a current chain height of 1000 and a starting block
	// height of -3, transaction notifications will be created for blocks 998, 999, and 1000.
	// If both options are excluded, transaction results are created for transactions since the
	// genesis block.
	bytes starting_block_hash = 1;
	sint32 starting_block_height = 2;

	// Optionally specify the last block that transaction results may appear in.
	// Either the ending block hash or height may be specified, but not both.
	// If both are excluded, transaction results are created for all transactions
	// through the best block, and include all unmined transactions.
	bytes ending_block_hash = 3;
	int32 ending_block_height = 4;
	
	// Include at least this many of the newest transactions if they exist.
	// Cannot be used when the ending block hash is specified.
	//
	// TODO: remove until spec adds it back in some way.
	int32 minimum_recent_transactions = 5;

	// TODO: limit max number of txs?
}
message GetTransactionsResponse {
	BlockDetails mined_transactions = 1;
	repeated TransactionDetails unmined_transactions = 2;
}

message TicketPriceRequest {
}
message TicketPriceResponse {
	int64 ticket_price = 1;
	int32 height = 2;
}

message StakeInfoRequest {
}
message StakeInfoResponse {
	uint32 pool_size = 1;
	uint32 all_mempool_tix = 2;
	uint32 own_mempool_tix = 3;
	uint32 immature = 4;
	uint32 live = 5;
	uint32 voted = 6;
	uint32 missed = 7;
	uint32 revoked = 8;
	uint32 expired = 9;
	int64 total_subsidy = 10;
}

message ChangePassphraseRequest {
	enum Key {
	     PRIVATE = 0;
	     PUBLIC = 1;
	}
	Key key = 1;
	bytes old_passphrase = 2;
	bytes new_passphrase = 3;
}
message ChangePassphraseResponse {}

message FundTransactionRequest {
	uint32 account = 1;
	int64 target_amount = 2;
	int32 required_confirmations = 3;
	bool include_immature_coinbases = 4;
	bool include_change_script = 5;
}
message FundTransactionResponse {
	message PreviousOutput {
		bytes transaction_hash = 1;
		uint32 output_index = 2;
		int64 amount = 3;
		bytes pk_script = 4;
		int64 receive_time = 5;
		bool from_coinbase = 6;
		int32 tree = 7;
	}
	repeated PreviousOutput selected_outputs = 1;
	int64 total_amount = 2;
	bytes change_pk_script = 3;
}

message ConstructTransactionRequest {
	message OutputDestination {
		string address = 1;

		bytes script = 2;
		uint32 script_version = 3;
	}
	message Output {
		OutputDestination destination = 1;
		int64 amount = 2;
	}
	enum OutputSelectionAlgorithm {
		UNSPECIFIED = 0;
		ALL = 1;
	}
	uint32 source_account = 1;
	int32 required_confirmations = 2;
	int32 fee_per_kb = 3;
	OutputSelectionAlgorithm output_selection_algorithm = 4;
	repeated Output non_change_outputs = 5;
	OutputDestination change_destination = 6;
}
message ConstructTransactionResponse {
	bytes unsigned_transaction = 1;
	int64 total_previous_output_amount = 2;
	int64 total_output_amount = 3;
	uint32 estimated_signed_size = 4;
}

message SignTransactionRequest {
	bytes passphrase = 1;
	
	bytes serialized_transaction = 2;

	// If no indexes are specified, signatures scripts will be added for
	// every input. If any input indexes are specified, only those inputs
	// will be signed.  Rather than returning an incompletely signed
	// transaction if any of the inputs to be signed can not be, the RPC
	// immediately errors.
	repeated uint32 input_indexes = 3;
}
message SignTransactionResponse {
	bytes transaction = 1;
	repeated uint32 unsigned_input_indexes = 2;
}

message PublishTransactionRequest {
	bytes signed_transaction = 1;
}
message PublishTransactionResponse {
	bytes transaction_hash = 1;
}

message PurchaseTicketsRequest {
	bytes passphrase = 1;
	uint32 account = 2;
	int64 spend_limit = 3;
	uint32 required_confirmations = 4;
	string ticket_address = 5;
	uint32 num_tickets = 6;
	string pool_address = 7;
	double pool_fees = 8;
	uint32 expiry = 9;
	int64 tx_fee = 10;
	int64 ticket_fee = 11;
}
message PurchaseTicketsResponse {
	repeated bytes ticket_hashes = 1;
}

message LoadActiveDataFiltersRequest {}
message LoadActiveDataFiltersResponse {}

message TransactionNotificationsRequest {}
message TransactionNotificationsResponse {
	// Sorted by increasing height.  This is a repeated field so many new blocks
	// in a new best chain can be notified at once during a reorganize.
	repeated BlockDetails attached_blocks = 1;

	// If there was a chain reorganize, there may have been blocks with wallet
	// transactions that are no longer in the best chain.  These are those
	// block's hashes.
	repeated bytes detached_blocks = 2;
	
	// Any new unmined transactions are included here.  These unmined transactions
	// refer to the current best chain, so transactions from detached blocks may
	// be moved to mempool and included here if they are not mined or double spent
	// in the new chain.  Additonally, if no new blocks were attached but a relevant
	// unmined transaction is seen by the wallet, it will be reported here.
	repeated TransactionDetails unmined_transactions = 3;

	// Instead of notifying all of the removed unmined transactions,
	// just send all of the current hashes.
	repeated bytes unmined_transaction_hashes = 4;
}

message SpentnessNotificationsRequest {
	uint32 account = 1;
	bool no_notify_unspent = 2;
	bool no_notify_spent = 3;
}

message SpentnessNotificationsResponse {
	bytes transaction_hash = 1;
	uint32 output_index = 2;
	message Spender {
		bytes transaction_hash = 1;
		uint32 input_index = 2;
	}
	Spender spender = 3;
}

message AccountNotificationsRequest {}
message AccountNotificationsResponse {
	uint32 account_number = 1;
	string account_name = 2;
	uint32 external_key_count = 3;
	uint32 internal_key_count = 4;
	uint32 imported_key_count = 5;
}

message CreateWalletRequest {
	bytes public_passphrase = 1;
	bytes private_passphrase = 2;
	bytes seed = 3;
}
message CreateWalletResponse {}

message OpenWalletRequest {
	bytes public_passphrase = 1;
}
message OpenWalletResponse {}

message CloseWalletRequest {}
message CloseWalletResponse {}

message WalletExistsRequest {}
message WalletExistsResponse {
	bool exists = 1;
}

message StartConsensusRpcRequest {
	string network_address = 1;
	string username = 2;
	bytes password = 3;
	bytes certificate = 4;
}
message StartConsensusRpcResponse {}

message DiscoverAddressesRequest {
	bool discover_accounts = 1;
	bytes private_passphrase = 2;
}
message DiscoverAddressesResponse {}

message SubscribeToBlockNotificationsRequest {}
message SubscribeToBlockNotificationsResponse {}

message FetchHeadersRequest {}
message FetchHeadersResponse {
	uint32 fetched_headers_count = 1;
	bytes first_new_block_hash = 2;
	int32 first_new_block_height = 3;
	bytes main_chain_tip_block_hash = 4;
	int32 main_chain_tip_block_height = 5;
}

message GenerateRandomSeedRequest {
	uint32 seed_length = 1;
}
message GenerateRandomSeedResponse {
	bytes seed_bytes = 1;
	string seed_hex = 2;
	string seed_mnemonic = 3;
}

message DecodeSeedRequest {
	string user_input = 1;
}
message DecodeSeedResponse {
	bytes decoded_seed = 1;
}

message StartAutoBuyerRequest {
	bytes passphrase = 1;
	uint32 account = 2;
	int64 balance_to_maintain = 3;
	int64 max_fee_per_kb = 4;
	double max_price_relative = 5;
	int64 max_price_absolute = 6;
	string voting_address = 7;
	string pool_address = 8;
	double pool_fees = 9;
	int64 max_per_block = 10;
}
message StartAutoBuyerResponse {}

message StopAutoBuyerRequest {}
message StopAutoBuyerResponse {}
message TicketBuyerConfigRequest{
}

message TicketBuyerConfigResponse{
    uint32 account = 1;
    string avg_price_mode = 2;
    int64 avg_priceVWAP_delta = 3;
    int64 balance_to_maintain = 4;
    int64 blocks_to_avg = 5;
    bool dont_wait_for_tickets = 6;
    int64 expiry_delta = 7;
    string fee_source = 8;
    double fee_target_scaling = 9;
    int64 min_fee = 10;
    int64 max_fee = 12;
    int64 max_per_block = 13;
    int64 max_price_absolute = 14;
    double max_price_relative = 15;
    int64 max_in_mempool = 17;
    string pool_address = 18;
    double pool_fees = 19;
    bool spread_ticket_purchases = 20;
    string ticket_address = 21;
    int64 tx_fee = 22;
}

message SetAccountRequest{
    uint32 account = 1;
}
message SetAccountResponse{}

message SetBalanceToMaintainRequest{
    int64 balance_to_maintain = 1;
}
message SetBalanceToMaintainResponse{}

message SetMaxFeeRequest{
    int64 max_fee = 1;
}
message SetMaxFeeResponse{}

message SetMaxPriceRelativeRequest{
    double max_price_relative = 1;
}
message SetMaxPriceRelativeResponse{}

message SetMaxPriceAbsoluteRequest{
    int64 max_price_absolute = 1;
}
message SetMaxPriceAbsoluteResponse{}

message SetTicketAddressRequest{
    string ticket_address = 1;
}
message SetTicketAddressResponse{}

message SetPoolAddressRequest{
    string pool_address = 1;
}
message SetPoolAddressResponse{}

message SetPoolFeesRequest{
    double pool_fees = 1;
}
message SetPoolFeesResponse{}

message SetMaxPerBlockRequest{
    int64 max_per_block = 1;
}
message SetMaxPerBlockResponse{}
