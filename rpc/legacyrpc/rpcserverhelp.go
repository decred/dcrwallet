// AUTOGENERATED by internal/rpchelp/genrpcserverhelp.go; do not edit.

package legacyrpc

func helpDescsEnUS() map[string]string {
	return map[string]string{
		"accountaddressindex":     "accountaddressindex \"account\" branch\n\nGet the current address index for some account branch\n\nArguments:\n1. account (string, required)  String for the account\n2. branch  (numeric, required) Number for the branch (0=external, 1=internal)\n\nResult:\nn (numeric) The address index for this account branch\n",
		"accountfetchaddresses":   "accountfetchaddresses \"account\" branch start end\n\nGet the current address index for some account branch\n\nArguments:\n1. account (string, required)  String for the account\n2. branch  (numeric, required) Number for the branch (0=external, 1=internal)\n3. start   (numeric, required) The start address index to fetch, inclusive\n4. end     (numeric, required) The end address index to fetch, excluse\n\nResult:\n{\n \"addresses\": [\"value\",...], (array of string) The list of requested addresses for this account branch\n}                            \n",
		"accountsyncaddressindex": "accountsyncaddressindex \"account\" branch index\n\nSynchronize an account branch to some passed address index\n\nArguments:\n1. account (string, required)  String for the account\n2. branch  (numeric, required) Number for the branch (0=external, 1=internal)\n3. index   (numeric, required) The address index to synchronize to\n\nResult:\nNothing\n",
		"addmultisigaddress":      "addmultisigaddress nrequired [\"key\",...] (\"account\")\n\nGenerates and imports a multisig address and redeeming script to the 'imported' account.\n\nArguments:\n1. nrequired (numeric, required)         The number of signatures required to redeem outputs paid to this address\n2. keys      (array of string, required) Pubkeys and/or pay-to-pubkey-hash addresses to partially control the multisig address\n3. account   (string, optional)          DEPRECATED -- Unused (all imported addresses belong to the imported account)\n\nResult:\n\"value\" (string) The imported pay-to-script-hash address\n",
		"consolidate":             "consolidate inputs (\"account\" \"address\")\n\nConsolidate n many UTXOs into a single output in the wallet.\n\nArguments:\n1. inputs  (numeric, required) Number of UTXOs to consolidate as inputs\n2. account (string, optional)  Optional: Account from which unspent outputs are picked. When no address specified, also the account used to obtain an output address.\n3. address (string, optional)  Optional: Address to pay.  Default is obtained via getnewaddress from the account's address pool.\n\nResult:\n\"value\" (string) Transaction hash for the consolidation transaction\n",
		"createmultisig":          "createmultisig nrequired [\"key\",...]\n\nGenerate a multisig address and redeem script.\n\nArguments:\n1. nrequired (numeric, required)         The number of signatures required to redeem outputs paid to this address\n2. keys      (array of string, required) Pubkeys and/or pay-to-pubkey-hash addresses to partially control the multisig address\n\nResult:\n{\n \"address\": \"value\",      (string) The generated pay-to-script-hash address\n \"redeemScript\": \"value\", (string) The script required to redeem outputs paid to the multisig address\n}                         \n",
		"dumpprivkey":             "dumpprivkey \"address\"\n\nReturns the private key in WIF encoding that controls some wallet address.\n\nArguments:\n1. address (string, required) The address to return a private key for\n\nResult:\n\"value\" (string) The WIF-encoded private key\n",
		"getaccount":              "getaccount \"address\"\n\nDEPRECATED -- Lookup the account name that some wallet address belongs to.\n\nArguments:\n1. address (string, required) The address to query the account for\n\nResult:\n\"value\" (string) The name of the account that 'address' belongs to\n",
		"getaccountaddress":       "getaccountaddress \"account\"\n\nDEPRECATED -- Returns the most recent external payment address for an account that has not been seen publicly.\nA new address is generated for the account if the most recently generated address has been seen on the blockchain or in mempool.\n\nArguments:\n1. account (string, required) The account of the returned address\n\nResult:\n\"value\" (string) The unused address for 'account'\n",
		"getaddressesbyaccount":   "getaddressesbyaccount \"account\"\n\nDEPRECATED -- Returns all addresses strings controlled by a single account.\n\nArguments:\n1. account (string, required) Account name to fetch addresses for\n\nResult:\n[\"value\",...] (array of string) All addresses controlled by 'account'\n",
		"getbalance":              "getbalance (\"account\" minconf=1)\n\nCalculates and returns the balance of one or all accounts.\n\nArguments:\n1. account (string, optional)             DEPRECATED -- The account name to query the balance for, or \"*\" to consider all accounts (default=\"*\")\n2. minconf (numeric, optional, default=1) Minimum number of block confirmations required before an unspent output's value is included in the balance\n\nResult (account != \"*\"):\nn.nnn (numeric) The balance of 'account' valued in decred\n\nResult (account = \"*\"):\nn.nnn (numeric) The balance of all accounts valued in decred\n",
		"getbestblockhash":        "getbestblockhash\n\nReturns the hash of the newest block in the best chain that wallet has finished syncing with.\n\nArguments:\nNone\n\nResult:\n\"value\" (string) The hash of the most recent synced-to block\n",
		"getblockcount":           "getblockcount\n\nReturns the blockchain height of the newest block in the best chain that wallet has finished syncing with.\n\nArguments:\nNone\n\nResult:\nn.nnn (numeric) The blockchain height of the most recent synced-to block\n",
		"getinfo":                 "getinfo\n\nReturns a JSON object containing various state info.\n\nArguments:\nNone\n\nResult:\n{\n \"version\": n,          (numeric) The version of the server\n \"protocolversion\": n,  (numeric) The latest supported protocol version\n \"walletversion\": n,    (numeric) The version of the address manager database\n \"balance\": n.nnn,      (numeric) The balance of all accounts calculated with one block confirmation\n \"blocks\": n,           (numeric) The number of blocks processed\n \"timeoffset\": n,       (numeric) The time offset\n \"connections\": n,      (numeric) The number of connected peers\n \"proxy\": \"value\",      (string)  The proxy used by the server\n \"difficulty\": n.nnn,   (numeric) The current target difficulty\n \"testnet\": true|false, (boolean) Whether or not server is using testnet\n \"keypoololdest\": n,    (numeric) Unset\n \"keypoolsize\": n,      (numeric) Unset\n \"unlocked_until\": n,   (numeric) Unset\n \"paytxfee\": n.nnn,     (numeric) The fee per kB of the serialized tx size used each time more fee is required for an authored transaction\n \"relayfee\": n.nnn,     (numeric) The minimum relay fee for non-free transactions in DCR/KB\n \"errors\": \"value\",     (string)  Any current errors\n}                       \n",
		"getgenerate":             "getgenerate\n\nReturn current state of stake mining.\n\nArguments:\nNone\n\nResult:\ntrue|false (boolean) True if stake mining is enabled, false if it is not.\n",
		"getmasterpubkey":         "getmasterpubkey (\"account\")\n\nRequests the master pubkey from the wallet.\n\nArguments:\n1. account (string, optional) The account to get the master pubkey for\n\nResult:\n\"value\" (string) The master pubkey for the wallet\n",
		"getmultisigoutinfo":      "getmultisigoutinfo \"hash\" index\n\nReturns information about a multisignature output.\n\nArguments:\n1. hash  (string, required)  Input hash to check.\n2. index (numeric, required) Index of input.\n\nResult:\n{\n \"address\": \"value\",       (string)          Script address.\n \"redeemscript\": \"value\",  (string)          Hex of the redeeming script.\n \"m\": n,                   (numeric)         m (in m-of-n)\n \"n\": n,                   (numeric)         n (in m-of-n)\n \"pubkeys\": [\"value\",...], (array of string) Associated pubkeys.\n \"txhash\": \"value\",        (string)          txhash\n \"blockheight\": n,         (numeric)         Height of the containing block.\n \"blockhash\": \"value\",     (string)          Hash of the containing block.\n \"spent\": true|false,      (boolean)         If it has been spent.\n \"spentby\": \"value\",       (string)          Hash of spending tx.\n \"spentbyindex\": n,        (numeric)         Index of spending tx.\n \"amount\": n.nnn,          (numeric)         Amount of coins contained.\n}                          \n",
		"getseed":                 "getseed\n\nReturns the seed needed to recreate the wallet.\n\nArguments:\nNone\n\nResult:\n\"value\" (string) The seed cooresponding to the wallet.\n",
		"getnewaddress":           "getnewaddress (\"account\" verbose=false)\n\nGenerates and returns a new payment address.\n\nArguments:\n1. account (string, optional)                 DEPRECATED -- Account name the new address will belong to (default=\"default\")\n2. verbose (boolean, optional, default=false) Show pub key as well as address\n\nResult:\n\"value\" (string) The payment address\n",
		"getrawchangeaddress":     "getrawchangeaddress (\"account\" verbose=false)\n\nGenerates and returns a new internal payment address for use as a change address in raw transactions.\n\nArguments:\n1. account (string, optional)                 Account name the new internal address will belong to (default=\"default\")\n2. verbose (boolean, optional, default=false) Show pub key as well as address\n\nResult:\n\"value\" (string) The internal payment address\n",
		"getreceivedbyaccount":    "getreceivedbyaccount \"account\" (minconf=1)\n\nDEPRECATED -- Returns the total amount received by addresses of some account, including spent outputs.\n\nArguments:\n1. account (string, required)             Account name to query total received amount for\n2. minconf (numeric, optional, default=1) Minimum number of block confirmations required before an output's value is included in the total\n\nResult:\nn.nnn (numeric) The total received amount valued in decred\n",
		"getreceivedbyaddress":    "getreceivedbyaddress \"address\" (minconf=1)\n\nReturns the total amount received by a single address, including spent outputs.\n\nArguments:\n1. address (string, required)             Payment address which received outputs to include in total\n2. minconf (numeric, optional, default=1) Minimum number of block confirmations required before an output's value is included in the total\n\nResult:\nn.nnn (numeric) The total received amount valued in decred\n",
		"gettickets":              "gettickets includeimmature\n\nReturning the hashes of the tickets currently owned by wallet.\n\nArguments:\n1. includeimmature (boolean, required) If true include immature tickets in the results.\n\nResult:\n{\n \"hashes\": [\"value\",...], (array of string) Hashes of the tickets owned by the wallet encoded as strings\n}                         \n",
		"getticketmaxprice":       "getticketmaxprice\n\nReturns the max price the wallet will pay for a ticket.\n\nArguments:\nNone\n\nResult:\nn.nnn (numeric) Max price wallet will spend on a ticket.\n",
		"gettransaction":          "gettransaction \"txid\" (includewatchonly=false)\n\nReturns a JSON object with details regarding a transaction relevant to this wallet.\n\nArguments:\n1. txid             (string, required)                 Hash of the transaction to query\n2. includewatchonly (boolean, optional, default=false) Also consider transactions involving watched addresses\n\nResult:\n{\n \"amount\": n.nnn,                  (numeric)         The total amount this transaction credits to the wallet, valued in decred\n \"fee\": n.nnn,                     (numeric)         The total input value minus the total output value, or 0 if 'txid' is not a sent transaction\n \"confirmations\": n,               (numeric)         The number of block confirmations of the transaction\n \"blockhash\": \"value\",             (string)          The hash of the block this transaction is mined in, or the empty string if unmined\n \"blockindex\": n,                  (numeric)         Unset\n \"blocktime\": n,                   (numeric)         The Unix time of the block header this transaction is mined in, or 0 if unmined\n \"txid\": \"value\",                  (string)          The transaction hash\n \"walletconflicts\": [\"value\",...], (array of string) Unset\n \"time\": n,                        (numeric)         The earliest Unix time this transaction was known to exist\n \"timereceived\": n,                (numeric)         The earliest Unix time this transaction was known to exist\n \"details\": [{                     (array of object) Additional details for each recorded wallet credit and debit\n  \"account\": \"value\",              (string)          DEPRECATED -- Unset\n  \"address\": \"value\",              (string)          The address an output was paid to, or the empty string if the output is nonstandard or this detail is regarding a transaction input\n  \"amount\": n.nnn,                 (numeric)         The amount of a received output\n  \"category\": \"value\",             (string)          The kind of detail: \"send\" for sent transactions, \"immature\" for immature coinbase outputs, \"generate\" for mature coinbase outputs, or \"recv\" for all other received outputs\n  \"involveswatchonly\": true|false, (boolean)         Unset\n  \"fee\": n.nnn,                    (numeric)         The included fee for a sent transaction\n  \"vout\": n,                       (numeric)         The transaction output index\n },...],                                             \n \"hex\": \"value\",                   (string)          The transaction encoded as a hexadecimal string\n}                                  \n",
		"help":                    "help (\"command\")\n\nReturns a list of all commands or help for a specified command.\n\nArguments:\n1. command (string, optional) The command to retrieve help for\n\nResult (no command provided):\n\"value\" (string) List of commands\n\nResult (command specified):\n\"value\" (string) Help for specified command\n",
		"importprivkey":           "importprivkey \"privkey\" (\"label\" rescan=true scanfrom)\n\nImports a WIF-encoded private key to the 'imported' account.\n\nArguments:\n1. privkey  (string, required)                The WIF-encoded private key\n2. label    (string, optional)                Unused (must be unset or 'imported')\n3. rescan   (boolean, optional, default=true) Rescan the blockchain (since the genesis block, or scanfrom block) for outputs controlled by the imported key\n4. scanfrom (numeric, optional)               Block number for where to start rescan from\n\nResult:\nNothing\n",
		"importscript":            "importscript \"hex\" (rescan=true scanfrom)\n\nImport a redeem script.\n\nArguments:\n1. hex      (string, required)                Hex encoded script to import\n2. rescan   (boolean, optional, default=true) Rescansfdsfd the blockchain (since the genesis block, or scanfrom block) for outputs controlled by the imported key\n3. scanfrom (numeric, optional)               Block number for where to start rescan from\n\nResult:\nNothing\n",
		"keypoolrefill":           "keypoolrefill (newsize=100)\n\nDEPRECATED -- This request does nothing since no keypool is maintained.\n\nArguments:\n1. newsize (numeric, optional, default=100) Unused\n\nResult:\nNothing\n",
		"listaccounts":            "listaccounts (minconf=1)\n\nDEPRECATED -- Returns a JSON object of all accounts and their balances.\n\nArguments:\n1. minconf (numeric, optional, default=1) Minimum number of block confirmations required before an unspent output's value is included in the balance\n\nResult:\n{\n \"The account name\": The account balance valued in decred, (object) JSON object with account names as keys and decred amounts as values\n ...\n}\n",
		"listlockunspent":         "listlockunspent\n\nReturns a JSON array of outpoints marked as locked (with lockunspent) for this wallet session.\n\nArguments:\nNone\n\nResult:\n[{\n \"txid\": \"value\", (string)  The transaction hash of the referenced output\n \"vout\": n,       (numeric) The output index of the referenced output\n \"tree\": n,       (numeric) The tree to generate transaction for\n},...]\n",
		"listreceivedbyaccount":   "listreceivedbyaccount (minconf=1 includeempty=false includewatchonly=false)\n\nDEPRECATED -- Returns a JSON array of objects listing all accounts and the total amount received by each account.\n\nArguments:\n1. minconf          (numeric, optional, default=1)     Minimum number of block confirmations required before a transaction is considered\n2. includeempty     (boolean, optional, default=false) Unused\n3. includewatchonly (boolean, optional, default=false) Unused\n\nResult:\n[{\n \"account\": \"value\", (string)  The name of the account\n \"amount\": n.nnn,    (numeric) Total amount received by payment addresses of the account valued in decred\n \"confirmations\": n, (numeric) Number of block confirmations of the most recent transaction relevant to the account\n},...]\n",
		"listreceivedbyaddress":   "listreceivedbyaddress (minconf=1 includeempty=false includewatchonly=false)\n\nReturns a JSON array of objects listing wallet payment addresses and their total received amounts.\n\nArguments:\n1. minconf          (numeric, optional, default=1)     Minimum number of block confirmations required before a transaction is considered\n2. includeempty     (boolean, optional, default=false) Unused\n3. includewatchonly (boolean, optional, default=false) Unused\n\nResult:\n[{\n \"account\": \"value\",              (string)          DEPRECATED -- Unset\n \"address\": \"value\",              (string)          The payment address\n \"amount\": n.nnn,                 (numeric)         Total amount received by the payment address valued in decred\n \"confirmations\": n,              (numeric)         Number of block confirmations of the most recent transaction relevant to the address\n \"txids\": [\"value\",...],          (array of string) Transaction hashes of all transactions involving this address\n \"involvesWatchonly\": true|false, (boolean)         Unset\n},...]\n",
		"listsinceblock":          "listsinceblock (\"blockhash\" targetconfirmations=1 includewatchonly=false)\n\nReturns a JSON array of objects listing details of all wallet transactions after some block.\n\nArguments:\n1. blockhash           (string, optional)                 Hash of the parent block of the first block to consider transactions from, or unset to list all transactions\n2. targetconfirmations (numeric, optional, default=1)     Minimum number of block confirmations of the last block in the result object.  Must be 1 or greater.  Note: The transactions array in the result object is not affected by this parameter\n3. includewatchonly    (boolean, optional, default=false) Unused\n\nResult:\n{\n \"transactions\": [{                 (array of object) JSON array of objects containing verbose details of the each transaction\n  \"account\": \"value\",               (string)          DEPRECATED -- Unset\n  \"address\": \"value\",               (string)          Payment address for a transaction output\n  \"amount\": n.nnn,                  (numeric)         The value of the transaction output valued in decred\n  \"blockhash\": \"value\",             (string)          The hash of the block this transaction is mined in, or the empty string if unmined\n  \"blockindex\": n,                  (numeric)         Unset\n  \"blocktime\": n,                   (numeric)         The Unix time of the block header this transaction is mined in, or 0 if unmined\n  \"category\": \"value\",              (string)          The kind of transaction: \"send\" for sent transactions, \"immature\" for immature coinbase outputs, \"generate\" for mature coinbase outputs, or \"recv\" for all other received outputs.  Note: A single output may be included multiple times under different categories\n  \"confirmations\": n,               (numeric)         The number of block confirmations of the transaction\n  \"fee\": n.nnn,                     (numeric)         The total input value minus the total output value for sent transactions\n  \"generated\": true|false,          (boolean)         Whether the transaction output is a coinbase output\n  \"involveswatchonly\": true|false,  (boolean)         Unset\n  \"time\": n,                        (numeric)         The earliest Unix time this transaction was known to exist\n  \"timereceived\": n,                (numeric)         The earliest Unix time this transaction was known to exist\n  \"txid\": \"value\",                  (string)          The hash of the transaction\n  \"txtype\": \"value\",                (string)          The type of tx (regular tx, stake tx)\n  \"vout\": n,                        (numeric)         The transaction output index\n  \"walletconflicts\": [\"value\",...], (array of string) Unset\n  \"comment\": \"value\",               (string)          Unset\n  \"otheraccount\": \"value\",          (string)          Unset\n },...],                                              \n \"lastblock\": \"value\",              (string)          Hash of the latest-synced block to be used in later calls to listsinceblock\n}                                   \n",
		"listtransactions":        "listtransactions (\"account\" count=10 from=0 includewatchonly=false)\n\nReturns a JSON array of objects containing verbose details for wallet transactions.\n\nArguments:\n1. account          (string, optional)                 DEPRECATED -- Unused (must be unset or \"*\")\n2. count            (numeric, optional, default=10)    Maximum number of transactions to create results from\n3. from             (numeric, optional, default=0)     Number of transactions to skip before results are created\n4. includewatchonly (boolean, optional, default=false) Unused\n\nResult:\n[{\n \"account\": \"value\",               (string)          DEPRECATED -- Unset\n \"address\": \"value\",               (string)          Payment address for a transaction output\n \"amount\": n.nnn,                  (numeric)         The value of the transaction output valued in decred\n \"blockhash\": \"value\",             (string)          The hash of the block this transaction is mined in, or the empty string if unmined\n \"blockindex\": n,                  (numeric)         Unset\n \"blocktime\": n,                   (numeric)         The Unix time of the block header this transaction is mined in, or 0 if unmined\n \"category\": \"value\",              (string)          The kind of transaction: \"send\" for sent transactions, \"immature\" for immature coinbase outputs, \"generate\" for mature coinbase outputs, or \"recv\" for all other received outputs.  Note: A single output may be included multiple times under different categories\n \"confirmations\": n,               (numeric)         The number of block confirmations of the transaction\n \"fee\": n.nnn,                     (numeric)         The total input value minus the total output value for sent transactions\n \"generated\": true|false,          (boolean)         Whether the transaction output is a coinbase output\n \"involveswatchonly\": true|false,  (boolean)         Unset\n \"time\": n,                        (numeric)         The earliest Unix time this transaction was known to exist\n \"timereceived\": n,                (numeric)         The earliest Unix time this transaction was known to exist\n \"txid\": \"value\",                  (string)          The hash of the transaction\n \"txtype\": \"value\",                (string)          The type of tx (regular tx, stake tx)\n \"vout\": n,                        (numeric)         The transaction output index\n \"walletconflicts\": [\"value\",...], (array of string) Unset\n \"comment\": \"value\",               (string)          Unset\n \"otheraccount\": \"value\",          (string)          Unset\n},...]\n",
		"listunspent":             "listunspent (minconf=1 maxconf=9999999 [\"address\",...])\n\nReturns a JSON array of objects representing unlocked unspent outputs controlled by wallet keys.\n\nArguments:\n1. minconf   (numeric, optional, default=1)       Minimum number of block confirmations required before a transaction output is considered\n2. maxconf   (numeric, optional, default=9999999) Maximum number of block confirmations required before a transaction output is excluded\n3. addresses (array of string, optional)          If set, limits the returned details to unspent outputs received by any of these payment addresses\n\nResult:\n{\n \"txid\": \"value\",         (string)  The transaction hash of the referenced output\n \"vout\": n,               (numeric) The output index of the referenced output\n \"tree\": n,               (numeric) The tree the transaction comes from\n \"txtype\": n,             (numeric) The type of the transaction\n \"address\": \"value\",      (string)  The payment address that received the output\n \"account\": \"value\",      (string)  The account associated with the receiving payment address\n \"scriptPubKey\": \"value\", (string)  The output script encoded as a hexadecimal string\n \"redeemScript\": \"value\", (string)  Unset\n \"amount\": n.nnn,         (numeric) The amount of the output valued in decred\n \"confirmations\": n,      (numeric) The number of block confirmations of the transaction\n \"spendable\": true|false, (boolean) Whether the output is entirely controlled by wallet keys/scripts (false for partially controlled multisig outputs or outputs to watch-only addresses)\n}                         \n",
		"lockunspent":             "lockunspent unlock [{\"txid\":\"value\",\"vout\":n,\"tree\":n},...]\n\nLocks or unlocks an unspent output.\nLocked outputs are not chosen for transaction inputs of authored transactions and are not included in 'listunspent' results.\nLocked outputs are volatile and are not saved across wallet restarts.\nIf unlock is true and no transaction outputs are specified, all locked outputs are marked unlocked.\n\nArguments:\n1. unlock       (boolean, required)         True to unlock outputs, false to lock\n2. transactions (array of object, required) Transaction outputs to lock or unlock\n[{\n \"txid\": \"value\", (string)  The transaction hash of the referenced output\n \"vout\": n,       (numeric) The output index of the referenced output\n \"tree\": n,       (numeric) The tree to generate transaction for\n},...]\n\nResult:\ntrue|false (boolean) The boolean 'true'\n",
		"redeemmultisigout":       "redeemmultisigout \"hash\" index tree (\"address\")\n\nTakes the input and constructs a P2PKH paying to the specified address.\n\nArguments:\n1. hash    (string, required)  Hash of the input transaction\n2. index   (numeric, required) Idx of the input transaction\n3. tree    (numeric, required) Tree the transaction is on.\n4. address (string, optional)  Address to pay to.\n\nResult:\n{\n \"hex\": \"value\",         (string)          Resulting hash.\n \"complete\": true|false, (boolean)         Shows if opperation was completed.\n \"errors\": [{            (array of object) Any errors generated.\n  \"txid\": \"value\",       (string)          The transaction hash of the referenced previous output\n  \"vout\": n,             (numeric)         The output index of the referenced previous output\n  \"scriptSig\": \"value\",  (string)          The hex-encoded signature script\n  \"sequence\": n,         (numeric)         Script sequence number\n  \"error\": \"value\",      (string)          Verification or signing error related to the input\n },...],                                   \n}                        \n",
		"redeemmultisigouts":      "redeemmultisigouts \"fromscraddress\" (\"toaddress\" number)\n\nTakes a hash, looks up all unspent outpoints and generates list artially signed transactions spending to either an address specified or internal addresses\n\nArguments:\n1. fromscraddress (string, required)  Input script hash address.\n2. toaddress      (string, optional)  Address to look for (if not internal addresses).\n3. number         (numeric, optional) Number of outpoints found.\n\nResult:\n{\n \"hex\": \"value\",         (string)          Resulting hash.\n \"complete\": true|false, (boolean)         Shows if opperation was completed.\n \"errors\": [{            (array of object) Any errors generated.\n  \"txid\": \"value\",       (string)          The transaction hash of the referenced previous output\n  \"vout\": n,             (numeric)         The output index of the referenced previous output\n  \"scriptSig\": \"value\",  (string)          The hex-encoded signature script\n  \"sequence\": n,         (numeric)         Script sequence number\n  \"error\": \"value\",      (string)          Verification or signing error related to the input\n },...],                                   \n}                        \n",
		"rescanwallet":            "rescanwallet (beginheight=0)\n\nRescan the block chain for wallet data, blocking until the rescan completes or exits with an error\n\nArguments:\n1. beginheight (numeric, optional, default=0) The height of the first block to begin the rescan from\n\nResult:\nNothing\n",
		"sendfrom":                "sendfrom \"fromaccount\" \"toaddress\" amount (minconf=1 \"comment\" \"commentto\")\n\nDEPRECATED -- Authors, signs, and sends a transaction that outputs some amount to a payment address.\nA change output is automatically included to send extra output value back to the original account.\n\nArguments:\n1. fromaccount (string, required)             Account to pick unspent outputs from\n2. toaddress   (string, required)             Address to pay\n3. amount      (numeric, required)            Amount to send to the payment address valued in decred\n4. minconf     (numeric, optional, default=1) Minimum number of block confirmations required before a transaction output is eligible to be spent\n5. comment     (string, optional)             Unused\n6. commentto   (string, optional)             Unused\n\nResult:\n\"value\" (string) The transaction hash of the sent transaction\n",
		"sendmany":                "sendmany \"fromaccount\" {\"address\":amount,...} (minconf=1 \"comment\")\n\nAuthors, signs, and sends a transaction that outputs to many payment addresses.\nA change output is automatically included to send extra output value back to the original account.\n\nArguments:\n1. fromaccount (string, required) DEPRECATED -- Account to pick unspent outputs from\n2. amounts     (object, required) Pairs of payment addresses and the output amount to pay each\n{\n \"Address to pay\": Amount to send to the payment address valued in decred, (object) JSON object using payment addresses as keys and output amounts valued in decred to send to each address\n ...\n}\n3. minconf (numeric, optional, default=1) Minimum number of block confirmations required before a transaction output is eligible to be spent\n4. comment (string, optional)             Unused\n\nResult:\n\"value\" (string) The transaction hash of the sent transaction\n",
		"sendtoaddress":           "sendtoaddress \"address\" amount (\"comment\" \"commentto\")\n\nAuthors, signs, and sends a transaction that outputs some amount to a payment address.\nUnlike sendfrom, outputs are always chosen from the default account.\nA change output is automatically included to send extra output value back to the original account.\n\nArguments:\n1. address   (string, required)  Address to pay\n2. amount    (numeric, required) Amount to send to the payment address valued in decred\n3. comment   (string, optional)  Unused\n4. commentto (string, optional)  Unused\n\nResult:\n\"value\" (string) The transaction hash of the sent transaction\n",
		"sendtomultisig":          "sendtomultisig \"fromaccount\" amount [\"pubkey\",...] (nrequired=1 minconf=1 \"comment\")\n\nAuthors, signs, and sends a transaction that outputs some amount to a multisig address.\nUnlike sendfrom, outputs are always chosen from the default account.\nA change output is automatically included to send extra output value back to the original account.\n\nArguments:\n1. fromaccount (string, required)             Unused\n2. amount      (numeric, required)            Amount to send to the payment address valued in decred\n3. pubkeys     (array of string, required)    Pubkey to send to.\n4. nrequired   (numeric, optional, default=1) The number of signatures required to redeem outputs paid to this address\n5. minconf     (numeric, optional, default=1) Minimum number of block confirmations required\n6. comment     (string, optional)             Unused\n\nResult:\n\"value\" (string) The transaction hash of the sent transaction\n",
		"setgenerate":             "setgenerate generate (genproclimit=-1)\n\nEnable or disable stake mining\n\nArguments:\n1. generate     (boolean, required)             True to enable stake mining, false to disable.\n2. genproclimit (numeric, optional, default=-1) Not used for stake mining\n\nResult:\nNothing\n",
		"setticketmaxprice":       "setticketmaxprice max\n\nSet the max price user is willing to pay for a ticket.\n\nArguments:\n1. max (numeric, required) The max price (in dcr).\n\nResult:\nNothing\n",
		"settxfee":                "settxfee amount\n\nModify the fee per kB of the serialized tx size used each time more fee is required for an authored transaction.\n\nArguments:\n1. amount (numeric, required) The new fee per kB of the serialized tx size valued in decred\n\nResult:\ntrue|false (boolean) The boolean 'true'\n",
		"signmessage":             "signmessage \"address\" \"message\"\n\nSigns a message using the private key of a payment address.\n\nArguments:\n1. address (string, required) Payment address of private key used to sign the message with\n2. message (string, required) Message to sign\n\nResult:\n\"value\" (string) The signed message encoded as a base64 string\n",
		"signrawtransaction":      "signrawtransaction \"rawtx\" ([{\"txid\":\"value\",\"vout\":n,\"tree\":n,\"scriptpubkey\":\"value\",\"redeemscript\":\"value\"},...] [\"privkey\",...] flags=\"ALL\")\n\nSigns transaction inputs using private keys from this wallet and request.\nThe valid flags options are ALL, NONE, SINGLE, ALL|ANYONECANPAY, NONE|ANYONECANPAY, and SINGLE|ANYONECANPAY.\n\nArguments:\n1. rawtx    (string, required)                Unsigned or partially unsigned transaction to sign encoded as a hexadecimal string\n2. inputs   (array of object, optional)       Additional data regarding inputs that this wallet may not be tracking\n3. privkeys (array of string, optional)       Additional WIF-encoded private keys to use when creating signatures\n4. flags    (string, optional, default=\"ALL\") Sighash flags\n\nResult:\n{\n \"hex\": \"value\",         (string)          The resulting transaction encoded as a hexadecimal string\n \"complete\": true|false, (boolean)         Whether all input signatures have been created\n \"errors\": [{            (array of object) Script verification errors (if exists)\n  \"txid\": \"value\",       (string)          The transaction hash of the referenced previous output\n  \"vout\": n,             (numeric)         The output index of the referenced previous output\n  \"scriptSig\": \"value\",  (string)          The hex-encoded signature script\n  \"sequence\": n,         (numeric)         Script sequence number\n  \"error\": \"value\",      (string)          Verification or signing error related to the input\n },...],                                   \n}                        \n",
		"signrawtransactions":     "signrawtransactions [\"rawtx\",...] (send=true)\n\nSigns transaction inputs using private keys from this wallet and request for a list of transactions.\n\n\nArguments:\n1. rawtxs (array of string, required)       A list of transactions to sign (and optionally send).\n2. send   (boolean, optional, default=true) Set true to send the transactions after signing.\n\nResult:\n{\n \"results\": [{             (array of object) Returned values from the signrawtransactions command.\n  \"signingresult\": {       (object)          Success or failure of signing.\n   \"hex\": \"value\",         (string)          The resulting transaction encoded as a hexadecimal string\n   \"complete\": true|false, (boolean)         Whether all input signatures have been created\n   \"errors\": [{            (array of object) Script verification errors (if exists)\n    \"txid\": \"value\",       (string)          The transaction hash of the referenced previous output\n    \"vout\": n,             (numeric)         The output index of the referenced previous output\n    \"scriptSig\": \"value\",  (string)          The hex-encoded signature script\n    \"sequence\": n,         (numeric)         Script sequence number\n    \"error\": \"value\",      (string)          Verification or signing error related to the input\n   },...],                                   \n  },                                         \n  \"sent\": true|false,      (boolean)         Tells if the transaction was sent.\n  \"txhash\": \"value\",       (string)          The hash of the signed tx.\n },...],                                     \n}                          \n",
		"validateaddress":         "validateaddress \"address\"\n\nVerify that an address is valid.\nExtra details are returned if the address is controlled by this wallet.\nThe following fields are valid only when the address is controlled by this wallet (ismine=true): isscript, pubkey, iscompressed, account, addresses, hex, script, and sigsrequired.\nThe following fields are only valid when address has an associated public key: pubkey, iscompressed.\nThe following fields are only valid when address is a pay-to-script-hash address: addresses, hex, and script.\nIf the address is a multisig address controlled by this wallet, the multisig fields will be left unset if the wallet is locked since the redeem script cannot be decrypted.\n\nArguments:\n1. address (string, required) Address to validate\n\nResult:\n{\n \"isvalid\": true|false,      (boolean)         Whether or not the address is valid\n \"address\": \"value\",         (string)          The payment address (only when isvalid is true)\n \"ismine\": true|false,       (boolean)         Whether this address is controlled by the wallet (only when isvalid is true)\n \"iswatchonly\": true|false,  (boolean)         Unset\n \"isscript\": true|false,     (boolean)         Whether the payment address is a pay-to-script-hash address (only when isvalid is true)\n \"pubkeyaddr\": \"value\",      (string)          The pubkey for this payment address (only when isvalid is true)\n \"pubkey\": \"value\",          (string)          The associated public key of the payment address, if any (only when isvalid is true)\n \"iscompressed\": true|false, (boolean)         Whether the address was created by hashing a compressed public key, if any (only when isvalid is true)\n \"account\": \"value\",         (string)          The account this payment address belongs to (only when isvalid is true)\n \"addresses\": [\"value\",...], (array of string) All associated payment addresses of the script if address is a multisig address (only when isvalid is true)\n \"hex\": \"value\",             (string)          The redeem script \n \"script\": \"value\",          (string)          The class of redeem script for a multisig address\n \"sigsrequired\": n,          (numeric)         The number of required signatures to redeem outputs to the multisig address\n}                            \n",
		"verifymessage":           "verifymessage \"address\" \"signature\" \"message\"\n\nVerify a message was signed with the associated private key of some address.\n\nArguments:\n1. address   (string, required) Address used to sign message\n2. signature (string, required) The signature to verify\n3. message   (string, required) The message to verify\n\nResult:\ntrue|false (boolean) Whether the message was signed with the private key of 'address'\n",
		"version":                 "version\n\nReturns application and API versions (semver) keyed by their names\n\nArguments:\nNone\n\nResult:\n{\n \"Program or API name\": Object containing the semantic version, (object) Version objects keyed by the program or API name\n ...\n}\n",
		"walletlock":              "walletlock\n\nLock the wallet.\n\nArguments:\nNone\n\nResult:\nNothing\n",
		"walletpassphrase":        "walletpassphrase \"passphrase\" timeout\n\nUnlock the wallet.\n\nArguments:\n1. passphrase (string, required)  The wallet passphrase\n2. timeout    (numeric, required) The number of seconds to wait before the wallet automatically locks\n\nResult:\nNothing\n",
		"walletpassphrasechange":  "walletpassphrasechange \"oldpassphrase\" \"newpassphrase\"\n\nChange the wallet passphrase.\n\nArguments:\n1. oldpassphrase (string, required) The old wallet passphrase\n2. newpassphrase (string, required) The new wallet passphrase\n\nResult:\nNothing\n",
		"createnewaccount":        "createnewaccount \"account\"\n\nCreates a new account.\nThe wallet must be unlocked for this request to succeed.\n\nArguments:\n1. account (string, required) Name of the new account\n\nResult:\nNothing\n",
		"exportwatchingwallet":    "exportwatchingwallet (\"account\" download=false)\n\nCreates and returns a duplicate of the wallet database without any private keys to be used as a watching-only wallet.\n\nArguments:\n1. account  (string, optional)                 Unused (must be unset or \"*\")\n2. download (boolean, optional, default=false) Unused\n\nResult:\n\"value\" (string) The watching-only database encoded as a base64 string\n",
		"getbestblock":            "getbestblock\n\nReturns the hash and height of the newest block in the best chain that wallet has finished syncing with.\n\nArguments:\nNone\n\nResult:\n{\n \"hash\": \"value\", (string)  The hash of the block\n \"height\": n,     (numeric) The blockchain height of the block\n}                 \n",
		"getunconfirmedbalance":   "getunconfirmedbalance (\"account\")\n\nCalculates the unspent output value of all unmined transaction outputs for an account.\n\nArguments:\n1. account (string, optional) The account to query the unconfirmed balance for (default=\"default\")\n\nResult:\nn.nnn (numeric) Total amount of all unmined unspent outputs of the account valued in decred.\n",
		"listaddresstransactions": "listaddresstransactions [\"address\",...] (\"account\")\n\nReturns a JSON array of objects containing verbose details for wallet transactions pertaining some addresses.\n\nArguments:\n1. addresses (array of string, required) Addresses to filter transaction results by\n2. account   (string, optional)          Unused (must be unset or \"*\")\n\nResult:\n[{\n \"account\": \"value\",               (string)          DEPRECATED -- Unset\n \"address\": \"value\",               (string)          Payment address for a transaction output\n \"amount\": n.nnn,                  (numeric)         The value of the transaction output valued in decred\n \"blockhash\": \"value\",             (string)          The hash of the block this transaction is mined in, or the empty string if unmined\n \"blockindex\": n,                  (numeric)         Unset\n \"blocktime\": n,                   (numeric)         The Unix time of the block header this transaction is mined in, or 0 if unmined\n \"category\": \"value\",              (string)          The kind of transaction: \"send\" for sent transactions, \"immature\" for immature coinbase outputs, \"generate\" for mature coinbase outputs, or \"recv\" for all other received outputs.  Note: A single output may be included multiple times under different categories\n \"confirmations\": n,               (numeric)         The number of block confirmations of the transaction\n \"fee\": n.nnn,                     (numeric)         The total input value minus the total output value for sent transactions\n \"generated\": true|false,          (boolean)         Whether the transaction output is a coinbase output\n \"involveswatchonly\": true|false,  (boolean)         Unset\n \"time\": n,                        (numeric)         The earliest Unix time this transaction was known to exist\n \"timereceived\": n,                (numeric)         The earliest Unix time this transaction was known to exist\n \"txid\": \"value\",                  (string)          The hash of the transaction\n \"txtype\": \"value\",                (string)          The type of tx (regular tx, stake tx)\n \"vout\": n,                        (numeric)         The transaction output index\n \"walletconflicts\": [\"value\",...], (array of string) Unset\n \"comment\": \"value\",               (string)          Unset\n \"otheraccount\": \"value\",          (string)          Unset\n},...]\n",
		"listalltransactions":     "listalltransactions (\"account\")\n\nReturns a JSON array of objects in the same format as 'listtransactions' without limiting the number of returned objects.\n\nArguments:\n1. account (string, optional) Unused (must be unset or \"*\")\n\nResult:\n[{\n \"account\": \"value\",               (string)          DEPRECATED -- Unset\n \"address\": \"value\",               (string)          Payment address for a transaction output\n \"amount\": n.nnn,                  (numeric)         The value of the transaction output valued in decred\n \"blockhash\": \"value\",             (string)          The hash of the block this transaction is mined in, or the empty string if unmined\n \"blockindex\": n,                  (numeric)         Unset\n \"blocktime\": n,                   (numeric)         The Unix time of the block header this transaction is mined in, or 0 if unmined\n \"category\": \"value\",              (string)          The kind of transaction: \"send\" for sent transactions, \"immature\" for immature coinbase outputs, \"generate\" for mature coinbase outputs, or \"recv\" for all other received outputs.  Note: A single output may be included multiple times under different categories\n \"confirmations\": n,               (numeric)         The number of block confirmations of the transaction\n \"fee\": n.nnn,                     (numeric)         The total input value minus the total output value for sent transactions\n \"generated\": true|false,          (boolean)         Whether the transaction output is a coinbase output\n \"involveswatchonly\": true|false,  (boolean)         Unset\n \"time\": n,                        (numeric)         The earliest Unix time this transaction was known to exist\n \"timereceived\": n,                (numeric)         The earliest Unix time this transaction was known to exist\n \"txid\": \"value\",                  (string)          The hash of the transaction\n \"txtype\": \"value\",                (string)          The type of tx (regular tx, stake tx)\n \"vout\": n,                        (numeric)         The transaction output index\n \"walletconflicts\": [\"value\",...], (array of string) Unset\n \"comment\": \"value\",               (string)          Unset\n \"otheraccount\": \"value\",          (string)          Unset\n},...]\n",
		"renameaccount":           "renameaccount \"oldaccount\" \"newaccount\"\n\nRenames an account.\n\nArguments:\n1. oldaccount (string, required) The old account name to rename\n2. newaccount (string, required) The new name for the account\n\nResult:\nNothing\n",
		"walletislocked":          "walletislocked\n\nReturns whether or not the wallet is locked.\n\nArguments:\nNone\n\nResult:\ntrue|false (boolean) Whether the wallet is locked\n",
		"walletinfo":              "walletinfo\n\nReturns global information about the wallet\n\nArguments:\nNone\n\nResult:\n{\n \"daemonconnected\": true|false, (boolean) Whether or not the wallet is currently connected to the daemon RPC\n \"unlocked\": true|false,        (boolean) Whether or not the wallet is unlocked\n \"txfee\": n.nnn,                (numeric) Transaction fee per kB of the serialized tx size in coins\n \"ticketfee\": n.nnn,            (numeric) Ticket fee per kB of the serialized tx size in coins\n \"ticketmaxprice\": n.nnn,       (numeric) The maximum price to pay for a ticket\n \"balancetomaintain\": n.nnn,    (numeric) The balance to try to maintain while purchasing tickets\n \"stakemining\": true|false,     (boolean) Whether or not the wallet is currently stake mining\n}                               \n",
		"purchaseticket":          "purchaseticket \"fromaccount\" spendlimit (minconf=1 \"ticketaddress\" numtickets \"pooladdress\" poolfees expiry \"comment\")\n\nPurchase ticket using available funds.\n\nArguments:\n1. fromaccount   (string, required)             The account to use for purchase (default=\"default\")\n2. spendlimit    (numeric, required)            Limit on the amount to spend on ticket\n3. minconf       (numeric, optional, default=1) Minimum number of block confirmations required\n4. ticketaddress (string, optional)             Override the ticket address to which voting rights are given\n5. numtickets    (numeric, optional)            The number of tickets to purchase\n6. pooladdress   (string, optional)             The address to pay stake pool fees to\n7. poolfees      (numeric, optional)            The amount of fees to pay to the stake pool\n8. expiry        (numeric, optional)            Height at which the purchase tickets expire\n9. comment       (string, optional)             Unused\n\nResult:\n\"value\" (string) Hash of the resulting ticket\n",
		"sendtossrtx":             "sendtossrtx \"fromaccount\" \"tickethash\" (\"comment\")\n\nSend to SS Revocation transaction\n\nArguments:\n1. fromaccount (string, required) The account to spend a stake ticket from (default=\"default\")\n2. tickethash  (string, required) Hash of the ticket to be revoked\n3. comment     (string, optional) Unused\n\nResult:\n\"value\" (string) txid of the resulting transaction\n",
		"sendtosstx":              "sendtosstx \"fromaccount\" amounts [{\"txid\":\"value\",\"vout\":n,\"tree\":n,\"amt\":n},...] [{\"addr\":\"value\",\"commitamt\":n,\"changeaddr\":\"value\",\"changeamt\":n},...] (minconf=1 \"comment\")\n\nSend to SStx\n\nArguments:\n1. fromaccount (string, required) The account sent from\n2. amounts     (object, required) Amounts to send\n{\n \"Key\": Value, (object) Unused\n ...\n}\n3. inputs (array of object, required) Inputs for the tx\n[{\n \"txid\": \"value\", (string)  Txid to use\n \"vout\": n,       (numeric) Vout for the input tx\n \"tree\": n,       (numeric) Input tree\n \"amt\": n,        (numeric) Amount\n},...]\n4. couts (array of object, required) Couts for the tx\n[{\n \"addr\": \"value\",       (string)  Address to use\n \"commitamt\": n,        (numeric) Amount to commit\n \"changeaddr\": \"value\", (string)  Change address to use\n \"changeamt\": n,        (numeric) Change amount\n},...]\n5. minconf (numeric, optional, default=1) Minimum number of block confirmations required\n6. comment (string, optional)             Unused\n\nResult:\n\"value\" (string) txid of the resulting transaction\n",
		"sendtossgen":             "sendtossgen \"fromaccount\" \"tickethash\" \"blockhash\" height votebits (\"comment\")\n\nGenerate a vote tx\n\nArguments:\n1. fromaccount (string, required)  The account to use (default=\"default\")\n2. tickethash  (string, required)  Hash of the ticket used for vote\n3. blockhash   (string, required)  Hash for the block being voted on\n4. height      (numeric, required) Blockheight for vote\n5. votebits    (numeric, required) Votebits to set\n6. comment     (string, optional)  Unused\n\nResult:\n\"value\" (string) txid of the resulting transaction\n",
		"getticketvotebits":       "getticketvotebits \"txhash\"\n\nRetrieve the intended voteBits for any given ticket\n\nArguments:\n1. txhash (string, required) The hash of the ticket\n\nResult:\n{\n \"votebitsdata\": {        (object)  The voteBits and extended voteBits for this ticket\n  \"votebits\": n,          (numeric) The voteBits for this ticket\n  \"votebitsext\": \"value\", (string)  The extended voteBits for this ticket\n },                                 \n}                         \n",
		"getticketsvotebits":      "getticketsvotebits [\"txhash\",...]\n\nRetrieve the intended voteBits for any given list of tickets\n\nArguments:\n1. txhashes (array of string, required) The list of ticket hashes\n\nResult:\n{\n \"votebitslist\": [{       (array of object) The voteBits and extended voteBits for all tickets passed\n  \"votebits\": n,          (numeric)         The voteBits for this ticket\n  \"votebitsext\": \"value\", (string)          The extended voteBits for this ticket\n },...],                                    \n}                         \n",
		"setticketvotebits":       "setticketvotebits \"txhash\" votebits (\"votebitsext\")\n\nSet the voteBits to be used when voting for any given ticket\n\nArguments:\n1. txhash      (string, required)  The hash of the ticket\n2. votebits    (numeric, required) The voteBits to set for the ticket\n3. votebitsext (string, optional)  The extended voteBits to set for the ticket\n\nResult:\nNothing\n",
		"setticketsvotebits":      "setticketsvotebits \"txhashes\" \"votebitsbytes\"\n\nSet the vote bits for several tickets\n\nArguments:\n1. txhashes      (string, required) The non-byte-reversed transaction hashes of each ticket being set, concatenated into a single hex string\n2. votebitsbytes (string, required) Hexadecimal encodings of a custom binary vote bits encoding for each ticket hash, concatenated together into a single hex string\n\nResult:\nNothing\n",
		"getstakeinfo":            "getstakeinfo\n\nReturns statistics about staking from the wallet.\n\nArguments:\nNone\n\nResult:\n{\n \"blockheight\": n,          (numeric) Current block height for stake info.\n \"poolsize\": n,             (numeric) Number of live tickets in the ticket pool.\n \"difficulty\": n.nnn,       (numeric) Current stake difficulty.\n \"allmempooltix\": n,        (numeric) Number of tickets currently in the mempool\n \"ownmempooltix\": n,        (numeric) Number of tickets submitted by this wallet currently in mempool\n \"immature\": n,             (numeric) Number of tickets from this wallet that are in the blockchain but which are not yet mature\n \"live\": n,                 (numeric) Number of mature, active tickets owned by this wallet\n \"proportionlive\": n.nnn,   (numeric) (Live / PoolSize)\n \"voted\": n,                (numeric) Number of votes cast by this wallet\n \"totalsubsidy\": n.nnn,     (numeric) Total amount of coins earned by stake mining\n \"missed\": n,               (numeric) Number of missed tickets (failing to vote or expired)\n \"proportionmissed\": n.nnn, (numeric) (Missed / (Missed + Voted))\n \"revoked\": n,              (numeric) Number of missed tickets that were missed and then revoked\n \"expired\": n,              (numeric) Number of tickets that have expired\n}                           \n",
		"getticketfee":            "getticketfee\n\nGet the current fee per kB of the serialized tx size used for an authored stake transaction.\n\nArguments:\nNone\n\nResult:\nn.nnn (numeric) The current fee\n",
		"setticketfee":            "setticketfee fee\n\nModify the fee per kB of the serialized tx size used each time more fee is required for an authored stake transaction.\n\nArguments:\n1. fee (numeric, required) The new fee per kB of the serialized tx size valued in decred\n\nResult:\ntrue|false (boolean) The boolean 'true'\n",
		"getwalletfee":            "getwalletfee\n\nGet currently set transaction fee for the wallet\n\nArguments:\nNone\n\nResult:\nn.nnn (numeric) Current tx fee (in DCR)\n",
		"addticket":               "addticket \"tickethex\"\n\nAdd ticket to stakepool for watching\n\nArguments:\n1. tickethex (string, required) Hash of ticket that is attempting to be added\n\nResult:\nNothing\n",
		"listscripts":             "listscripts\n\nList all scripts that have been added to wallet\n\nArguments:\nNone\n\nResult:\n{\n \"scripts\": [{             (array of object) A list of the imported scripts\n  \"hash160\": \"value\",      (string)          The script hash\n  \"address\": \"value\",      (string)          The script address\n  \"redeemscript\": \"value\", (string)          The redeem script\n },...],                                     \n}                          \n",
		"stakepooluserinfo":       "stakepooluserinfo \"user\"\n\nGet user info for stakepool\n\nArguments:\n1. user (string, required) The id of the user to be looked up\n\nResult:\n{\n \"tickets\": [{             (array of object) A list of valid tickets that the user has added\n  \"status\": \"value\",       (string)          The current status of the added ticket\n  \"ticket\": \"value\",       (string)          The hash of the added ticket\n  \"ticketheight\": n,       (numeric)         The height in which the ticket was added\n  \"spentby\": \"value\",      (string)          The vote in which the ticket was spent\n  \"spentbyheight\": n,      (numeric)         The height in which the ticket was spent\n },...],                                     \n \"invalid\": [\"value\",...], (array of string) A list of invalid tickets that the user has added\n}                          \n",
		"setbalancetomaintain":    "setbalancetomaintain balance\n\nModify the balance for wallet to maintain for automatic ticket purchasing\n\nArguments:\n1. balance (numeric, required) The new balance for wallet to maintain for automatic ticket purchasing\n\nResult:\ntrue|false (boolean) Should return nothing\n",
		"getbalancetomaintain":    "getbalancetomaintain\n\nGet the current balance to maintain\n\nArguments:\nNone\n\nResult:\ntrue|false (boolean) The current balancetomaintain\n",
		"ticketsforaddress":       "ticketsforaddress \"address\"\n\nRequest all the tickets for an address.\n\nArguments:\n1. address (string, required) Address to look for.\n\nResult:\ntrue|false (boolean) Tickets owned by the specified address.\n",
	}
}

var localeHelpDescs = map[string]func() map[string]string{
	"en_US": helpDescsEnUS,
}

var requestUsages = "accountaddressindex \"account\" branch\naccountfetchaddresses \"account\" branch start end\naccountsyncaddressindex \"account\" branch index\naddmultisigaddress nrequired [\"key\",...] (\"account\")\nconsolidate inputs (\"account\" \"address\")\ncreatemultisig nrequired [\"key\",...]\ndumpprivkey \"address\"\ngetaccount \"address\"\ngetaccountaddress \"account\"\ngetaddressesbyaccount \"account\"\ngetbalance (\"account\" minconf=1)\ngetbestblockhash\ngetblockcount\ngetinfo\ngetgenerate\ngetmasterpubkey (\"account\")\ngetmultisigoutinfo \"hash\" index\ngetseed\ngetnewaddress (\"account\" verbose=false)\ngetrawchangeaddress (\"account\" verbose=false)\ngetreceivedbyaccount \"account\" (minconf=1)\ngetreceivedbyaddress \"address\" (minconf=1)\ngettickets includeimmature\ngetticketmaxprice\ngettransaction \"txid\" (includewatchonly=false)\nhelp (\"command\")\nimportprivkey \"privkey\" (\"label\" rescan=true scanfrom)\nimportscript \"hex\" (rescan=true scanfrom)\nkeypoolrefill (newsize=100)\nlistaccounts (minconf=1)\nlistlockunspent\nlistreceivedbyaccount (minconf=1 includeempty=false includewatchonly=false)\nlistreceivedbyaddress (minconf=1 includeempty=false includewatchonly=false)\nlistsinceblock (\"blockhash\" targetconfirmations=1 includewatchonly=false)\nlisttransactions (\"account\" count=10 from=0 includewatchonly=false)\nlistunspent (minconf=1 maxconf=9999999 [\"address\",...])\nlockunspent unlock [{\"txid\":\"value\",\"vout\":n,\"tree\":n},...]\nredeemmultisigout \"hash\" index tree (\"address\")\nredeemmultisigouts \"fromscraddress\" (\"toaddress\" number)\nrescanwallet (beginheight=0)\nsendfrom \"fromaccount\" \"toaddress\" amount (minconf=1 \"comment\" \"commentto\")\nsendmany \"fromaccount\" {\"address\":amount,...} (minconf=1 \"comment\")\nsendtoaddress \"address\" amount (\"comment\" \"commentto\")\nsendtomultisig \"fromaccount\" amount [\"pubkey\",...] (nrequired=1 minconf=1 \"comment\")\nsetgenerate generate (genproclimit=-1)\nsetticketmaxprice max\nsettxfee amount\nsignmessage \"address\" \"message\"\nsignrawtransaction \"rawtx\" ([{\"txid\":\"value\",\"vout\":n,\"tree\":n,\"scriptpubkey\":\"value\",\"redeemscript\":\"value\"},...] [\"privkey\",...] flags=\"ALL\")\nsignrawtransactions [\"rawtx\",...] (send=true)\nvalidateaddress \"address\"\nverifymessage \"address\" \"signature\" \"message\"\nversion\nwalletlock\nwalletpassphrase \"passphrase\" timeout\nwalletpassphrasechange \"oldpassphrase\" \"newpassphrase\"\ncreatenewaccount \"account\"\nexportwatchingwallet (\"account\" download=false)\ngetbestblock\ngetunconfirmedbalance (\"account\")\nlistaddresstransactions [\"address\",...] (\"account\")\nlistalltransactions (\"account\")\nrenameaccount \"oldaccount\" \"newaccount\"\nwalletislocked\nwalletinfo\npurchaseticket \"fromaccount\" spendlimit (minconf=1 \"ticketaddress\" numtickets \"pooladdress\" poolfees expiry \"comment\")\nsendtossrtx \"fromaccount\" \"tickethash\" (\"comment\")\nsendtosstx \"fromaccount\" amounts [{\"txid\":\"value\",\"vout\":n,\"tree\":n,\"amt\":n},...] [{\"addr\":\"value\",\"commitamt\":n,\"changeaddr\":\"value\",\"changeamt\":n},...] (minconf=1 \"comment\")\nsendtossgen \"fromaccount\" \"tickethash\" \"blockhash\" height votebits (\"comment\")\ngetticketvotebits \"txhash\"\ngetticketsvotebits [\"txhash\",...]\nsetticketvotebits \"txhash\" votebits (\"votebitsext\")\nsetticketsvotebits \"txhashes\" \"votebitsbytes\"\ngetstakeinfo\ngetticketfee\nsetticketfee fee\ngetwalletfee\naddticket \"tickethex\"\nlistscripts\nstakepooluserinfo \"user\"\nsetbalancetomaintain balance\ngetbalancetomaintain\nticketsforaddress \"address\""
