// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package dcrticketmatcher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindMatchesRequest struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMatchesRequest) Reset()         { *m = FindMatchesRequest{} }
func (m *FindMatchesRequest) String() string { return proto.CompactTextString(m) }
func (*FindMatchesRequest) ProtoMessage()    {}
func (*FindMatchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8978e7de507f24cb, []int{0}
}
func (m *FindMatchesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMatchesRequest.Unmarshal(m, b)
}
func (m *FindMatchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMatchesRequest.Marshal(b, m, deterministic)
}
func (dst *FindMatchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMatchesRequest.Merge(dst, src)
}
func (m *FindMatchesRequest) XXX_Size() int {
	return xxx_messageInfo_FindMatchesRequest.Size(m)
}
func (m *FindMatchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMatchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindMatchesRequest proto.InternalMessageInfo

func (m *FindMatchesRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type FindMatchesResponse struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	JoinId               string   `protobuf:"bytes,2,opt,name=join_id,json=joinId,proto3" json:"join_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMatchesResponse) Reset()         { *m = FindMatchesResponse{} }
func (m *FindMatchesResponse) String() string { return proto.CompactTextString(m) }
func (*FindMatchesResponse) ProtoMessage()    {}
func (*FindMatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8978e7de507f24cb, []int{1}
}
func (m *FindMatchesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMatchesResponse.Unmarshal(m, b)
}
func (m *FindMatchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMatchesResponse.Marshal(b, m, deterministic)
}
func (dst *FindMatchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMatchesResponse.Merge(dst, src)
}
func (m *FindMatchesResponse) XXX_Size() int {
	return xxx_messageInfo_FindMatchesResponse.Size(m)
}
func (m *FindMatchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMatchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindMatchesResponse proto.InternalMessageInfo

func (m *FindMatchesResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *FindMatchesResponse) GetJoinId() string {
	if m != nil {
		return m.JoinId
	}
	return ""
}

type SubmitInputTxReq struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	JoinId               string   `protobuf:"bytes,2,opt,name=join_id,json=joinId,proto3" json:"join_id,omitempty"`
	SplitTx              []byte   `protobuf:"bytes,3,opt,name=split_tx,json=splitTx,proto3" json:"split_tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitInputTxReq) Reset()         { *m = SubmitInputTxReq{} }
func (m *SubmitInputTxReq) String() string { return proto.CompactTextString(m) }
func (*SubmitInputTxReq) ProtoMessage()    {}
func (*SubmitInputTxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8978e7de507f24cb, []int{2}
}
func (m *SubmitInputTxReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitInputTxReq.Unmarshal(m, b)
}
func (m *SubmitInputTxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitInputTxReq.Marshal(b, m, deterministic)
}
func (dst *SubmitInputTxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitInputTxReq.Merge(dst, src)
}
func (m *SubmitInputTxReq) XXX_Size() int {
	return xxx_messageInfo_SubmitInputTxReq.Size(m)
}
func (m *SubmitInputTxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitInputTxReq.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitInputTxReq proto.InternalMessageInfo

func (m *SubmitInputTxReq) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SubmitInputTxReq) GetJoinId() string {
	if m != nil {
		return m.JoinId
	}
	return ""
}

func (m *SubmitInputTxReq) GetSplitTx() []byte {
	if m != nil {
		return m.SplitTx
	}
	return nil
}

type SubmitInputTxRes struct {
	TicketTx             []byte   `protobuf:"bytes,1,opt,name=ticket_tx,json=ticketTx,proto3" json:"ticket_tx,omitempty"`
	InputsIds            []int32  `protobuf:"varint,2,rep,packed,name=inputs_ids,json=inputsIds,proto3" json:"inputs_ids,omitempty"`
	OutputIds            []int32  `protobuf:"varint,3,rep,packed,name=output_ids,json=outputIds,proto3" json:"output_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitInputTxRes) Reset()         { *m = SubmitInputTxRes{} }
func (m *SubmitInputTxRes) String() string { return proto.CompactTextString(m) }
func (*SubmitInputTxRes) ProtoMessage()    {}
func (*SubmitInputTxRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8978e7de507f24cb, []int{3}
}
func (m *SubmitInputTxRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitInputTxRes.Unmarshal(m, b)
}
func (m *SubmitInputTxRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitInputTxRes.Marshal(b, m, deterministic)
}
func (dst *SubmitInputTxRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitInputTxRes.Merge(dst, src)
}
func (m *SubmitInputTxRes) XXX_Size() int {
	return xxx_messageInfo_SubmitInputTxRes.Size(m)
}
func (m *SubmitInputTxRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitInputTxRes.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitInputTxRes proto.InternalMessageInfo

func (m *SubmitInputTxRes) GetTicketTx() []byte {
	if m != nil {
		return m.TicketTx
	}
	return nil
}

func (m *SubmitInputTxRes) GetInputsIds() []int32 {
	if m != nil {
		return m.InputsIds
	}
	return nil
}

func (m *SubmitInputTxRes) GetOutputIds() []int32 {
	if m != nil {
		return m.OutputIds
	}
	return nil
}

type SignTransactionRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	JoinId               string   `protobuf:"bytes,2,opt,name=join_id,json=joinId,proto3" json:"join_id,omitempty"`
	SplitTx              []byte   `protobuf:"bytes,3,opt,name=split_tx,json=splitTx,proto3" json:"split_tx,omitempty"`
	ReqType              int32    `protobuf:"varint,4,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignTransactionRequest) Reset()         { *m = SignTransactionRequest{} }
func (m *SignTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SignTransactionRequest) ProtoMessage()    {}
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8978e7de507f24cb, []int{4}
}
func (m *SignTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTransactionRequest.Unmarshal(m, b)
}
func (m *SignTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTransactionRequest.Marshal(b, m, deterministic)
}
func (dst *SignTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTransactionRequest.Merge(dst, src)
}
func (m *SignTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SignTransactionRequest.Size(m)
}
func (m *SignTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignTransactionRequest proto.InternalMessageInfo

func (m *SignTransactionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SignTransactionRequest) GetJoinId() string {
	if m != nil {
		return m.JoinId
	}
	return ""
}

func (m *SignTransactionRequest) GetSplitTx() []byte {
	if m != nil {
		return m.SplitTx
	}
	return nil
}

func (m *SignTransactionRequest) GetReqType() int32 {
	if m != nil {
		return m.ReqType
	}
	return 0
}

type SignTransactionResponse struct {
	TicketTx             []byte   `protobuf:"bytes,1,opt,name=ticket_tx,json=ticketTx,proto3" json:"ticket_tx,omitempty"`
	Publisher            bool     `protobuf:"varint,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignTransactionResponse) Reset()         { *m = SignTransactionResponse{} }
func (m *SignTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*SignTransactionResponse) ProtoMessage()    {}
func (*SignTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8978e7de507f24cb, []int{5}
}
func (m *SignTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTransactionResponse.Unmarshal(m, b)
}
func (m *SignTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTransactionResponse.Marshal(b, m, deterministic)
}
func (dst *SignTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTransactionResponse.Merge(dst, src)
}
func (m *SignTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_SignTransactionResponse.Size(m)
}
func (m *SignTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignTransactionResponse proto.InternalMessageInfo

func (m *SignTransactionResponse) GetTicketTx() []byte {
	if m != nil {
		return m.TicketTx
	}
	return nil
}

func (m *SignTransactionResponse) GetPublisher() bool {
	if m != nil {
		return m.Publisher
	}
	return false
}

type PublishResultRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	JoinId               string   `protobuf:"bytes,2,opt,name=join_id,json=joinId,proto3" json:"join_id,omitempty"`
	JoinedTx             []byte   `protobuf:"bytes,3,opt,name=joined_tx,json=joinedTx,proto3" json:"joined_tx,omitempty"`
	ReqType              int32    `protobuf:"varint,4,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResultRequest) Reset()         { *m = PublishResultRequest{} }
func (m *PublishResultRequest) String() string { return proto.CompactTextString(m) }
func (*PublishResultRequest) ProtoMessage()    {}
func (*PublishResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8978e7de507f24cb, []int{6}
}
func (m *PublishResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResultRequest.Unmarshal(m, b)
}
func (m *PublishResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResultRequest.Marshal(b, m, deterministic)
}
func (dst *PublishResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResultRequest.Merge(dst, src)
}
func (m *PublishResultRequest) XXX_Size() int {
	return xxx_messageInfo_PublishResultRequest.Size(m)
}
func (m *PublishResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResultRequest proto.InternalMessageInfo

func (m *PublishResultRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *PublishResultRequest) GetJoinId() string {
	if m != nil {
		return m.JoinId
	}
	return ""
}

func (m *PublishResultRequest) GetJoinedTx() []byte {
	if m != nil {
		return m.JoinedTx
	}
	return nil
}

func (m *PublishResultRequest) GetReqType() int32 {
	if m != nil {
		return m.ReqType
	}
	return 0
}

type PublishResultResponse struct {
	TicketTx             []byte   `protobuf:"bytes,1,opt,name=ticket_tx,json=ticketTx,proto3" json:"ticket_tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResultResponse) Reset()         { *m = PublishResultResponse{} }
func (m *PublishResultResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResultResponse) ProtoMessage()    {}
func (*PublishResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8978e7de507f24cb, []int{7}
}
func (m *PublishResultResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResultResponse.Unmarshal(m, b)
}
func (m *PublishResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResultResponse.Marshal(b, m, deterministic)
}
func (dst *PublishResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResultResponse.Merge(dst, src)
}
func (m *PublishResultResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResultResponse.Size(m)
}
func (m *PublishResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResultResponse proto.InternalMessageInfo

func (m *PublishResultResponse) GetTicketTx() []byte {
	if m != nil {
		return m.TicketTx
	}
	return nil
}

func init() {
	proto.RegisterType((*FindMatchesRequest)(nil), "dcrticketmatcher.FindMatchesRequest")
	proto.RegisterType((*FindMatchesResponse)(nil), "dcrticketmatcher.FindMatchesResponse")
	proto.RegisterType((*SubmitInputTxReq)(nil), "dcrticketmatcher.SubmitInputTxReq")
	proto.RegisterType((*SubmitInputTxRes)(nil), "dcrticketmatcher.SubmitInputTxRes")
	proto.RegisterType((*SignTransactionRequest)(nil), "dcrticketmatcher.SignTransactionRequest")
	proto.RegisterType((*SignTransactionResponse)(nil), "dcrticketmatcher.SignTransactionResponse")
	proto.RegisterType((*PublishResultRequest)(nil), "dcrticketmatcher.PublishResultRequest")
	proto.RegisterType((*PublishResultResponse)(nil), "dcrticketmatcher.PublishResultResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SplitTxMatcherServiceClient is the client API for SplitTxMatcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SplitTxMatcherServiceClient interface {
	FindMatches(ctx context.Context, in *FindMatchesRequest, opts ...grpc.CallOption) (*FindMatchesResponse, error)
	SubmitSplitTx(ctx context.Context, in *SubmitInputTxReq, opts ...grpc.CallOption) (*SubmitInputTxRes, error)
	SubmitSignedTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error)
	PublishResult(ctx context.Context, in *PublishResultRequest, opts ...grpc.CallOption) (*PublishResultResponse, error)
}

type splitTxMatcherServiceClient struct {
	cc *grpc.ClientConn
}

func NewSplitTxMatcherServiceClient(cc *grpc.ClientConn) SplitTxMatcherServiceClient {
	return &splitTxMatcherServiceClient{cc}
}

func (c *splitTxMatcherServiceClient) FindMatches(ctx context.Context, in *FindMatchesRequest, opts ...grpc.CallOption) (*FindMatchesResponse, error) {
	out := new(FindMatchesResponse)
	err := c.cc.Invoke(ctx, "/dcrticketmatcher.SplitTxMatcherService/FindMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitTxMatcherServiceClient) SubmitSplitTx(ctx context.Context, in *SubmitInputTxReq, opts ...grpc.CallOption) (*SubmitInputTxRes, error) {
	out := new(SubmitInputTxRes)
	err := c.cc.Invoke(ctx, "/dcrticketmatcher.SplitTxMatcherService/SubmitSplitTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitTxMatcherServiceClient) SubmitSignedTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error) {
	out := new(SignTransactionResponse)
	err := c.cc.Invoke(ctx, "/dcrticketmatcher.SplitTxMatcherService/SubmitSignedTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitTxMatcherServiceClient) PublishResult(ctx context.Context, in *PublishResultRequest, opts ...grpc.CallOption) (*PublishResultResponse, error) {
	out := new(PublishResultResponse)
	err := c.cc.Invoke(ctx, "/dcrticketmatcher.SplitTxMatcherService/PublishResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SplitTxMatcherServiceServer is the server API for SplitTxMatcherService service.
type SplitTxMatcherServiceServer interface {
	FindMatches(context.Context, *FindMatchesRequest) (*FindMatchesResponse, error)
	SubmitSplitTx(context.Context, *SubmitInputTxReq) (*SubmitInputTxRes, error)
	SubmitSignedTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error)
	PublishResult(context.Context, *PublishResultRequest) (*PublishResultResponse, error)
}

func RegisterSplitTxMatcherServiceServer(s *grpc.Server, srv SplitTxMatcherServiceServer) {
	s.RegisterService(&_SplitTxMatcherService_serviceDesc, srv)
}

func _SplitTxMatcherService_FindMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTxMatcherServiceServer).FindMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTxMatcherService/FindMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTxMatcherServiceServer).FindMatches(ctx, req.(*FindMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SplitTxMatcherService_SubmitSplitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitInputTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTxMatcherServiceServer).SubmitSplitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTxMatcherService/SubmitSplitTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTxMatcherServiceServer).SubmitSplitTx(ctx, req.(*SubmitInputTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SplitTxMatcherService_SubmitSignedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTxMatcherServiceServer).SubmitSignedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTxMatcherService/SubmitSignedTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTxMatcherServiceServer).SubmitSignedTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SplitTxMatcherService_PublishResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTxMatcherServiceServer).PublishResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTxMatcherService/PublishResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTxMatcherServiceServer).PublishResult(ctx, req.(*PublishResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SplitTxMatcherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dcrticketmatcher.SplitTxMatcherService",
	HandlerType: (*SplitTxMatcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMatches",
			Handler:    _SplitTxMatcherService_FindMatches_Handler,
		},
		{
			MethodName: "SubmitSplitTx",
			Handler:    _SplitTxMatcherService_SubmitSplitTx_Handler,
		},
		{
			MethodName: "SubmitSignedTransaction",
			Handler:    _SplitTxMatcherService_SubmitSignedTransaction_Handler,
		},
		{
			MethodName: "PublishResult",
			Handler:    _SplitTxMatcherService_PublishResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_8978e7de507f24cb) }

var fileDescriptor_api_8978e7de507f24cb = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0xdd, 0xca, 0xd3, 0x40,
	0x10, 0x25, 0xa6, 0x3f, 0xc9, 0x68, 0xa1, 0xac, 0xf6, 0xc7, 0xa8, 0x20, 0xc1, 0x9f, 0x0a, 0xd2,
	0x0b, 0xf5, 0x19, 0x84, 0x5c, 0x14, 0x24, 0x09, 0x08, 0xde, 0xd4, 0x34, 0x59, 0x74, 0xb5, 0xd9,
	0xa4, 0xd9, 0x8d, 0xc4, 0x17, 0xf0, 0x31, 0x7c, 0x56, 0x67, 0x77, 0x23, 0xb5, 0x4d, 0x69, 0x8b,
	0xdf, 0x77, 0x97, 0x33, 0xe7, 0xec, 0xce, 0x9c, 0x99, 0xd9, 0x80, 0x9b, 0x94, 0x6c, 0x59, 0x56,
	0x85, 0x2c, 0xc8, 0x38, 0x4b, 0x2b, 0xc9, 0xd2, 0xef, 0x54, 0xe6, 0x89, 0x4c, 0xbf, 0xd2, 0xca,
	0x7f, 0x0d, 0xe4, 0x3d, 0xe3, 0xd9, 0x4a, 0x43, 0x11, 0xd2, 0x5d, 0x4d, 0x85, 0x24, 0x53, 0x18,
	0x24, 0x79, 0x51, 0x73, 0x39, 0xb7, 0x9e, 0x5a, 0x8b, 0x5e, 0xd8, 0x22, 0x7f, 0x05, 0xf7, 0x0f,
	0xd4, 0xa2, 0x2c, 0xb8, 0xa0, 0xe4, 0x09, 0x80, 0xa0, 0x42, 0xb0, 0x82, 0xaf, 0x59, 0xa6, 0x8f,
	0xb8, 0xa1, 0xdb, 0x46, 0x82, 0x8c, 0xcc, 0x60, 0xf8, 0xad, 0x60, 0x9a, 0xbb, 0xa3, 0xb9, 0x81,
	0x82, 0x41, 0xe6, 0x53, 0x18, 0x47, 0xf5, 0x26, 0x67, 0x32, 0xe0, 0x65, 0x2d, 0xe3, 0x06, 0xd3,
	0xff, 0xef, 0x5d, 0xe4, 0x21, 0x38, 0xa2, 0xdc, 0x32, 0xb9, 0x96, 0xcd, 0xdc, 0x46, 0xe6, 0x5e,
	0x38, 0xd4, 0x38, 0x6e, 0xfc, 0xbc, 0x93, 0x46, 0x90, 0x47, 0xe0, 0x9a, 0x46, 0x28, 0xbd, 0xa5,
	0xf5, 0x8e, 0x09, 0xc4, 0x8d, 0xaa, 0x81, 0x29, 0xa9, 0xc0, 0x34, 0x02, 0xf3, 0xd8, 0x8b, 0x7e,
	0xe8, 0x9a, 0x48, 0x90, 0x09, 0x45, 0x17, 0xb5, 0x44, 0xa4, 0x69, 0xdb, 0xd0, 0x26, 0x82, 0xb4,
	0xff, 0xcb, 0x82, 0x69, 0xc4, 0xbe, 0xf0, 0xb8, 0x4a, 0xb8, 0x48, 0x52, 0x89, 0x85, 0xff, 0xed,
	0xeb, 0xed, 0x9b, 0x53, 0x54, 0x45, 0x77, 0x6b, 0xf9, 0xb3, 0xa4, 0xf3, 0x1e, 0x52, 0xfd, 0x70,
	0x88, 0x38, 0x46, 0xe8, 0xc7, 0x30, 0xeb, 0xd4, 0xd1, 0x4e, 0xec, 0xac, 0xfd, 0xc7, 0xe0, 0x96,
	0xf5, 0x66, 0xcb, 0x04, 0x2e, 0x88, 0x2e, 0xc4, 0x09, 0xf7, 0x01, 0x65, 0xef, 0xc1, 0x07, 0x83,
	0xf0, 0xba, 0x7a, 0x2b, 0x6f, 0x6a, 0x0e, 0x6b, 0x51, 0x5f, 0x34, 0xdb, 0xbb, 0x73, 0x4c, 0xe0,
	0xbc, 0xbd, 0x77, 0x30, 0x39, 0xaa, 0xe3, 0x0a, 0x73, 0x6f, 0x7e, 0xdb, 0x30, 0x89, 0x4c, 0xef,
	0xcc, 0x1a, 0x57, 0x11, 0xad, 0x7e, 0xb0, 0x94, 0x92, 0x4f, 0x70, 0xf7, 0x9f, 0xe5, 0x26, 0xcf,
	0x96, 0xc7, 0x8f, 0x65, 0xd9, 0x7d, 0x29, 0xde, 0xf3, 0x0b, 0xaa, 0xb6, 0xa4, 0x8f, 0x30, 0x32,
	0x2b, 0xd8, 0xa6, 0x26, 0x7e, 0xf7, 0xdc, 0xf1, 0x53, 0xf0, 0x2e, 0x6b, 0x04, 0xe1, 0x38, 0x63,
	0x73, 0x31, 0x4e, 0x1a, 0x3b, 0xb6, 0x9f, 0x35, 0x59, 0x9c, 0x38, 0x7e, 0x72, 0x2d, 0xbd, 0x57,
	0x57, 0x28, 0x5b, 0x23, 0x9f, 0x61, 0x74, 0xd0, 0x74, 0xf2, 0xa2, 0x7b, 0xf6, 0xd4, 0x76, 0x78,
	0x2f, 0x2f, 0xea, 0x4c, 0x86, 0xcd, 0x40, 0xff, 0xaa, 0xde, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x8b, 0xa7, 0x80, 0x79, 0xb7, 0x04, 0x00, 0x00,
}
